@model Rebel.Cms.Web.Model.BackOffice.Editors.DataTypeEditorModel
@using Rebel.Framework.Localization;

@{
    Layout = "../Shared/_TabbedEditorLayout.cshtml";
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
}
@section Head {
    @{Html.RequiresJs("Rebel.Editors/DataTypeEditor.js", "Scripts");}
    <script type="text/javascript">
        (function ($) {
            $(document).ready(function () {
                Rebel.Editors.DataTypeEditor.getInstance().init({
                    propEditorDropDown: $("#@Html.IdFor(x => x.PropertyEditorId)")
                });
            });
        })(jQuery);
    </script>
}
@section tabs {
    <li><a href="#t-user-properties"><span>@("DataType.Editor.Tab.Title".Localize())</span></a></li>
}
@{
    //need to change the post action based on whether this is new content or existing content
    //if it's new content, we need to post the parent doc type id to create the doc type with, if its
    //existing content, we just post the existing doc type id to lookup and bind.
    var action = !Model.Id.IsNullValueOrEmpty() ? "Edit" : "Create";
    var urlParams = !Model.Id.IsNullValueOrEmpty() ? (object)new { id = Model.Id } : null;
}
@using (Html.BeginForm(action, new Guid(CorePluginConstants.DataTypeEditorControllerId), urlParams, new { enctype = "multipart/form-data" }))
{
    @Html.UmbValidationSummary("Save.ValidationSummary.Title".Localize())

    @Html.UmbEditorBar();

    <div id="editorContent" class="has-editor-bar scrolling-content padded-content">

        @if (Model.Id.IsNullValueOrEmpty())
        {
            <p class="notice">@("DataType.UnSaved.Message".Localize())</p>
        }

        @* Render Property editor on first tab *@
        <div>
            <div id="dataTypeDefinition" class="property-pane clearfix">
                @Html.UmbEditorFor(x => Model.Name)
                @Html.UmbEditorFor(x => Model.PropertyEditorId)
                <label>
                    @("DataType.Editor.DataTypeGUID".Localize())</label>
                <div class="property-editor">
                    <div class="property-content">
                        <span id="propertyEditorGuid" data-bind="text: selectedId"></span>
                    </div>
                </div>
            </div>
            @if (Model.PropertyEditorId != null && Model.HasEditableProperties())
            {
                <h2>
                    @("DataType.Editor.Settings".Localize())</h2>
                <div class="property-pane clearfix">
                    @{
                        if (Model.PropertyEditorId != Guid.Empty)
                        {
                            //Creates an HtmlHelper for a specific area if the property editor exists in a package that isn't the core
                            //this is so that the ViewEngine searches for the views in the package folder if they are not embedded.
                            //fixes issue: http://issues.rebelcms.com/issue/U5-946
                            var htmlHelper = Html;
                            if (!Model.PropertyEditorPackage.IsNullOrWhiteSpace() && !Model.PropertyEditorPackage.InvariantEquals("Core"))
                            {
                                htmlHelper = Html.CloneForArea(Model.PropertyEditorPackage);
                            }
                            @htmlHelper.EditorFor(x => Model.PreValueEditorModel, Html.GetEmbeddedViewPath((object)Model.PreValueEditorModel))
                        }
                    }
                </div>
            }
        </div>
    </div>
}
