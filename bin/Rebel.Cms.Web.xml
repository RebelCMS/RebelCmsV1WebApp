<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rebel.Cms.Web</name>
    </assembly>
    <members>
        <member name="M:Rebel.Cms.Web.QueryWrapper`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Rebel.Cms.Web.QueryWrapper`1.global::System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Rebel.Cms.Web.QueryWrapper`1.Expression">
            <summary>
            Gets the expression tree that is associated with the instance of <see cref="T:System.Linq.IQueryable"/>.
            </summary>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that is associated with this instance of <see cref="T:System.Linq.IQueryable"/>.
            </returns>
        </member>
        <member name="P:Rebel.Cms.Web.QueryWrapper`1.ElementType">
            <summary>
            Gets the type of the element(s) that are returned when the expression tree associated with this instance of <see cref="T:System.Linq.IQueryable"/> is executed.
            </summary>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of the element(s) that are returned when the expression tree associated with this object is executed.
            </returns>
        </member>
        <member name="P:Rebel.Cms.Web.QueryWrapper`1.Provider">
            <summary>
            Gets the query provider that is associated with this data source.
            </summary>
            <returns>
            The <see cref="T:System.Linq.IQueryProvider"/> that is associated with this data source.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.DynamicContentList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Rebel.Cms.Web.DynamicContentList.Expression">
            <summary>
            Gets the expression tree that is associated with the instance of <see cref="T:System.Linq.IQueryable"/>.
            </summary>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that is associated with this instance of <see cref="T:System.Linq.IQueryable"/>.
            </returns>
        </member>
        <member name="P:Rebel.Cms.Web.DynamicContentList.ElementType">
            <summary>
            Gets the type of the element(s) that are returned when the expression tree associated with this instance of <see cref="T:System.Linq.IQueryable"/> is executed.
            </summary>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of the element(s) that are returned when the expression tree associated with this object is executed.
            </returns>
        </member>
        <member name="P:Rebel.Cms.Web.DynamicContentList.Provider">
            <summary>
            Gets the query provider that is associated with this data source.
            </summary>
            <returns>
            The <see cref="T:System.Linq.IQueryProvider"/> that is associated with this data source.
            </returns>
        </member>
        <member name="P:Rebel.Cms.Web.DynamicContentList.DynamicContentEnumerator.HiveManager">
            <summary>
            Gets the framework context.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Rebel.Cms.Web.BendyObjectExtensionsHelper.ApplyDynamicExtensions``1(Rebel.Framework.Dynamics.BendyObject,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Applies the dynamic extensions.
            </summary>
            <param name="bendyObject">The bendy object.</param>
        </member>
        <member name="M:Rebel.Cms.Web.BendyObjectExtensionsHelper.ApplyDynamicExtensions``1(Rebel.Framework.Dynamics.BendyObject,System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})">
            <summary>
            Applies the dynamic extensions.
            </summary>
            <param name="bendyObject">The bendy object.</param>
            <param name="extentionMethods">The extention methods.</param>
        </member>
        <member name="M:Rebel.Cms.Web.BendyObjectExtensionsHelper.ApplyDynamicFieldExtensions``1(``0,System.String,Rebel.Framework.Dynamics.BendyObject,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Applies the dynamic field extensions.
            </summary>
            <typeparam name="TParentType">The type of the parent item.</typeparam>
            <param name="parent">The parent.</param>
            <param name="propertyEditorId">The property editor id.</param>
            <param name="bendyObject">The bendy object.</param>
        </member>
        <member name="M:Rebel.Cms.Web.BendyObjectExtensionsHelper.ApplyDynamicFieldExtensions``1(``0,System.String,Rebel.Framework.Dynamics.BendyObject,System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})">
            <summary>
            Applies the dynamic field extensions.
            </summary>
            <typeparam name="TParentType">The type of the parent item.</typeparam>
            <param name="parent">The parent.</param>
            <param name="propertyEditorId">The property editor id.</param>
            <param name="bendyObject">The bendy object.</param>
            <param name="extentionMethods">The extention methods.</param>
        </member>
        <member name="T:Rebel.Cms.Web.BuildManagerCodeDelegates.CodeDelegatesCollection">
            <summary>
            Allows for registration of Code snippet delegates for the CodeDelegateVirtualPathProvider to find
            </summary>
        </member>
        <member name="F:Rebel.Cms.Web.BuildManagerCodeDelegates.CodeDelegatesCollection.SnippetCollection">
            <summary>
            Dictionary containing delegates used to return a code snippet
            </summary>
            <remarks>
            The key is the unique identifier of the code snippet (which must be created using the Create method of CodeDelegateVirtualPath),
            The value is the delegate which passes in the 'object key' to the delegate in order to get the code snippet returned.
            </remarks>
        </member>
        <member name="T:Rebel.Cms.Web.BuildManagerCodeDelegates.CodeDelegateVirtualFile">
            <summary>
            Represents a Virtual file for a code delegate
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.BuildManagerCodeDelegates.CodeDelegateVirtualFile.Open">
            <summary>
            Opens the code delegate as as Stream
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rebel.Cms.Web.BuildManagerCodeDelegates.CodeDelegateVirtualFile.Name">
            <summary>
            Returns the id of the path
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.BuildManagerCodeDelegates.CodeDelegateParameter">
            <summary>
            Represents the delegate parameter that will be passed into the delegate to return the code block
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.BuildManagerCodeDelegates.CodeDelegateParameter.Parameter">
            <summary>
            The object that will be passed into the delegate as a parameter
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.BuildManagerCodeDelegates.CodeDelegateParameter.UtcTicks">
            <summary>
            The UTC Ticks of when this object is created
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.BuildManagerCodeDelegates.CodeDelegateVirtualPath">
            <summary>
            A static helper class for creating new Ids for use in storing code snippets in the CodeDelegatesCollection collection
            </summary>
        </member>
        <member name="F:Rebel.Cms.Web.BuildManagerCodeDelegates.CodeDelegateVirtualPath.VirtualPathIds">
            <summary>
            Internal collection of path ids and it's definition
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.BuildManagerCodeDelegates.CodeDelegateVirtualPath.TryGetVirtualPathDefinition(System.String)">
            <summary>
            Returns the virtual path id and the CodeDelegateParameter for the virtualPathId if one exists
            </summary>
            <param name="virtualPathId"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.BuildManagerCodeDelegates.CodeDelegateVirtualPath.GetVirtualPathIdsForDelegate(System.Object)">
            <summary>
            returns all virtual path ids that have been registered with the delegate parameter
            </summary>
            <param name="delegateParameter"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.BuildManagerCodeDelegates.CodeDelegateVirtualPath.TryUpdate``1(System.String,``0)">
            <summary>
            Attempts to update a delegateParameter for the virtualPathId specified if one exists
            </summary>
            <typeparam name="T"></typeparam>
            <param name="virtualPathId"></param>
            <param name="delegateParameter"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.BuildManagerCodeDelegates.CodeDelegateVirtualPath.GetOrCreateVirtualPathId``1(``0,System.String)">
            <summary>
            Creates a new Id for the code delegate, if one is already found then we will return the id that already exists.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="delegateParameter">
            An object representing the delegate, this object will be passed in to the delegate as a parameter which
            can be used in the delegate method body to return the code snippet
            </param>
            <param name="virtualPath">
            The unique Id of the object which will be used to create the virtual path, this id will be passed into the 
            delegate used to return the code snippet, in most cases, this id will contain information that can be used
            in the delegate for data retreival.
            
            If not supplied, then the ToString method of the delegateParameter will be used.
            </param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.BuildManagerCodeDelegates.CodeDelegateVirtualPath.IsVirtualPathId(System.String)">
            <summary>
            Determines if the path passed in is a code delegate id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.BuildManagerCodeDelegates.CodeDelegateVirtualPath.IsCodeDelegateVirtualPath(System.String)">
            <summary>
            Determines if the path passed in is a code delegate path
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.BuildManagerCodeDelegates.CodeDelegateVirtualPath.GetIdFromVirtualPath(System.String)">
            <summary>
            Extracts the code delegate id from the virtual path
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.BuildManagerCodeDelegates.CodeDelegateVirtualPath.CreateFullPath(System.String,System.String)">
            <summary>
            Returns a full virtual path for the code delegate id
            </summary>
            <param name="id"></param>
            <param name="extension"></param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.BuildManagerCodeDelegates.CodeDelegateVirtualPathProvider">
            <summary>
            A virtual path provider to find any code snippets that have been registered in the CodeDelegatesCollection collection
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.BuildManagerCodeDelegates.CodeDelegateVirtualPathProvider.GetFile(System.String)">
            <summary>
            Returns the view resource stream 
            </summary>
            <param name="virtualPath"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.BuildManagerCodeDelegates.CodeDelegateVirtualPathProvider.GetCacheKey(System.String)">
            <summary>
            Override the GetCacheKey to return a key for the virtual path that is unique to the timestamp that the code snippet
            was registered, this allows for invalidating a code snippet item which will force a re-compile
            </summary>
            <param name="virtualPath"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.BuildManagerCodeDelegates.CodeDelegateVirtualPathProvider.GetCacheDependency(System.String,System.Collections.IEnumerable,System.DateTime)">
            <summary>
            We return null for the cache dependency since we cannot provide any absolute paths to files
            </summary>
            <param name="virtualPath"></param>
            <param name="virtualPathDependencies"></param>
            <param name="utcStart"></param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Caching.CacheRecycler">
            <summary>
            This object is used for when nodes and templates are saved
            When a node is saved the background thread will only wam the relevant nodes
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.Cms``1(Rebel.Hive.IBuilderStep{``0})">
            <summary>
            Returns a new <see cref="T:Rebel.Cms.Web.FluentExtensions.CmsBuilderStep`1"/> based on the <see cref="T:Rebel.Hive.IHiveManager"/> in <paramref name="builderStep"/>, making Cms-specific 
            extension methods available for use.
            </summary>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="builderStep">The builder step.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.Cms``1(Rebel.Hive.IHiveManager)">
            <summary>
            Returns a new <see cref="T:Rebel.Cms.Web.FluentExtensions.CmsBuilderStep`1"/> based on <paramref name="hiveManager"/>, making Cms-specific 
            extension methods available for use.
            </summary>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="hiveManager">The hive manager.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.UploadFileStore``1(Rebel.Cms.Web.FluentExtensions.ICmsBuilderStep{``0})">
            <summary>
            Returns a new <see cref="T:Rebel.Hive.IFileStoreStep`2"/> making filestore-specific extension methods
            available for use.
            </summary>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="builderStep">The builder step.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.UploadFileStore(Rebel.Cms.Web.IRenderViewHiveManagerWrapper)">
            <summary>
            Returns a new <see cref="T:Rebel.Hive.IFileStoreStep`2"/> making filestore-specific extension methods
            available for use.
            </summary>
            <param name="hiveManager">The hive manager.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.NewRevision``1(Rebel.Cms.Web.FluentExtensions.ICmsBuilderStep{``0},System.String,System.String,System.String,System.Boolean)">
            <summary>
            Starts the building of a new entity revision inside a Hive provider group specified by <typeparamref name="TProviderFilter"/>. Note that changes are not committed to Hive automatically after this step; you must call <see cref="M:Rebel.Cms.Web.CmsBuildStepExtensions.Commit``2(Rebel.Cms.Web.FluentExtensions.IContentRevisionBuilderStep{``0,``1})"/> or manually add items to a writable Hive unit of work.
            </summary>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="builderStep">The builder step.</param>
            <param name="name">The name.</param>
            <param name="urlAlias">The URL alias.</param>
            <param name="contentTypeAlias">The content type alias.</param>
            <param name="setRootAsParent">If set to <c>true</c>, automatically set the content root as its parent.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.NewRevision(Rebel.Cms.Web.IRenderViewHiveManagerWrapper,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Starts the building of a new entity revision inside the <see cref="T:Rebel.Hive.RepositoryTypes.IContentStore"/> Hive provider group. Note that changes are not committed to Hive automatically after this step; you must call <see cref="M:Rebel.Cms.Web.CmsBuildStepExtensions.Commit``2(Rebel.Cms.Web.FluentExtensions.IContentRevisionBuilderStep{``0,``1})"/> or manually add items to a writable Hive unit of work.
            </summary>
            <param name="hiveManager">The hive manager.</param>
            <param name="name">The name.</param>
            <param name="urlAlias">The URL alias.</param>
            <param name="contentTypeAlias">The content type alias.</param>
            <param name="setRootAsParent">if set to <c>true</c> [set root as parent].</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.NewRevision``1(Rebel.Cms.Web.FluentExtensions.ICmsBuilderStep{``0},System.String,System.String,Rebel.Hive.ISchemaBuilderStep{Rebel.Framework.Persistence.Model.Attribution.MetaData.EntitySchema,``0},System.Boolean)">
            <summary>
            Starts the building of a new entity revision inside the <see cref="T:Rebel.Hive.RepositoryTypes.IContentStore"/> Hive provider group. Note that changes are not committed to Hive automatically after this step; you must call <see cref="M:Rebel.Cms.Web.CmsBuildStepExtensions.Commit``2(Rebel.Cms.Web.FluentExtensions.IContentRevisionBuilderStep{``0,``1})"/> or manually add items to a writable Hive unit of work.
            </summary>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="builderStep">The builder step.</param>
            <param name="name">The name.</param>
            <param name="urlAlias">The URL alias.</param>
            <param name="contentTypeBuilder">The content type builder.</param>
            <param name="setRootAsParent">if set to <c>true</c> [set root as parent].</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.NewRevisionOf(Rebel.Cms.Web.IRenderViewHiveManagerWrapper,Rebel.Framework.Persistence.Model.TypedEntity)">
            <summary>
            Starts the building of a new revision of an existing entity inside the <see cref="T:Rebel.Hive.RepositoryTypes.IContentStore"/> Hive provider group. Note that changes are not committed to Hive automatically after this step; you must call <see cref="M:Rebel.Cms.Web.CmsBuildStepExtensions.Commit``2(Rebel.Cms.Web.FluentExtensions.IContentRevisionBuilderStep{``0,``1})"/> or manually add items to a writable Hive unit of work.
            </summary>
            <param name="cmsHiveManager">The CMS hive manager.</param>
            <param name="content">The existing content.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.NewRevisionOf``1(Rebel.Cms.Web.IRenderViewHiveManagerWrapper,Rebel.Framework.Persistence.Model.TypedEntity)">
            <summary>
            Starts the building of a new revision of an existing entity inside the <typeparamref name="TProviderFilter"/> Hive provider group. Note that changes are not committed to Hive automatically after this step; you must call <see cref="M:Rebel.Cms.Web.CmsBuildStepExtensions.Commit``2(Rebel.Cms.Web.FluentExtensions.IContentRevisionBuilderStep{``0,``1})"/> or manually add items to a writable Hive unit of work.
            </summary>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="cmsHiveManager">The CMS hive manager.</param>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.NewRevisionOf``2(Rebel.Cms.Web.IRenderViewHiveManagerWrapper,``0)">
            <summary>
            Starts the building of a new revision of an existing entity inside the <typeparamref name="TProviderFilter"/> Hive provider group. Note that changes are not committed to Hive automatically after this step; you must call <see cref="M:Rebel.Cms.Web.CmsBuildStepExtensions.Commit``2(Rebel.Cms.Web.FluentExtensions.IContentRevisionBuilderStep{``0,``1})"/> or manually add items to a writable Hive unit of work.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="cmsHiveManager">The CMS hive manager.</param>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.NewRevision``1(Rebel.Cms.Web.FluentExtensions.ICmsBuilderStep{``0},System.String,System.String,Rebel.Framework.Persistence.Model.Attribution.MetaData.EntitySchema,System.Boolean)">
            <summary>
            Starts the building of a new entity revision inside the <typeparamref name="TProviderFilter"/> Hive provider group. Note that changes are not committed to Hive automatically after this step; you must call <see cref="M:Rebel.Cms.Web.CmsBuildStepExtensions.Commit``2(Rebel.Cms.Web.FluentExtensions.IContentRevisionBuilderStep{``0,``1})"/> or manually add items to a writable Hive unit of work.
            </summary>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="builderStep">The builder step.</param>
            <param name="name">The name.</param>
            <param name="urlAlias">The URL alias.</param>
            <param name="contentType">Type of the content.</param>
            <param name="setRootAsParent">If set to <c>true</c>, automatically set the content root as its parent.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.NewRevision``2(Rebel.Cms.Web.FluentExtensions.ICmsBuilderStep{``1},System.String,System.String,System.String,System.Boolean)">
            <summary>
            Starts the building of a new entity revision inside the <typeparamref name="TProviderFilter"/> Hive provider group. Note that changes are not committed to Hive automatically after this step; you must call <see cref="M:Rebel.Cms.Web.CmsBuildStepExtensions.Commit``2(Rebel.Cms.Web.FluentExtensions.IContentRevisionBuilderStep{``0,``1})"/> or manually add items to a writable Hive unit of work.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="builderStep">The builder step.</param>
            <param name="name">The name.</param>
            <param name="urlAlias">The URL alias.</param>
            <param name="contentTypeAlias">The content type alias.</param>
            <param name="setRootAsParent">If set to <c>true</c>, automatically set the content root as its parent.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.Publish``2(Rebel.Cms.Web.FluentExtensions.IContentRevisionBuilderStep{``0,``1})">
            <summary>
            Sets the revision builder to mark the entity as having a "published" revision status when eventually committed to Hive.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="builderStep">The builder step.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.UnPublish``2(Rebel.Cms.Web.FluentExtensions.IContentRevisionBuilderStep{``0,``1})">
            <summary>
            Sets the revision builder to mark the entity as having a "unpublished" revision status when eventually committed to Hive.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="builderStep">The builder step.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.NewRevision``2(Rebel.Cms.Web.FluentExtensions.ICmsBuilderStep{``1},System.String,System.String,Rebel.Hive.ISchemaBuilderStep{Rebel.Framework.Persistence.Model.Attribution.MetaData.EntitySchema,``1},System.Boolean)">
            <summary>
            Starts the building of a new entity revision inside the <typeparamref name="TProviderFilter"/> Hive provider group. Note that changes are not committed to Hive automatically after this step; you must call <see cref="M:Rebel.Cms.Web.CmsBuildStepExtensions.Commit``2(Rebel.Cms.Web.FluentExtensions.IContentRevisionBuilderStep{``0,``1})"/> or manually add items to a writable Hive unit of work.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="builderStep">The builder step.</param>
            <param name="name">The name.</param>
            <param name="urlAlias">The URL alias.</param>
            <param name="contentTypeBuilder">The content type builder.</param>
            <param name="setRootAsParent">If set to <c>true</c>, automatically set the content root as its parent.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.NewRevision``2(Rebel.Cms.Web.FluentExtensions.ICmsBuilderStep{``1},System.String,System.String,Rebel.Framework.Persistence.Model.Attribution.MetaData.EntitySchema,System.Boolean)">
            <summary>
            Starts the building of a new entity revision inside the <typeparamref name="TProviderFilter"/> Hive provider group. Note that changes are not committed to Hive automatically after this step; you must call <see cref="M:Rebel.Cms.Web.CmsBuildStepExtensions.Commit``2(Rebel.Cms.Web.FluentExtensions.IContentRevisionBuilderStep{``0,``1})"/> or manually add items to a writable Hive unit of work.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="builderStep">The builder step.</param>
            <param name="name">The name.</param>
            <param name="urlAlias">The URL alias.</param>
            <param name="contentType">Type of the content.</param>
            <param name="setRootAsParent">If set to <c>true</c>, automatically set the content root as its parent.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.SetName``2(Rebel.Cms.Web.FluentExtensions.IContentRevisionBuilderStep{``0,``1},System.String)">
            <summary>
            Sets the name of the content being built.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="builderStep">The builder step.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.SetUrlName``2(Rebel.Cms.Web.FluentExtensions.IContentRevisionBuilderStep{``0,``1},System.String)">
            <summary>
            Sets the URL alias of the content buing built.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="builderStep">The builder step.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.SetParent``2(Rebel.Cms.Web.FluentExtensions.IContentRevisionBuilderStep{``0,``1},Rebel.Framework.Persistence.Model.IRelatableEntity,Rebel.Framework.Persistence.Model.Associations.AbstractRelationType,System.Int32,Rebel.Framework.Persistence.Model.Associations.RelationMetaDatum[])">
            <summary>
            Sets the parent of the content being built.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="builderStep">The builder step.</param>
            <param name="parent">The parent.</param>
            <param name="relationType">Type of the relation.</param>
            <param name="ordinal">The ordinal of the relation.</param>
            <param name="metaData">The relation meta data.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.SetParent``2(Rebel.Cms.Web.FluentExtensions.IContentRevisionBuilderStep{``0,``1},System.String,Rebel.Framework.Persistence.Model.Associations.AbstractRelationType,System.Int32,Rebel.Framework.Persistence.Model.Associations.RelationMetaDatum[])">
            <summary>
            Sets the parent of the content being built.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="builderStep">The builder step.</param>
            <param name="parentIdAsString">The parent id as string.</param>
            <param name="relationType">Type of the relation.</param>
            <param name="ordinal">The ordinal of the relation.</param>
            <param name="metaData">The relation meta data.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.SetParent``2(Rebel.Cms.Web.FluentExtensions.IContentRevisionBuilderStep{``0,``1},Rebel.Framework.HiveId,Rebel.Framework.Persistence.Model.Associations.AbstractRelationType,System.Int32,Rebel.Framework.Persistence.Model.Associations.RelationMetaDatum[])">
            <summary>
            Sets the parent of the content being built.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="builderStep">The builder step.</param>
            <param name="parentId">The parent id.</param>
            <param name="relationType">Type of the relation.</param>
            <param name="ordinal">The ordinal of the relation.</param>
            <param name="metaData">The relation meta data.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.SetSelectedTemplate``2(Rebel.Cms.Web.FluentExtensions.IContentRevisionBuilderStep{``0,``1},System.Nullable{Rebel.Framework.HiveId})">
            <summary>
            Sets the selected template of the content being built.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="builderStep">The builder step.</param>
            <param name="templateId">The template id.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.SetSelectedTemplate``2(Rebel.Cms.Web.FluentExtensions.IContentRevisionBuilderStep{``0,``1},System.String)">
            <summary>
            Sets the selected template of the content being built.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="builderStep">The builder step.</param>
            <param name="relativePath">The relative path of the template.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.SetUploadedFile``2(Rebel.Cms.Web.FluentExtensions.IContentRevisionBuilderStep{``0,``1},System.String,System.Web.HttpPostedFileBase,System.Boolean)">
            <summary>
            Saves an uploaded file to to Hive group specified by <see cref="T:Rebel.Cms.Web.ICmsUploadFileStore"/>, and adds a reference to it to the specified file-uploader property of the content being built.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="builderStep">The builder step.</param>
            <param name="alias">The alias.</param>
            <param name="uploadedFile">The uploaded file.</param>
            <param name="errorIfFileNull">if set to <c>true</c> [error if file null].</param>
            <returns></returns>
            <remarks>Since transactions cannot be shared between the filestore provider and the contentstore provider, the file may be saved even if the content transaction is eventually abandoned or rolled back.</remarks>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.SetValue``3(Rebel.Cms.Web.FluentExtensions.IContentRevisionBuilderStep{``0,``2},System.String,``1,System.String)">
            <summary>
            Sets the value of a property on the content being built.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="builderStep">The builder step.</param>
            <param name="alias">The property alias.</param>
            <param name="value">The value.</param>
            <param name="subAlias">The inner property alias.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.NewContentType``1(Rebel.Cms.Web.FluentExtensions.ICmsBuilderStep{``0},System.String,System.String)">
            <summary>
            Starts building a new content type in Hive providers matching the <typeparamref name="TProviderFilter"/> group. Note that changes are not committed to Hive automatically after this step; you must call <see cref="M:Rebel.Cms.Web.CmsBuildStepExtensions.Commit``2(Rebel.Cms.Web.FluentExtensions.IContentRevisionBuilderStep{``0,``1})"/> or manually add items to a writable Hive unit of work.
            </summary>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="builderStep">The builder step.</param>
            <param name="alias">The alias.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.NewContentType(Rebel.Cms.Web.IRenderViewHiveManagerWrapper,System.String,System.String)">
            <summary>
            Starts building a new content type in Hive providers matching the <see cref="T:Rebel.Hive.RepositoryTypes.IContentStore"/> group. Note that changes are not committed to Hive automatically after this step; you must call <see cref="M:Rebel.Cms.Web.CmsBuildStepExtensions.Commit``2(Rebel.Cms.Web.FluentExtensions.IContentRevisionBuilderStep{``0,``1})"/> or manually add items to a writable Hive unit of work.
            </summary>
            <param name="hiveManager">The hive manager.</param>
            <param name="alias">The alias.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.NewContentType``1(Rebel.Cms.Web.IRenderViewHiveManagerWrapper,System.String,System.String)">
            <summary>
            Starts building a new content type in Hive providers matching the <typeparamref name="TProviderFilter"/> group. Note that changes are not committed to Hive automatically after this step; you must call <see cref="M:Rebel.Cms.Web.CmsBuildStepExtensions.Commit``2(Rebel.Cms.Web.FluentExtensions.IContentRevisionBuilderStep{``0,``1})"/> or manually add items to a writable Hive unit of work.
            </summary>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="hiveManager">The hive manager.</param>
            <param name="alias">The alias.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.NewContentType``2(Rebel.Cms.Web.IRenderViewHiveManagerWrapper,System.String,System.String)">
            <summary>
            Starts building a new content type in Hive providers matching the <typeparamref name="TProviderFilter"/> group. Note that changes are not committed to Hive automatically after this step; you must call <see cref="M:Rebel.Cms.Web.CmsBuildStepExtensions.Commit``2(Rebel.Cms.Web.FluentExtensions.IContentRevisionBuilderStep{``0,``1})"/> or manually add items to a writable Hive unit of work.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="hiveManager">The hive manager.</param>
            <param name="alias">The alias.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.NewContentType``2(Rebel.Cms.Web.FluentExtensions.ICmsBuilderStep{``1},System.String,System.String)">
            <summary>
            Starts building a new content type in Hive providers matching the <typeparamref name="TProviderFilter"/> group. Note that changes are not committed to Hive automatically after this step; you must call <see cref="M:Rebel.Cms.Web.CmsBuildStepExtensions.Commit``2(Rebel.Cms.Web.FluentExtensions.IContentRevisionBuilderStep{``0,``1})"/> or manually add items to a writable Hive unit of work.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="builderStep">The builder step.</param>
            <param name="alias">The alias.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.AddPermittedTemplate``2(Rebel.Hive.ISchemaBuilderStep{``0,``1},System.String)">
            <summary>
            Adds a permitted template to the content type being built.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="builderStep">The builder step.</param>
            <param name="templateId">The template id.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.ClearPermittedTemplates``2(Rebel.Hive.ISchemaBuilderStep{``0,``1})">
            <summary>
            Clears the permitted templates of the content type being built.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="builderStep">The builder step.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.SetDefaultTemplate``2(Rebel.Hive.ISchemaBuilderStep{``0,``1},System.String)">
            <summary>
            Sets the default template of the content type being built.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="builderStep">The builder step.</param>
            <param name="templateId">The template id.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.SetDefaultTemplate``2(Rebel.Hive.ISchemaBuilderStep{``0,``1},Rebel.Framework.HiveId)">
            <summary>
            Sets the default template of the content type being built.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="builderStep">The builder step.</param>
            <param name="templateId">The template id.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.AddPermittedTemplate``2(Rebel.Hive.ISchemaBuilderStep{``0,``1},Rebel.Framework.HiveId)">
            <summary>
            Adds a permitted template to the content type being built.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="builderStep">The builder step.</param>
            <param name="templateId">The template id.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.NewMediaType``2(Rebel.Cms.Web.FluentExtensions.ICmsBuilderStep{``1},System.String,System.String)">
            <summary>
            Starts building a new media type in Hive providers matching the <typeparamref name="TProviderFilter"/> group. Note that changes are not committed to Hive automatically after this step; you must call <see cref="M:Rebel.Cms.Web.CmsBuildStepExtensions.Commit``2(Rebel.Cms.Web.FluentExtensions.IContentRevisionBuilderStep{``0,``1})"/> or manually add items to a writable Hive unit of work.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="cmsBuilderStep">The CMS builder step.</param>
            <param name="alias">The alias.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.GetContentTypeByAlias``1(Rebel.Cms.Web.FluentExtensions.ICmsBuilderStep{``0},System.String)">
            <summary>
            Gets a content type by its alias.
            </summary>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="builderStep">The builder step.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.GetContentTypeByAlias``2(Rebel.Cms.Web.FluentExtensions.ICmsBuilderStep{``1},System.String)">
            <summary>
            Gets a content type by its alias.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="builderStep">The builder step.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.GetContentTypeById``1(Rebel.Cms.Web.FluentExtensions.ICmsBuilderStep{``0},Rebel.Framework.HiveId)">
            <summary>
            Gets a content type by its id.
            </summary>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="builderStep">The builder step.</param>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.GetContentTypeById``2(Rebel.Cms.Web.FluentExtensions.ICmsBuilderStep{``1},Rebel.Framework.HiveId)">
            <summary>
            Gets a content type by its id.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="builderStep">The builder step.</param>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.Commit``2(Rebel.Cms.Web.FluentExtensions.IContentRevisionBuilderStep{``0,``1})">
            <summary>
            Commits the specified model builder to Hive.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="modelBuilder">The model builder.</param>
            <returns>An <see cref="T:Rebel.Cms.Web.FluentExtensions.IContentRevisionSaveResult`1"/> with information about whether the commital was successful, and if not, what errors were raised. The result also has a reference to the item that was built.</returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsBuildStepExtensions.Commit``2(Rebel.Cms.Web.FluentExtensions.IContentRevisionBuilderStep{``0,``1},Rebel.Framework.HiveId)">
            <summary>
            Commits the specified model builder to Hive.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="modelBuilder">The model builder.</param>
            <param name="userId">The user id.</param>
            <returns>
            An <see cref="T:Rebel.Cms.Web.FluentExtensions.IContentRevisionSaveResult`1"/> with information about whether the commital was successful, and if not, what errors were raised. The result also has a reference to the item that was built.
            </returns>
        </member>
        <member name="P:Rebel.Cms.Web.Configuration.RebelSystem.CharReplacementElementCollection.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <returns>
            The <see cref="T:System.Configuration.ConfigurationElementCollectionType"/> of this collection.
            </returns>
        </member>
        <member name="P:Rebel.Cms.Web.Configuration.RebelSystem.CharReplacementElementCollection.ElementName">
            <summary>
            Gets the name used to identify this collection of elements in the configuration file when overridden in a derived class.
            </summary>
            <returns>
            The name of the collection; otherwise, an empty string. The default is an empty string.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentExtensions.GetMediaUrl(Rebel.Cms.Web.Model.Content)">
            <summary>
            Gets the media URL.
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentExtensions.GetMediaUrl(Rebel.Cms.Web.Model.Content,System.Int32)">
            <summary>
            Gets the media URL.
            </summary>
            <param name="content">The content.</param>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentExtensions.GetMediaUrl(Rebel.Cms.Web.Model.Content,System.String)">
            <summary>
            Gets the media URL.
            </summary>
            <param name="content">The content.</param>
            <param name="propertyAlias">The property alias.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentExtensions.GetMediaUrl(Rebel.Cms.Web.Model.Content,System.String,System.Int32)">
            <summary>
            Gets the media URL.
            </summary>
            <param name="content">The content.</param>
            <param name="propertyAlias">The property alias.</param>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentExtensions.TrySwapTemplate(Rebel.Cms.Web.Model.Content,System.String)">
            <summary>
            Tries to swap the template of a Content item to the alt template with the supplied alias.
            </summary>
            <param name="content">The content.</param>
            <param name="altTemplateAlias">The alt template alias.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentExtensions.GetUrlHelper">
            <summary>
            Gets a URL helper.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsFirst(Rebel.Cms.Web.Model.Content)">
            <summary>
            Determines whether the specified content is first.
            </summary>
            <param name="content">The content.</param>
            <returns>
              <c>true</c> if the specified content is first; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsFirst(Rebel.Cms.Web.Model.Content,System.String)">
            <summary>
            Determines whether the specified content is first.
            </summary>
            <param name="content">The content.</param>
            <param name="valueIfTrue">The value if true.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsFirst(Rebel.Cms.Web.Model.Content,System.String,System.String)">
            <summary>
            Determines whether the specified content is first.
            </summary>
            <param name="content">The content.</param>
            <param name="valueIfTrue">The value if true.</param>
            <param name="valueIfFalse">The value if false.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsNotFirst(Rebel.Cms.Web.Model.Content)">
            <summary>
            Determines whether the specified content is not first.
            </summary>
            <param name="content">The content.</param>
            <returns>
              <c>true</c> if the specified content is not first; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsNotFirst(Rebel.Cms.Web.Model.Content,System.String)">
            <summary>
            Determines whether the specified content is not first.
            </summary>
            <param name="content">The content.</param>
            <param name="valueIfTrue">The value if true.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsNotFirst(Rebel.Cms.Web.Model.Content,System.String,System.String)">
            <summary>
            Determines whether the specified content is not first.
            </summary>
            <param name="content">The content.</param>
            <param name="valueIfTrue">The value if true.</param>
            <param name="valueIfFalse">The value if false.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsLast(Rebel.Cms.Web.Model.Content)">
            <summary>
            Determines whether the specified content is last.
            </summary>
            <param name="content">The content.</param>
            <returns>
              <c>true</c> if the specified content is last; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsLast(Rebel.Cms.Web.Model.Content,System.String)">
            <summary>
            Determines whether the specified content is last.
            </summary>
            <param name="content">The content.</param>
            <param name="valueIfTrue">The value if true.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsLast(Rebel.Cms.Web.Model.Content,System.String,System.String)">
            <summary>
            Determines whether the specified content is last.
            </summary>
            <param name="content">The content.</param>
            <param name="valueIfTrue">The value if true.</param>
            <param name="valueIfFalse">The value if false.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsNotLast(Rebel.Cms.Web.Model.Content)">
            <summary>
            Determines whether the specified content is not last.
            </summary>
            <param name="content">The content.</param>
            <returns>
              <c>true</c> if the specified content is not last; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsNotLast(Rebel.Cms.Web.Model.Content,System.String)">
            <summary>
            Determines whether the specified content is not last.
            </summary>
            <param name="content">The content.</param>
            <param name="valueIfTrue">The value if true.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsNotLast(Rebel.Cms.Web.Model.Content,System.String,System.String)">
            <summary>
            Determines whether the specified content is not last.
            </summary>
            <param name="content">The content.</param>
            <param name="valueIfTrue">The value if true.</param>
            <param name="valueIfFalse">The value if false.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsIndex(Rebel.Cms.Web.Model.Content,System.Int32)">
            <summary>
            Determines whether the specified content is at the specified index.
            </summary>
            <param name="content">The content.</param>
            <param name="index">The index.</param>
            <returns>
              <c>true</c> if the specified content is at the specified index; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsIndex(Rebel.Cms.Web.Model.Content,System.Int32,System.String)">
            <summary>
            Determines whether the specified content is at the specified index.
            </summary>
            <param name="content">The content.</param>
            <param name="index">The index.</param>
            <param name="valueIfTrue">The value if true.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsIndex(Rebel.Cms.Web.Model.Content,System.Int32,System.String,System.String)">
            <summary>
            Determines whether the specified content is at the specified index.
            </summary>
            <param name="content">The content.</param>
            <param name="index">The index.</param>
            <param name="valueIfTrue">The value if true.</param>
            <param name="valueIfFalse">The value if false.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsNotIndex(Rebel.Cms.Web.Model.Content,System.Int32)">
            <summary>
            Determines whether the specified content is not at the specified index.
            </summary>
            <param name="content">The content.</param>
            <param name="index">The index.</param>
            <returns>
              <c>true</c> if the specified content is not at the specified index; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsNotIndex(Rebel.Cms.Web.Model.Content,System.Int32,System.String)">
            <summary>
            Determines whether the specified content is not at the specified index.
            </summary>
            <param name="content">The content.</param>
            <param name="index">The index.</param>
            <param name="valueIfTrue">The value if true.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsNotIndex(Rebel.Cms.Web.Model.Content,System.Int32,System.String,System.String)">
            <summary>
            Determines whether the specified content is not at the specified index.
            </summary>
            <param name="content">The content.</param>
            <param name="index">The index.</param>
            <param name="valueIfTrue">The value if true.</param>
            <param name="valueIfFalse">The value if false.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsPosition(Rebel.Cms.Web.Model.Content,System.Int32)">
            <summary>
            Determines whether the specified content is at the specified position.
            </summary>
            <param name="content">The content.</param>
            <param name="pos">The position.</param>
            <returns>
              <c>true</c> if the specified content is at the specified position; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsPosition(Rebel.Cms.Web.Model.Content,System.Int32,System.String)">
            <summary>
            Determines whether the specified content is specified position.
            </summary>
            <param name="content">The content.</param>
            <param name="pos">The position.</param>
            <param name="valueIfTrue">The value if true.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsPosition(Rebel.Cms.Web.Model.Content,System.Int32,System.String,System.String)">
            <summary>
            Determines whether the specified content is specified position.
            </summary>
            <param name="content">The content.</param>
            <param name="pos">The position.</param>
            <param name="valueIfTrue">The value if true.</param>
            <param name="valueIfFalse">The value if false.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsNotPosition(Rebel.Cms.Web.Model.Content,System.Int32)">
            <summary>
            Determines whether the specified content is not at the specified index position.
            </summary>
            <param name="content">The content.</param>
            <param name="index">The index.</param>
            <returns>
              <c>true</c> if the specified content is not at the specified index position; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsNotPosition(Rebel.Cms.Web.Model.Content,System.Int32,System.String)">
            <summary>
            Determines whether the specified content is not at the specified index position.
            </summary>
            <param name="content">The content.</param>
            <param name="index">The index.</param>
            <param name="valueIfTrue">The value if true.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsNotPosition(Rebel.Cms.Web.Model.Content,System.Int32,System.String,System.String)">
            <summary>
            Determines whether the specified content is not at the specified index position.
            </summary>
            <param name="content">The content.</param>
            <param name="index">The index.</param>
            <param name="valueIfTrue">The value if true.</param>
            <param name="valueIfFalse">The value if false.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsPositionDivisibleBy(Rebel.Cms.Web.Model.Content,System.Int32)">
            <summary>
            Determines whether the specified content's position is evenly divisible by the specified value.
            </summary>
            <param name="content">The content.</param>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the specified contents position is evenly divisible by the specified mod value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsPositionDivisibleBy(Rebel.Cms.Web.Model.Content,System.Int32,System.String)">
            <summary>
            Determines whether the specified content's position is evenly divisible by the specified value.
            </summary>
            <param name="content">The content.</param>
            <param name="value">The value.</param>
            <param name="valueIfTrue">The value if true.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsPositionDivisibleBy(Rebel.Cms.Web.Model.Content,System.Int32,System.String,System.String)">
            <summary>
            Determines whether the specified content's position is evenly divisible by the specified value.
            </summary>
            <param name="content">The content.</param>
            <param name="value">The value.</param>
            <param name="valueIfTrue">The value if true.</param>
            <param name="valueIfFalse">The value if false.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsPositionIndivisibleBy(Rebel.Cms.Web.Model.Content,System.Int32)">
            <summary>
            Determines whether the specified content's position is not evenly divisible by the specified mod value.
            </summary>
            <param name="content">The content.</param>
            <param name="mod">The mod.</param>
            <returns>
              <c>true</c> if the specified contents position is not evenly divisible by the specified mod value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsPositionIndivisibleBy(Rebel.Cms.Web.Model.Content,System.Int32,System.String)">
            <summary>
            Determines whether the specified content's position is not evenly divisible by the specified mod value.
            </summary>
            <param name="content">The content.</param>
            <param name="mod">The mod.</param>
            <param name="valueIfTrue">The value if true.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsPositionIndivisibleBy(Rebel.Cms.Web.Model.Content,System.Int32,System.String,System.String)">
            <summary>
            Determines whether the specified content's position is not evenly divisible by the specified mod value.
            </summary>
            <param name="content">The content.</param>
            <param name="mod">The mod.</param>
            <param name="valueIfTrue">The value if true.</param>
            <param name="valueIfFalse">The value if false.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsEven(Rebel.Cms.Web.Model.Content)">
            <summary>
            Determines whether the specified content is at an even index position.
            </summary>
            <param name="content">The content.</param>
            <returns>
              <c>true</c> if the specified content is at an even index position; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsEven(Rebel.Cms.Web.Model.Content,System.String)">
            <summary>
            Determines whether the specified content is at an even index position.
            </summary>
            <param name="content">The content.</param>
            <param name="valueIfTrue">The value if true.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsEven(Rebel.Cms.Web.Model.Content,System.String,System.String)">
            <summary>
            Determines whether the specified content is at an even index position.
            </summary>
            <param name="content">The content.</param>
            <param name="valueIfTrue">The value if true.</param>
            <param name="valueIfFalse">The value if false.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsOdd(Rebel.Cms.Web.Model.Content)">
            <summary>
            Determines whether the specified content is at and odd index position.
            </summary>
            <param name="content">The content.</param>
            <returns>
              <c>true</c> if the specified content is at and odd index position; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsOdd(Rebel.Cms.Web.Model.Content,System.String)">
            <summary>
            Determines whether the specified content is at and odd index position.
            </summary>
            <param name="content">The content.</param>
            <param name="valueIfTrue">The value if true.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsOdd(Rebel.Cms.Web.Model.Content,System.String,System.String)">
            <summary>
            Determines whether the specified content is at and odd index position.
            </summary>
            <param name="content">The content.</param>
            <param name="valueIfTrue">The value if true.</param>
            <param name="valueIfFalse">The value if false.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsEqualTo(Rebel.Cms.Web.Model.Content,System.Object)">
            <summary>
            Determines whether the specified content are equal.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <returns>
              <c>true</c> if the specified content are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsEqualTo(Rebel.Cms.Web.Model.Content,System.Object,System.String)">
            <summary>
            Determines whether the specified content are equal.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <param name="valueIfTrue">The value if true.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsEqualTo(Rebel.Cms.Web.Model.Content,System.Object,System.String,System.String)">
            <summary>
            Determines whether the specified content are equal.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <param name="valueIfTrue">The value if true.</param>
            <param name="valueIfFalse">The value if false.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsNotEqualTo(Rebel.Cms.Web.Model.Content,System.Object)">
            <summary>
            Determines whether the specified content are not equal.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <returns>
              <c>true</c> if the specified content are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsNotEqualTo(Rebel.Cms.Web.Model.Content,System.Object,System.String)">
            <summary>
            Determines whether the specified content are not equal.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <param name="valueIfTrue">The value if true.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsNotEqualTo(Rebel.Cms.Web.Model.Content,System.Object,System.String,System.String)">
            <summary>
            Determines whether the specified content are not equal.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <param name="valueIfTrue">The value if true.</param>
            <param name="valueIfFalse">The value if false.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsDescendantOf(Rebel.Cms.Web.Model.Content,System.Object)">
            <summary>
            Determines whether the specified content is a descendant of the content to compare.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <returns>
              <c>true</c> if the specified content is a descendant of the content to compare; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsDescendantOf(Rebel.Cms.Web.Model.Content,System.Object,System.String)">
            <summary>
            Determines whether the specified content is a descendant of the content to compare.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <param name="valueIfTrue">The value if true.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsDescendantOf(Rebel.Cms.Web.Model.Content,System.Object,System.String,System.String)">
            <summary>
            Determines whether the specified content is a descendant of the content to compare.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <param name="valueIfTrue">The value if true.</param>
            <param name="valueIfFalse">The value if false.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsDescendantOfOrEqualTo(Rebel.Cms.Web.Model.Content,System.Object)">
            <summary>
            Determines whether the specified content is a descendant of the content to compare or equal to it.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <returns>
              <c>true</c> if the specified content is a descendant of the content to compare or equal to itself; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsDescendantOfOrEqualTo(Rebel.Cms.Web.Model.Content,System.Object,System.String)">
            <summary>
            Determines whether the specified content is a descendant of the content to compare or equal to it.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <param name="valueIfTrue">The value if true.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsDescendantOfOrEqualTo(Rebel.Cms.Web.Model.Content,System.Object,System.String,System.String)">
            <summary>
            Determines whether the specified content is a descendant of the content to compare or equal to it.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <param name="valueIfTrue">The value if true.</param>
            <param name="valueIfFalse">The value if false.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsAncestorOf(Rebel.Cms.Web.Model.Content,System.Object)">
            <summary>
            Determines whether the specified content is an ancestor of the content to compare.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <returns>
              <c>true</c> if the specified content is an ancestor of the content to compare; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsAncestorOf(Rebel.Cms.Web.Model.Content,System.Object,System.String)">
            <summary>
            Determines whether the specified content is an ancestor of the content to compare.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <param name="valueIfTrue">The value if true.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsAncestorOf(Rebel.Cms.Web.Model.Content,System.Object,System.String,System.String)">
            <summary>
            Determines whether the specified content is an ancestor of the content to compare.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <param name="valueIfTrue">The value if true.</param>
            <param name="valueIfFalse">The value if false.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsAncestorOfOrEqualTo(Rebel.Cms.Web.Model.Content,System.Object)">
            <summary>
            Determines whether the specified content is an ancestor of the content to compare or equal to it.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <returns>
              <c>true</c> if the specified content is an ancestor of the content to compare or equal to itself; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsAncestorOfOrEqualTo(Rebel.Cms.Web.Model.Content,System.Object,System.String)">
            <summary>
            Determines whether the specified content is an ancestor of the content to compare or equal to it.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <param name="valueIfTrue">The value if true.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsAncestorOfOrEqualTo(Rebel.Cms.Web.Model.Content,System.Object,System.String,System.String)">
            <summary>
            Determines whether the specified content is an ancestor of the content to compare or equal to it.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <param name="valueIfTrue">The value if true.</param>
            <param name="valueIfFalse">The value if false.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsModZero(Rebel.Cms.Web.Model.Content,System.Int32)">
            <summary>
            Determines whether the specified content's position is evenly divisible by the specified mod value.
            </summary>
            <param name="content">The content.</param>
            <param name="mod">The mod.</param>
            <returns>
              <c>true</c> if the specified contents position is evenly divisible by the specified mod value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsModZero(Rebel.Cms.Web.Model.Content,System.Int32,System.String)">
            <summary>
            Determines whether the specified content's position is evenly divisible by the specified mod value.
            </summary>
            <param name="content">The content.</param>
            <param name="mod">The mod.</param>
            <param name="valueIfTrue">The value if true.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsModZero(Rebel.Cms.Web.Model.Content,System.Int32,System.String,System.String)">
            <summary>
            Determines whether the specified content's position is evenly divisible by the specified mod value.
            </summary>
            <param name="content">The content.</param>
            <param name="mod">The mod.</param>
            <param name="valueIfTrue">The value if true.</param>
            <param name="valueIfFalse">The value if false.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsNotModZero(Rebel.Cms.Web.Model.Content,System.Int32)">
            <summary>
            Determines whether the specified content's position is not evenly divisible by the specified mod value.
            </summary>
            <param name="content">The content.</param>
            <param name="mod">The mod.</param>
            <returns>
              <c>true</c> if the specified contents position is not evenly divisible by the specified mod value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsNotModZero(Rebel.Cms.Web.Model.Content,System.Int32,System.String)">
            <summary>
            Determines whether the specified content's position is not evenly divisible by the specified mod value.
            </summary>
            <param name="content">The content.</param>
            <param name="mod">The mod.</param>
            <param name="valueIfTrue">The value if true.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsNotModZero(Rebel.Cms.Web.Model.Content,System.Int32,System.String,System.String)">
            <summary>
            Determines whether the specified content's position is not evenly divisible by the specified mod value.
            </summary>
            <param name="content">The content.</param>
            <param name="mod">The mod.</param>
            <param name="valueIfTrue">The value if true.</param>
            <param name="valueIfFalse">The value if false.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsEqual(Rebel.Cms.Web.Model.Content,System.Object)">
            <summary>
            Determines whether the specified content are equal.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <returns>
              <c>true</c> if the specified content are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsEqual(Rebel.Cms.Web.Model.Content,System.Object,System.String)">
            <summary>
            Determines whether the specified content are equal.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <param name="valueIfTrue">The value if true.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsEqual(Rebel.Cms.Web.Model.Content,System.Object,System.String,System.String)">
            <summary>
            Determines whether the specified content are equal.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <param name="valueIfTrue">The value if true.</param>
            <param name="valueIfFalse">The value if false.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsDescendant(Rebel.Cms.Web.Model.Content,System.Object)">
            <summary>
            Determines whether the specified content is a descendant of the content to compare.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <returns>
              <c>true</c> if the specified content is a descendant of the content to compare; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsDescendant(Rebel.Cms.Web.Model.Content,System.Object,System.String)">
            <summary>
            Determines whether the specified content is a descendant of the content to compare.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <param name="valueIfTrue">The value if true.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsDescendant(Rebel.Cms.Web.Model.Content,System.Object,System.String,System.String)">
            <summary>
            Determines whether the specified content is a descendant of the content to compare.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <param name="valueIfTrue">The value if true.</param>
            <param name="valueIfFalse">The value if false.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsDescendantOrSelf(Rebel.Cms.Web.Model.Content,System.Object)">
            <summary>
            Determines whether the specified content is a descendant of the content to compare or equal to it.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <returns>
              <c>true</c> if the specified content is a descendant of the content to compare or equal to itself; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsDescendantOrSelf(Rebel.Cms.Web.Model.Content,System.Object,System.String)">
            <summary>
            Determines whether the specified content is a descendant of the content to compare or equal to it.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <param name="valueIfTrue">The value if true.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsDescendantOrSelf(Rebel.Cms.Web.Model.Content,System.Object,System.String,System.String)">
            <summary>
            Determines whether the specified content is a descendant of the content to compare or equal to it.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <param name="valueIfTrue">The value if true.</param>
            <param name="valueIfFalse">The value if false.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsAncestor(Rebel.Cms.Web.Model.Content,System.Object)">
            <summary>
            Determines whether the specified content is an ancestor of the content to compare.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <returns>
              <c>true</c> if the specified content is an ancestor of the content to compare; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsAncestor(Rebel.Cms.Web.Model.Content,System.Object,System.String)">
            <summary>
            Determines whether the specified content is an ancestor of the content to compare.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <param name="valueIfTrue">The value if true.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsAncestor(Rebel.Cms.Web.Model.Content,System.Object,System.String,System.String)">
            <summary>
            Determines whether the specified content is an ancestor of the content to compare.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <param name="valueIfTrue">The value if true.</param>
            <param name="valueIfFalse">The value if false.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsAncestorOrSelf(Rebel.Cms.Web.Model.Content,System.Object)">
            <summary>
            Determines whether the specified content is an ancestor of the content to compare or equal to it.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <returns>
              <c>true</c> if the specified content is an ancestor of the content to compare or equal to itself; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsAncestorOrSelf(Rebel.Cms.Web.Model.Content,System.Object,System.String)">
            <summary>
            Determines whether the specified content is an ancestor of the content to compare or equal to it.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <param name="valueIfTrue">The value if true.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ContentIsHelperExtensions.IsAncestorOrSelf(Rebel.Cms.Web.Model.Content,System.Object,System.String,System.String)">
            <summary>
            Determines whether the specified content is an ancestor of the content to compare or equal to it.
            </summary>
            <param name="content">The content.</param>
            <param name="toCompare">To compare.</param>
            <param name="valueIfTrue">The value if true.</param>
            <param name="valueIfFalse">The value if false.</param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.DependencyManagement.CmsAttributeTypeRegistry">
            <summary>
            An IAttributeTypeRegistry that already has the default AttributeTypes with their correct
            RenderTypeProviders setup without having to manually register them.
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.CmsAttributeTypeRegistry.RegisterDefaultTypes">
            <summary>
            Registers all of the known Attribute types before any AttributeType is resolved or added.
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.ComponentRegistrationExtensions.GetTreeName(System.Collections.Generic.IEnumerable{System.Lazy{Rebel.Cms.Web.Trees.TreeController,Rebel.Cms.Web.Model.BackOffice.Trees.TreeMetadata}},System.Guid)">
            <summary>
            Returns the tree controller name for the tree id passed in
            </summary>
            <param name="trees"></param>
            <param name="treeId"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Configuration.Languages.FallbackCollection.Add(Rebel.Cms.Web.Configuration.Languages.FallbackElement)">
            <summary>
            Adds the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Rebel.Cms.Web.Configuration.Languages.FallbackCollection.Remove(Rebel.Cms.Web.Configuration.Languages.FallbackElement)">
            <summary>
            Removes the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Rebel.Cms.Web.Configuration.Languages.FallbackCollection.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Configuration.Languages.FallbackCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.Configuration.Languages.FallbackCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.Configuration.Languages.FallbackCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Configuration.ConfigurationElementCollection"/> object is read only.
            </summary>
            <returns>
            true if the <see cref="T:System.Configuration.ConfigurationElementCollection"/> object is read only; otherwise, false.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.Configuration.Languages.FallbackCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.Configuration.Languages.FallbackElement.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Configuration.ConfigurationElement"/> object is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Configuration.ConfigurationElement"/> object is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Rebel.Cms.Web.Configuration.Languages.FallbackElement.IsoCode">
            <summary>
            Gets or sets the iso code.
            </summary>
            <value>
            The iso code.
            </value>
        </member>
        <member name="M:Rebel.Cms.Web.Configuration.Languages.LanguageElement.ToXmlString">
            <summary>
            Converts the laanguage to an XML string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Configuration.Languages.LanguageElement.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Configuration.ConfigurationElement"/> object is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Configuration.ConfigurationElement"/> object is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Rebel.Cms.Web.Configuration.Languages.LanguageElement.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Configuration.Languages.LanguageElement.IsoCode">
            <summary>
            Gets or sets the iso code.
            </summary>
            <value>
            The iso code.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Configuration.Languages.LanguageElement.Fallbacks">
            <summary>
            Gets the fallbacks.
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Configuration.Languages.LanguagesCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.Configuration.Languages.LanguagesCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="P:Rebel.Cms.Web.Configuration.Languages.LanguagesCollection.Item(System.String)">
            <summary>
            Returns a Language object by ISO Code
            </summary>
            <param name="isoCode"></param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Context.IRequiresRebelHelper">
            <summary>
            Interface requiring an RebelHelper
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.ControllerExtensions.GetControllerId``1(System.Type)">
            <summary>
            Return the ID of an controller plugin
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controllerPluginType"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ControllerExtensions.GetControllerName(System.Type)">
            <summary>
            Return the controller name from the controller type
            </summary>
            <param name="controllerType"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ControllerExtensions.GetControllerName``1">
            <summary>
            Return the controller name from the controller type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Rebel.Cms.Web.ControllerExtensions.ExecuteSecuredMethod``1(``0,System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Executes the secured method.
            </summary>
            <typeparam name="TControllerType">The type of the controller type.</typeparam>
            <param name="controller">The controller.</param>
            <param name="methodSelector">The method selector.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ControllerExtensions.ExecuteSecuredMethod``1(``0,System.Linq.Expressions.Expression{System.Action{``0}},Rebel.Framework.HiveId)">
            <summary>
            Executes the secured method.
            </summary>
            <typeparam name="TControllerType">The type of the controller type.</typeparam>
            <param name="controller">The controller.</param>
            <param name="methodSelector">The method selector.</param>
            <param name="entityId">The entity id.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ControllerExtensions.ExecuteSecuredMethod``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Executes the secured method.
            </summary>
            <typeparam name="TControllerType">The type of the controller type.</typeparam>
            <typeparam name="TResultType">The type of the result type.</typeparam>
            <param name="controller">The controller.</param>
            <param name="methodSelector">The method selector.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ControllerExtensions.ExecuteSecuredMethod``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},Rebel.Framework.HiveId)">
            <summary>
            Executes the secured method.
            </summary>
            <typeparam name="TControllerType">The type of the controller type.</typeparam>
            <typeparam name="TResultType">The type of the result type.</typeparam>
            <param name="controller">The controller.</param>
            <param name="methodSelector">The method selector.</param>
            <param name="entityId">The entity id.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ControllerExtensions.TryExecuteSecuredMethod``1(``0,System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Tries to execute a secured method.
            </summary>
            <typeparam name="TControllerType">The type of the controller.</typeparam>
            <param name="controller">The controller.</param>
            <param name="methodSelector">The method selector.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ControllerExtensions.TryExecuteSecuredMethod``1(``0,System.Linq.Expressions.Expression{System.Action{``0}},Rebel.Framework.HiveId)">
            <summary>
            Tries to execute a secured method.
            </summary>
            <typeparam name="TControllerType">The type of the controller type.</typeparam>
            <param name="controller">The controller.</param>
            <param name="methodSelector">The method selector.</param>
            <param name="entityId">The entity id.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ControllerExtensions.TryExecuteSecuredMethod``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Tries to execute a secured method.
            </summary>
            <typeparam name="TControllerType">The type of the controller.</typeparam>
            <typeparam name="TResultType">The type of the result.</typeparam>
            <param name="controller">The controller.</param>
            <param name="methodSelector">The method selector.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ControllerExtensions.TryExecuteSecuredMethod``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},Rebel.Framework.HiveId)">
            <summary>
            Tries to execute a secured method.
            </summary>
            <typeparam name="TControllerType">The type of the controller type.</typeparam>
            <typeparam name="TResultType">The type of the result type.</typeparam>
            <param name="controller">The controller.</param>
            <param name="methodSelector">The method selector.</param>
            <param name="entityId">The entity id.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ControllerExtensions.IsMethodAuthorized``1(``0,System.Linq.Expressions.MethodCallExpression,Rebel.Framework.HiveId)">
            <summary>
            Determines whether the method call expression is authorized on the specified controller.
            </summary>
            <typeparam name="TControllerType">The type of the controller type.</typeparam>
            <param name="controller">The controller.</param>
            <param name="mce">The mce.</param>
            <param name="entityId">The entity id.</param>
            <returns>
              <c>true</c> if the is method authorized on the specified controller; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Rebel.Cms.Web.Configuration.ApplicationSettings.ApplicationsCollection.Item(System.String)">
            <summary>
            Returns an Application object by alias
            </summary>
            <param name="appAlias"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Configuration.ApplicationSettings.TreeCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Returns the key for this collection which is a combination of the controller type and the application alias
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:Rebel.Cms.Web.Configuration.Dashboards.MatchElement.MatchType">
            <summary>
            Return the type for the match type
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Configuration.Tasks.TaskElement.TaskTypeName">
            <summary>
            The string name of the task Type
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Configuration.Tasks.TaskElement.TaskType">
            <summary>
            The object Type of task
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Configuration.Tasks.TaskElement.Trigger">
            <summary>
            The name of the trigger that is fired to execute this task.
            </summary>
            <remarks>
            It is important to know that there are 2 special triggers regarding task configuration:
            * post-package-intall
            * pre-package-uninstall
            
            If the task element is found inside of a package folder and a configuration task has a trigger defined in 
            configuration of either of the 2 names above, then the task will ONLY execute for that particular packages
            install/uninstall actions. This is done by modifying the configuration triggers at runtime when we 
            detect that the configuration task is inside a package and the trigger names are changed to:
            
            PackageFolderName-post-package-uninstall
            PackageFolderName-pre-package-uninstall
            
            where PackageFolderName is the folder name of where the package resides.
            </remarks>
        </member>
        <member name="P:Rebel.Cms.Web.Configuration.Tasks.TaskElement.PackageFolder">
            <summary>
            Set at runtime when a task is found in a package, otherwise is empty
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Configuration.Tasks.TaskParameterConfigurationCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Returns the key for this collection which is a combination of the controller type and the application alias
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Configuration.Tasks.TasksCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Returns the key for this collection which is a combination of the controller type and the application alias
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Configuration.RebelSettings">
            <summary>
            Contains collections of all Rebel configuration settings
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Configuration.RebelSettings.Applications">
            <summary>
            Returns all rebel applications configured using the deep config manager
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Configuration.RebelSettings.Trees">
            <summary>
            Returns all rebel applications configured using the deep config manager
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Configuration.RebelSettings.Languages">
            <summary>
            Returns all languages configured using the deep config manager
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Configuration.RebelSettings.Tasks">
            <summary>
            Returns all tasks registered in config
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Configuration.RebelSystem.PackageRepositoryElement.RepositoryAddress">
            <summary>
            Gets or sets the repository address.
            </summary>
            <value>
            The repository address.
            </value>
        </member>
        <member name="M:Rebel.Cms.Web.Configuration.RebelSystem.RouteMatchElement.IsMatch(System.String)">
            <summary>
            Determines whether the specified absolute path is a match for the path filter on this element.
            </summary>
            <param name="absolutePath">The absolute path.</param>
            <returns>
            	<c>true</c> if the specified absolute path is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Rebel.Cms.Web.Configuration.RebelSystem.RouteMatchElementCollection.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <returns>
            The <see cref="T:System.Configuration.ConfigurationElementCollectionType"/> of this collection.
            </returns>
        </member>
        <member name="P:Rebel.Cms.Web.Configuration.RebelSystem.RouteMatchElementCollection.ElementName">
            <summary>
            Gets the name used to identify this collection of elements in the configuration file when overridden in a derived class.
            </summary>
            <returns>
            The name of the collection; otherwise, an empty string. The default is an empty string.
            </returns>
        </member>
        <member name="P:Rebel.Cms.Web.Configuration.RebelSystem.RebelFoldersElement.LocalPackageRepositoryFolder">
            <summary>
            Gets or sets the local package repository folder
            </summary>
            <value>
            The local package repository folder.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Configuration.RebelSystem.RebelFoldersElement.TemplateFolder">
            <summary>
            The folder that stores the template files
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Context.IRebelApplicationContext">
            <summary>
            Encapsulates information specific to an Rebel application
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Context.IRebelApplicationContext.FrameworkContext">
            <summary>
            Gets the framework context.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Rebel.Cms.Web.Context.IRebelApplicationContext.ApplicationId">
            <summary>
            Gets the application id, useful for debugging or tracing.
            </summary>
            <value>The request id.</value>
        </member>
        <member name="P:Rebel.Cms.Web.Context.IRebelApplicationContext.Hive">
            <summary>
            Gets an instance of <see cref="T:Rebel.Hive.HiveManager"/> for this application.
            </summary>
            <value>The hive.</value>
        </member>
        <member name="P:Rebel.Cms.Web.Context.IRebelApplicationContext.Settings">
            <summary>
            Gets the settings associated with this Rebel application.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="P:Rebel.Cms.Web.Context.IRebelApplicationContext.Security">
            <summary>
            Gets the security service.
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Context.MapResolverContext">
            <summary>
            A context object aggregating together data services useful during mapping operations.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Context.MapResolverContext.#ctor(Rebel.Framework.Context.IFrameworkContext,Rebel.Hive.IHiveManager,Rebel.Cms.Web.IPropertyEditorFactory,Rebel.Cms.Web.IParameterEditorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Context.MapResolverContext.PropertyEditorFactory">
            <summary>
            Gets or sets the property editor factory.
            </summary>
            <value>
            The property editor factory.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Context.MapResolverContext.ParameterEditorFactory">
            <summary>
            Gets or sets the parameter editor factory.
            </summary>
            <value>
            The parameter editor factory.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Context.MapResolverContext.ApplicationId">
            <summary>
            Gets the application id, useful for debugging or tracing.
            </summary>
            <value>The request id.</value>
        </member>
        <member name="P:Rebel.Cms.Web.Context.MapResolverContext.Hive">
            <summary>
            Gets an insance of <see cref="T:Rebel.Hive.HiveManager"/> associated with this application.
            </summary>
            <value>The hive.</value>
        </member>
        <member name="M:Rebel.Cms.Web.Context.RebelApplicationContext.RestartApplicationPool(System.Web.HttpContextBase)">
            <summary>
            This will restart the application pool
            </summary>
            <param name="http"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Context.RebelApplicationContext.GetInstallStatus">
            <summary>
            Return the installation status, this is based on all hive providers
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Context.RebelApplicationContext.DisposeResources">
            <summary>
            Handles the disposal of resources. Derived from abstract class <see cref="T:Rebel.Framework.DisposableObject"/> which handles common required locking logic.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Context.RebelApplicationContext.FrameworkContext">
            <summary>
            Gets the framework context.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Rebel.Cms.Web.Context.RebelApplicationContext.ApplicationId">
            <summary>
            Gets the application id, useful for debugging or tracing.
            </summary>
            <value>The request id.</value>
        </member>
        <member name="P:Rebel.Cms.Web.Context.RebelApplicationContext.Settings">
            <summary>
            Gets the settings associated with this Rebel application.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="P:Rebel.Cms.Web.Context.RebelApplicationContext.Security">
            <summary>
            Gets the security service.
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.ControllerContextExtensions">
            <summary>
            Extension methods for MVC ControllerContext objects
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.ControllerContextExtensions.CreateEmptyViewContext(System.Web.Mvc.ControllerContext)">
            <summary>
            This is generally used for proxying to a ChildAction which requires a ViewContext to be setup
            but since the View isn't actually rendered the IView object is null, however the rest of the 
            properties are filled in.
            </summary>
            <param name="controllerContext"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ControllerContextExtensions.RenderViewResultAsString(System.Web.Mvc.ControllerContext,System.Web.Mvc.ViewResultBase)">
            <summary>
            Returns the string output from a ViewResultBase object
            </summary>
            <param name="controllerContext"></param>
            <param name="viewResult"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ControllerContextExtensions.RenderPartialViewToString(System.Web.Mvc.ControllerContext,System.String,System.Object)">
            <summary>
            Renders the partial view to string.
            </summary>
            <param name="controllerContext">The controller context.</param>
            <param name="viewName">Name of the view.</param>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ControllerContextExtensions.EnsureViewObjectDataOnResult(System.Web.Mvc.ControllerContext,System.Web.Mvc.ViewResultBase)">
            <summary>
            Normally in MVC the way that the View object gets assigned to the result is to Execute the ViewResult, this however
            will write to the Response output stream which isn't what we want. Instead, this method will use the same logic inside
            of MVC to assign the View object to the result but without executing it. This also ensures that the ViewData and the TempData
            is assigned from the controller.
            This is only relavent for view results of PartialViewResult or ViewResult.
            </summary>
            <param name="result"></param>
            <param name="controllerContext"></param>
        </member>
        <member name="T:Rebel.Cms.Web.DependencyManagement.DependencyResolverAttributeTypeRegistry">
            <summary>
            Uses the DependencyResolver to retrieve the IAttributeTypeRegistry from IoC.
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.DependencyResolverAttributeTypeRegistry.GetAttributeType(System.String)">
            <summary>
            Gets the AttributeType by alias
            </summary>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.DependencyResolverAttributeTypeRegistry.TryGetAttributeType(System.String)">
            <summary>
            Tries to get an <see cref="T:Rebel.Framework.Persistence.Model.Attribution.MetaData.AttributeType"/> by alias.
            </summary>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.DependencyManagement.MvcDependencyResolver">
            <summary>
              A class which passes requests from ASP.NET Mvc's <see cref="T:System.Web.Mvc.IDependencyResolver"/> to Rebel's equivalent <see cref="T:Rebel.Framework.DependencyManagement.IDependencyResolver"/> .
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.MvcDependencyResolver.GetService(System.Type)">
            <summary>
              Resolves singly registered services that support arbitrary object creation.
            </summary>
            <returns> The requested service or object. </returns>
            <param name="serviceType"> The type of the requested service or object. </param>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.MvcDependencyResolver.GetServices(System.Type)">
            <summary>
              Resolves multiply registered services.
            </summary>
            <returns> The requested services. </returns>
            <param name="serviceType"> The type of the requested services. </param>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.MvcDependencyResolver.Resolve``1">
            <summary>
              Resolves a service given the required contract type.
            </summary>
            <typeparam name="T"> The type with which the service implementation was registered. </typeparam>
            <returns> An instance of type <typeparamref name="T" /> . </returns>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.MvcDependencyResolver.Resolve``1(System.String)">
            <summary>
              Resolves a service given the required contract type, and the required name.
            </summary>
            <typeparam name="T"> The type with which the service implementation was registered. </typeparam>
            <param name="name"> The name of the service to resolve. </param>
            <returns> . </returns>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.MvcDependencyResolver.Resolve(System.Type)">
            <summary>
              Resolves a service given the required contract type.
            </summary>
            <param name="type"> The type with which the service implementation was registered. </param>
            <returns> An instance of type <paramref name="type" /> . </returns>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.MvcDependencyResolver.Resolve(System.Type,System.String)">
            <summary>
              Resolves a service given the required contract type, and the required name.
            </summary>
            <param name="type"> The type with which the service implementation was registered. </param>
            <param name="name"> The name of the service to resolve. </param>
            <returns> An instance of type <paramref name="type" /> . </returns>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.MvcDependencyResolver.ResolveAll``1">
            <summary>
              Resolves all services given the required contract type.
            </summary>
            <typeparam name="T"/>
            <returns> An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of instances of type <typeparamref name="T"/> . </returns>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.MvcDependencyResolver.ResolveAll(System.Type)">
            <summary>
              Resolves all services given the required contract type.
            </summary>
            <param name="type"> The type. </param>
            <returns> An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of instances of type <paramref name="type"/> . </returns>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.MvcDependencyResolver.TryResolve``1">
            <summary>
              Attempts to resolve a type, failing silently if the resolution cannot be performed.
            </summary>
            <remarks>
              The <typeparamref name="T" /> type parameter must be a reference (class) object in order to assess null resolutions predictably.
            </remarks>
            <typeparam name="T"> The type to resolve. </typeparam>
            <returns> A tuple indicating success and the resolved value, if any. </returns>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.MvcDependencyResolver.TryResolve``1(System.String)">
            <summary>
              Attempts to resolve a type, failing silently if the resolution cannot be performed.
            </summary>
            <remarks>
              The <typeparamref name="T" /> type parameter must be a reference (class) object in order to assess null resolutions predictably.
            </remarks>
            <param name="name"> The name of the service to resolve. </param>
            <typeparam name="T"> The type to resolve. </typeparam>
            <returns> A tuple indicating success and the resolved value, if any. </returns>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.MvcDependencyResolver.TryResolve(System.Type)">
            <summary>
              Attempts to resolve a type, failing silently if the resolution cannot be performed.
            </summary>
            <remarks>
              The <paramref name="type" /> parameter must be a reference (class) object in order to assess null resolutions predictably.
            </remarks>
            <param name="type"> The type to resolve. </param>
            <returns> A tuple indicating success and the resolved value, if any. </returns>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.MvcDependencyResolver.TryResolve(System.Type,System.String)">
            <summary>
              Attempts to resolve a type, failing silently if the resolution cannot be performed.
            </summary>
            <remarks>
              The <paramref name="type" /> parameter must be a reference (class) object in order to assess null resolutions predictably.
            </remarks>
            <param name="name"> The name of the service to resolve. </param>
            <param name="type"> The type to resolve. </param>
            <returns> A tuple indicating success and the resolved value, if any. </returns>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.MvcDependencyResolver.DisposeResources">
            <summary>
            Handles the disposal of resources. Derived from abstract class <see cref="T:Rebel.Framework.DisposableObject"/> which handles common required locking logic.
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Dictionary.DictionaryHelper.GetDictionaryItem(System.String)">
            <summary>
            Gets a dictionary item.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Dictionary.DictionaryHelper.GetDictionaryItem(System.String,System.String)">
            <summary>
            Gets a dictionary item.
            </summary>
            <param name="key">The key.</param>
            <param name="language">The language.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Dictionary.DictionaryHelper.GetDictionaryItemValue(System.String,System.String)">
            <summary>
            Gets a dictionary item value.
            </summary>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Dictionary.DictionaryHelper.GetDictionaryItemValueForLanguage(System.String,System.String,System.String)">
            <summary>
            Gets a dictionary item value.
            </summary>
            <param name="key">The key.</param>
            <param name="language">The language.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="P:Rebel.Cms.Web.FluentExtensions.ContentRevisionBuilderStep`2.Revision">
            <summary>
            Gets or sets the revision being built.
            </summary>
            <value>
            The revision.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.FluentExtensions.ContentRevisionBuilderStep`2.Item">
            <summary>
            Gets the current item being built.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.FluentExtensions.ContentRevisionBuilderStep`2.Content">
            <summary>
            Gets the content instance from the current <see cref="P:Rebel.Cms.Web.FluentExtensions.ContentRevisionBuilderStep`2.Revision"/> being built.
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.GlobalFilterCollectionExtensions.ContainsFilter``1(System.Web.Mvc.GlobalFilterCollection)">
            <summary>
            Checks if the GlobalFilters contains a filter of a specified type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filters"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperClientDependencyExtensions.RequiresTreeCssSprites(System.Web.Mvc.HtmlHelper)">
            <summary>
            Puts a dependency on the tree css sprites
            </summary>
            <param name="html"></param>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperClientDependencyExtensions.RequiresAppCssSprites(System.Web.Mvc.HtmlHelper)">
            <summary>
            Puts a dependency on the application css sprites
            </summary>
            <param name="html"></param>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperClientDependencyExtensions.RequiresJsFolder(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Puts a dependency on an entire folder
            </summary>
            <param name="html"></param>
            <param name="folderPath"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperClientDependencyExtensions.RequiresJsFolder(System.Web.Mvc.HtmlHelper,System.String,System.Int32)">
            <summary>
            Puts a dependency on an entire folder
            </summary>
            <param name="html"></param>
            <param name="folderPath"></param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsHiveManagerExtensions.Cms(Rebel.Hive.IHiveManager)">
            <summary>
            Creates an <see cref="T:Rebel.Cms.Web.IRenderViewHiveManagerWrapper"/> from an <see cref="T:Rebel.Hive.IHiveManager"/>.
            </summary>
            <param name="hiveManager">The hive manager.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsHiveManagerExtensions.Query``2(Rebel.Hive.IHiveManager)">
            <summary>
            Opens a reader, and starts a query of the specified hive manager.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TProviderFilter">The type of the provider filter.</typeparam>
            <param name="hiveManager">The hive manager.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsHiveManagerExtensions.QueryMedia``1(Rebel.Hive.IHiveManager)">
            <summary>
            A shortcut for building queries limited to media, specifically Hive providers matching the groups specified by <see cref="T:Rebel.Hive.RepositoryTypes.IMediaStore"/> (typically <value>media://</value>).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="hiveManager">The hive manager.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsHiveManagerExtensions.QueryMedia(Rebel.Hive.IHiveManager)">
            <summary>
            A shortcut for building queries limited to media, specifically Hive providers matching the groups specified by <see cref="T:Rebel.Hive.RepositoryTypes.IMediaStore"/> (typically <value>media://</value>).
            </summary>
            <param name="hiveManager">The hive manager.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsHiveManagerExtensions.QueryContent``1(Rebel.Hive.IHiveManager)">
            <summary>
            A shortcut for building queries limited to content, specifically Hive providers matching the groups specified by <see cref="T:Rebel.Hive.RepositoryTypes.IContentStore"/> (typically <value>content://</value>).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="hiveManager">The hive manager.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsHiveManagerExtensions.QueryContent(Rebel.Hive.IHiveManager)">
            <summary>
            A shortcut for building queries limited to content, specifically Hive providers matching the groups specified by <see cref="T:Rebel.Hive.RepositoryTypes.IContentStore"/> (typically <value>content://</value>).
            </summary>
            <param name="hiveManager">The hive manager.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsHiveManagerExtensions.GetById``1(System.Linq.IQueryable{``0},Rebel.Framework.HiveId)">
            <summary>
            Gets an item by Id, or <value>null</value> if none is found.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.CmsHiveManagerExtensions.GetById``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Gets an item by Id, or <value>null</value> if none is found or if <paramref name="idAsString"/> cannot be parsed as a <see cref="T:Rebel.Framework.HiveId"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="idAsString">The id as a string.</param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.MacroNameParser">
            <summary>
            Used to parse Macro names
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.MacroNameParser.ParseChildActionMacroName(System.String)">
            <summary>
            Parses the macro string name for a child action macro
            </summary>
            <param name="macroName"></param>
            <returns>returns a Tuple that contains the area name, controller name and action name</returns>
        </member>
        <member name="T:Rebel.Cms.Web.MacroNameParserResult">
            <summary>
            The result of parsing a child action macro name
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Macros.AbstractMacroEngine">
            <summary>
            Abstract class representing a MacroEngine
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Macros.AbstractMacroEngine.Execute(Rebel.Cms.Web.Model.Content,System.Collections.Generic.IDictionary{System.String,System.String},Rebel.Cms.Web.Macros.MacroDefinition,System.Web.Mvc.ControllerContext,Rebel.Cms.Web.Context.IRoutableRequestContext)">
            <summary>
            Executes the macro engine to render the macro
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Macros.AbstractMacroEngine.GetMacroParameters(Rebel.Cms.Web.Context.IBackOfficeRequestContext,Rebel.Cms.Web.Macros.MacroDefinition)">
            <summary>
            Gets a list of Macro parameters for the definition
            </summary>
            <param name="backOfficeRequestContext"></param>
            <param name="macroDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Macros.AbstractMacroEngine.GetMacroItems(Rebel.Cms.Web.Context.IBackOfficeRequestContext)">
            <summary>
            Returns the macro items that can be used by this Engine
            </summary>
            <param name="backOfficeRequestContext"></param>
            <returns></returns>
            <remarks>
            Each MacroEngine may render different items, such as PartialViews or ChildActions or Xslt files, Python files, etc...
            The Value set for each of the select list items will be the value passed into the MacroEngine's Execute method as the SelectedItem
            property of the MacroDefinition.
            </remarks>
        </member>
        <member name="P:Rebel.Cms.Web.Macros.AbstractMacroEngine.Name">
            <summary>
            Gets the name of the Macro Engine
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Macros.ChildActionMacroEngine">
            <summary>
            The ChildAction MacroEngine
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Macros.ChildActionMacroEngine.Execute(Rebel.Cms.Web.Model.Content,System.Collections.Generic.IDictionary{System.String,System.String},Rebel.Cms.Web.Macros.MacroDefinition,System.Web.Mvc.ControllerContext,Rebel.Cms.Web.Context.IRoutableRequestContext)">
            <summary>
            Retreives the string result from a SurfaceController's ChildAction and returns a ContentResult for it.
            </summary>
            <param name="currentNode"></param>
            <param name="macroParams"></param>
            <param name="macro"></param>
            <param name="currentControllerContext"></param>
            <param name="routableRequestContext"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Macros.ChildActionMacroEngine.GetMacroItems(Rebel.Cms.Web.Context.IBackOfficeRequestContext)">
            <summary>
            Returns the names of each ChildAction that can be used as a Macro
            </summary>
            <param name="backOfficeRequestContext"></param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.FieldRenderer">
            <summary>
            A utility class for rendering an rebel content Field/Property
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Macros.MacroEngineAttribute">
            <summary>
            Identifies a editor controller
            </summary>    
        </member>
        <member name="M:Rebel.Cms.Web.Macros.MacroEngineAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>        
            <param name="id"></param>
            <param name="engineName">The name of the Macro engine</param>
        </member>
        <member name="P:Rebel.Cms.Web.Macros.MacroEngineMetadata.IsInternalRebelEngine">
            <summary>
            Whether or not this is an built-in Rebel macro engine
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Macros.MacroEngineMetadata.EngineName">
            <summary>
            Gets the name of the MacroEngine
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Macros.PartialViewMacroEngine">
            <summary>
            The PartialView MacroEngine
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Macros.PartialViewMacroEngine.GetFullViewPath(Rebel.Cms.Web.Macros.MacroDefinition,Rebel.Cms.Web.Context.IRoutableRequestContext)">
            <summary>
            Returns the full view path without the extension
            </summary>
            <param name="macro"></param>
            <param name="routableRequestContext"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Macros.PartialViewMacroEngine.GetMacroParameters(Rebel.Cms.Web.Context.IBackOfficeRequestContext,Rebel.Cms.Web.Macros.MacroDefinition)">
            <summary>
            Returns the PartialView Macro parameters
            </summary>
            <param name="backOfficeRequestContext"></param>
            <param name="macroDefinition"></param>
            <returns></returns>
            <remarks>
            Partial view macro parameters are determined by getting an instance of the partial view and looking for it's publicly declared
            properties which are done by declaring a region in Razor like so:
            @functions {
              public int Age {get;set;}
            }
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Macros.PartialViewMacroEngine.GetMacroItems(Rebel.Cms.Web.Context.IBackOfficeRequestContext)">
            <summary>
            Returns all of the PartialViews that can be used for Macros, including all partial views existing in the standard 
            Rebel partials folder and also the ones found inside of packages.
            </summary>
            <param name="backOfficeRequestContext"></param>
            <returns></returns>
            <remarks>
            Package PartialViews will be prefixed with the Package name '.'
            </remarks>
        </member>
        <member name="T:Rebel.Cms.Web.Macros.RebelMacroEngineAttribute">
            <summary>
            Identifies a default Rebel macro engine that is shipped with the framework
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Mapping.AttributeTypeToPropertyEditorPackageName">
            <summary>
            Resolves a property editor's package name from an attribute type if it is available
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Mapping.ContentEditorModelToTypedEntity`2">
            <summary>
            Maps any type of BasicContentEditorModel to any type of TypedEntity
            </summary>
            <typeparam name="TContentModel">The type of the content model.</typeparam>
            <typeparam name="TTypedEntity">The type of the typed entity.</typeparam>
        </member>
        <member name="M:Rebel.Cms.Web.Mapping.ContentEditorModelToTypedEntity`2.#ctor(Rebel.Framework.TypeMapping.AbstractFluentMappingEngine,Rebel.Cms.Web.Context.MapResolverContext,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Rebel.Cms.Web.Mapping.ContentEditorModelToTypedEntity`2"/> class.
            </summary>
            <param name="engine">The engine.</param>
            <param name="resolverContext">The resolver context.</param>
            <param name="ignoreAttributeAliases">The attribute aliases to ignore during attribute mapping</param>
        </member>
        <member name="M:Rebel.Cms.Web.MemberExtensions.SetupFromSchema(Rebel.Framework.Security.Model.Entities.Member,System.String)">
            <summary>
            Sets up a Member by Member Type alias.
            </summary>
            <param name="member">The member.</param>
            <param name="alias">The alias.</param>
        </member>
        <member name="M:Rebel.Cms.Web.MemberExtensions.SetupFromSchema(Rebel.Framework.Security.Model.Entities.Member,System.String,Rebel.Hive.ProviderGrouping.IReadonlyGroupUnit{Rebel.Hive.RepositoryTypes.ISecurityStore})">
            <summary>`
            Sets up a Member by Member Type alias.
            </summary>
            <param name="member">The member.</param>
            <param name="alias">The alias.</param>
            <param name="uow">The uow.</param>
        </member>
        <member name="M:Rebel.Cms.Web.MemberExtensions.SetupFromSchema(Rebel.Framework.Security.Model.Entities.Member,System.String,Rebel.Hive.ProviderGrouping.IGroupUnit{Rebel.Hive.RepositoryTypes.ISecurityStore})">
            <summary>
            Sets up a Member by Member Type alias.
            </summary>
            <param name="member">The member.</param>
            <param name="alias">The alias.</param>
            <param name="uow">The uow.</param>
        </member>
        <member name="M:Rebel.Cms.Web.MembershipServiceExtensions.GetCurrent``1(Rebel.Framework.Security.IMembershipService{``0})">
            <summary>
            Gets the current user.
            </summary>
            <typeparam name="TUserType">The type of the user.</typeparam>
            <param name="membershipService">The membership service.</param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.AbstractSchemaEditorModel">
            <summary>
            Represents the view model used to render a document type editor
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.EditorModel">
            <summary>
            An abstract View Model for Editors
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.CoreEntityModel">
            <summary>
            Represents the properties for any entity that supports authors and parent heirarchy
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.TimestampedModel">
            <summary>
            A basic class representing a model with create/updated dates
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.IdentityModel">
            <summary>
            The most basic model representing a name and an Id
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.IdentityModel.Id">
            <summary>
            Gets/sets the Id
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.IdentityModel.Name">
            <summary>
            The name of the model
            </summary>
            <remarks>
            This is the only editable property of CoreEntityModel
            </remarks>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.CoreEntityModel.ParentId">
            <summary>
            Gets or sets the parent id.
            </summary>
            <value>The parent id.</value>
            <remarks></remarks>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.CoreEntityModel.OrdinalRelativeToParent">
            <summary>
            Gets or sets the ordinal relative to the <see cref="P:Rebel.Cms.Web.Model.BackOffice.CoreEntityModel.ParentId"/>.
            </summary>
            <value>The ordinal relative to parent.</value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.EditorModel.NoticeBoard">
            <summary>
            Used to display important messages about the node
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.EditorModel.UIElements">
            <summary>
            List of toolbar buttons / elements to display for this model
            </summary>
            <value>
            The UI elements.
            </value>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.IModelBindAware">
            <summary>
            Indicates that an object is capable of being updated
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.IModelBindAware.BindModel(Rebel.Cms.Web.Model.BackOffice.IModelUpdator)">
            <summary>
            Updates using the object from the specified updator
            </summary>
            <param name="modelUpdator">The updator.</param>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.AbstractSchemaEditorModel.#ctor(Rebel.Framework.HiveId)">
            <summary>
            Creates a new model with an existing id
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.AbstractSchemaEditorModel.#ctor">
            <summary>
            initialize collections so they are never null
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.AbstractSchemaEditorModel.ActiveTabIndex">
            <summary>
            The tab to display
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.AbstractSchemaEditorModel.Alias">
            <summary>
            The alias used to reference the doc type
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.AbstractSchemaEditorModel.Icon">
            <summary>
            The icon to be displayed in the tree for a content node of this doc type
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.AbstractSchemaEditorModel.Thumbnail">
            <summary>
            The thumbnail to be displayed in the create model for a content node of this doc type
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.AbstractSchemaEditorModel.Description">
            <summary>
            The description of this doc type
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.AbstractSchemaEditorModel.IsAbstract">
            <summary>
            Setting for whether doc type is only to be used in inheritance, and not available for content entry
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.AbstractSchemaEditorModel.AllowedChildren">
            <summary>
            A list of allowed children types
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.AbstractSchemaEditorModel.InheritFrom">
            <summary>
            A list of types to inherit from
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.AbstractSchemaEditorModel.DefinedTabs">
            <summary>
            The defined tabs for the content editor
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.AbstractSchemaEditorModel.Properties">
            <summary>
            The properites of this doc type
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.AbstractSchemaEditorModel.NewProperty">
            <summary>
            Model for creating a new property for the Document Type
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.AbstractSchemaEditorModel.IsCreatingNewProperty">
            <summary>
            Whether or not the user is creating a new property
            </summary>
            <remarks>
            This is used to determine how validation works for the NewProperty property of this model, 
            it is also used to determine if the NewProperty UI box should be expanded by default.
            </remarks>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.AbstractSchemaEditorModel.NewTabName">
            <summary>
            Name of the new tab to be created
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.AbstractSchemaEditorModel.AllowedChildIds">
            <summary>
            list of the allowed child doc type ids
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.AbstractSchemaEditorModel.InheritFromIds">
            <summary>
            list of the doc type ids to inherit from
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.AbstractSchemaEditorModel.AvailableIcons">
            <summary>
            list of the available icons
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.AbstractSchemaEditorModel.AvailableThumbnails">
            <summary>
            list of the available thumbnails
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.AbstractSchemaEditorModel.AvailableDataTypes">
            <summary>
            List of defined data types
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.AbstractSchemaEditorModel.AvailableTabs">
            <summary>
            List of tabs to choose from
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.AbstractSchemaEditorModel.IconsBaseUrl">
            <summary>
            the base URL to the icon files
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.AbstractSchemaEditorModel.ThumbnailsBaseUrl">
            <summary>
            the base URL to the icon files
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.AbstractSchemaEditorModel.SpriteFileUrls">
            <summary>
            a list of sprite file urls to reference
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.AbstractSchemaEditorModel.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether this instance is read only.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.AbstractSchemaEditorModel.InheritedTabs">
            <summary>
            Gets or sets the inherited tabs.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.AbstractSchemaEditorModel.InheritedProperties">
            <summary>
            Gets or sets the inherited properties.
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.BasicContentEditorModel">
            <summary>
            An abstract View model for content/media
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.BasicContentEditorModel.BindModel(Rebel.Cms.Web.Model.BackOffice.IModelUpdator)">
            <summary>
            Binds the model with the IUpdator
            </summary>
            <param name="modelUpdator"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.BasicContentEditorModel.PopulateUIElements">
            <summary>
            Populates the UI elements
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.BasicContentEditorModel.GetPropertyEditorModelValue(System.String,System.Func{System.Object,System.Object})">
            <summary>
            Gets the property editor model value.
            </summary>
            <param name="alias">The alias.</param>
            <param name="getValue">The get value.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.BasicContentEditorModel.SetPropertyEditorModelValue(System.String,System.Action{System.Object})">
            <summary>
            Sets the property editor model value.
            </summary>
            <param name="alias">The alias.</param>
            <param name="setValue">The set value.</param>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.BasicContentEditorModel.IsEditable">
            <summary>
            By Default this is true, but when set to false the model should not be allowed to be saved. This 
            is generally only set to false when an item is in the Recycle Bin.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.BasicContentEditorModel.Name">
            <summary>
            Override the 'Name' property to lookup/retreive from the NodeName dynamic property of this object
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.BasicContentEditorModel.DocumentTypeId">
            <summary>
            This is used when creating brand new content
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.BasicContentEditorModel.Tabs">
            <summary>
            The tabs on the content node (defined by the document type)
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.BasicContentEditorModel.SortedTabs">
            <summary>
            Returns the tabs in the correct sort order and without the general group tab
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.BasicContentEditorModel.ActiveTabIndex">
            <summary>
            The tab to display
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.BasicContentEditorModel.Properties">
            <summary>
            The properties of the content node
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.ProfileEditorModel.Name">
            <summary>
            Override the 'Name' property to lookup/retreive from the Name dynamic property of this object
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.ProfileEditorModel.ProviderUserKey">
            <summary>
            Gets or sets the provider user key.
            </summary>
            <value>
            The provider user key.
            </value>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.MembershipUserEditorModel.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates the input
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.DialogModel.UIElements">
            <summary>
            List of toolbar buttons / elements to display for this model
            </summary>
            <value>
            The UI elements.
            </value>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.ProfileTypeEditorModel">
            <summary>
            Represents the view model used to render a media type editor
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.LanguageModel">
            <summary>
            A view model representing hostnames assigned to an entity
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.LanguageModel.Id">
            <summary>
            The ID of the content node to assign language
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.LanguageModel.IsoCode">
            <summary>
            The ISO code of the selected language.
            </summary>
            <value>
            The iso code.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.StandardContentEditorModel.RevisionId">
            <summary>
            Gets or sets the revision id
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.StandardContentEditorModel.UtcPublishedDate">
            <summary>
            The last published date, if null then the document is not published
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.StandardContentEditorModel.UtcPublishScheduled">
            <summary>
            The date to publish at
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.StandardContentEditorModel.UtcUnpublishScheduled">
            <summary>
            The date to unpublish at
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.MediaTypeEditorModel">
            <summary>
            Represents the view model used to render a media type editor
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.PreValueDefinition">
            <summary>
            A class representing a single value of a Pre-Value editor to be saved
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.UIElements.ButtonUIElement">
            <summary>
            Represents a button UI Element
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.UIElements.UIElement">
            <summary>
            Represents a UI Element
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.UIElements.UIElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rebel.Cms.Web.Model.BackOffice.UIElements.UIElement"/> class.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.UIElements.UIElement.JsType">
            <summary>
            Gets the js type for this UIElement..
            </summary>
            <value>
            The type of the js.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.UIElements.UIElement.UIPanelAlias">
            <summary>
            Gets or sets the UI Panel alias.
            </summary>
            <value>
            The UI Panel alias.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.UIElements.UIElement.CssClass">
            <summary>
            The CSS class name to set for the UIElement.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.UIElements.UIElement.AdditionalData">
            <summary>
            Allows a developer to add additional meta data to the UIElement which can be queried in 
            JavaScript for any additional functionality
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.UIElements.UIElement.Type">
            <summary>
            Gets the type of the UI Element.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.UIElements.InteractiveUIElement.Title">
            <summary>
            The title for UI Element
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.UIElements.InteractiveUIElement.Alias">
            <summary>
            Gets or sets the UI Element alias.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.UIElements.ButtonUIElement.Icon">
            <summary>
            A relative path to an icon file to use for the button
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.UIElements.ButtonUIElement.ButtonType">
            <summary>
            Gets or sets the type of the button.
            </summary>
            <value>
            The type of the button.
            </value>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ActionFilters.HandleAuthorizationErrors">
            <summary>
            A custom filter for handling 401 (no authenticated) and 403 (not authorized) so that
            the custom error pages specified in the web.config will be rendered with the correct 
            Http status codes.
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Context.IRequiresBackOfficeRequestContext">
            <summary>
            Interface requiring a BackOfficeRequestContext
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.HandleAuthorizationErrors.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="showLoginOverlay">true to display a login overlay if not authorized, or false to show the login page</param>
        </member>
        <member name="T:Rebel.Cms.Web.Context.IRequiresRoutableRequestContext">
            <summary>
            Interface requiring a RoutableRequestContext
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ActionFilters.MergeModelStateToChildActionAttribute">
            <summary>
            When a ChildAction is executing and we want the ModelState from the Parent context to be merged in
            to help with validation, this filter can be used.
            </summary>
            <remarks>
            By default, this filter will only merge when an Http POST is detected but this can be modified in the ctor
            </remarks>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ActionFilters.ProxyableResultAttribute">
            <summary>
            When using the ProxyRequestToController methods and you wish to receive the typed 'ActionResult' (TResult) result 
            from the proxy, then this filter must be used. 
            </summary>
            <remarks>
            This filter is added to the Global filters so will always execute.
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.ProxyableResultAttribute.StoreResult(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionResult)">
            <summary>
            Checks if the DataTokens key exists which flags that we should store the result for retreival after execution
            </summary>
            <param name="controllerContext"></param>
            <param name="result"></param>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ControllerFactories.PluginControllerFactory">
            <summary>
            Controller factory used for finding and instantiating plugin controllers
            </summary>
            <remarks>
            Since the DefaultControllerFactory in MVC performs some very aggressive caching of controllers in a cache
            file which persists app pool restarts. The subsystem queries the bin folder for changes made to the controllers
            but since plugin controllers aren't in the bin folder if they are loaded in the CodeGen folder they don't get updated, 
            therefore this factory is required in order to ensure that plugin controllers don't get 'stale'
            </remarks>
        </member>
        <member name="P:Rebel.Cms.Web.Mvc.ControllerFactories.IExtendedControllerFactory.ApplicationContext">
            <summary>
            Gets the application context.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ControllerFactories.IFilteredControllerFactory.CanHandle(System.Web.Routing.RequestContext)">
            <summary>
            Determines whether this instance can handle the specified request.
            </summary>
            <param name="request">The request.</param>
            <returns><c>true</c> if this instance can handle the specified request; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ControllerFactories.PluginControllerFactory.CanHandle(System.Web.Routing.RequestContext)">
            <summary>
            This factory will attempt to return the controller only if the PluginManager is using the CodeGen folder 
            andthe  route values contains both the 'Namespaces' and 'rebel' data tokens in its route values.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ControllerFactories.PluginControllerFactory.GetControllerType(System.Web.Routing.RequestContext,System.String)">
            <summary>
            Returns the controller type for the specified controllerName based on the RouteData specified.
            </summary>
            <param name="requestContext"></param>
            <param name="controllerName"></param>
            <returns></returns>
            <remarks>
            Since this factory should only fire for plugin controllers, we just check for the Namespace token and look it up in our
            cache, if it doesn't exist there, we'll check the BuildManager since we know we've registered it with that on pre app init.
            If nothing is found, then we'll just revert to using the base classes implementation.
            </remarks>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ControllerFactories.PluginControllerFactory.NullController">
            <summary>
            Just a type used to be stored in our cache for when we definitely cannot resolve a type
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.Controllers.MediaProxyController">
            <summary>
            Controller to return and secure Media files
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.MediaProxyController.Proxy(System.String,System.String,System.Int32,System.String)">
            <summary>
            Displays the image, ensuring the correct permissions are set.
            </summary>
            <param name="propertyAlias"></param>
            <param name="mediaId"></param>
            <param name="size"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ModelBinders.BackOffice.DocumentTypePropertyModelBinder">
            <summary>
            Model binder for DocumentTypeProperty
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ModelBinders.BackOffice.StandardModelBinder">
            <summary>
            Model binder to inherit from containing utility functions for aiding in model binding
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ModelBinders.BackOffice.StandardModelBinder.SetPropertyValue(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.ComponentModel.PropertyDescriptor,System.Func{System.String,System.Object})">
            <summary>
            Method to get the attempted value for the property and to execute the callback method to retreive the 'real' value,
            then set the property whilst executing the correct events.
            The event order is based on how the DefaultModelBinder sets properties so figured I'd go with these 'best practices'.
            </summary>
            <param name="controllerContext"></param>
            <param name="bindingContext"></param>
            <param name="propertyDescriptor"></param>
            <param name="getValue">callback method to get the 'real' value</param>        
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ModelBinders.BackOffice.DocumentTypePropertyModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
            <summary>
            Ensures that the DataType property of the model is set correctly.
            </summary>
            <param name="controllerContext"></param>
            <param name="bindingContext"></param>
            <returns></returns>
            <remarks>
            The DataType property may not be null, in which case we need to ensure that the DataTypeId and DataType.Id are the same, if they are
            not, it means the editor changed the DataType so we need to go look it up by the new Id and re-map. Otherwise if it is null, this generally
            means that its a new property so we need to lookup the DataType by the DataTypeId and re-map.
            </remarks>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ModelBinders.BackOffice.MediaTypeModelBinder">
            <summary>
            Model binder for MediaTypeEditorModel
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ModelBinders.BackOffice.MediaTypeModelBinder.BindProperty(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Binds custom properties that the default model binder wont be able to bind
            </summary>
            <param name="controllerContext"></param>
            <param name="bindingContext"></param>
            <param name="propertyDescriptor"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ModelBinders.BackOffice.ModelBinderExtensions.BindSelectList(Rebel.Cms.Web.Mvc.ModelBinders.BackOffice.StandardModelBinder,System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Binds a IEnumerable{SelectList}
            </summary>
            <param name="binder">The binder.</param>
            <param name="controllerContext">The controller context.</param>
            <param name="bindingContext">The binding context.</param>
            <param name="propertyDescriptor">The property descriptor.</param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ModelBinders.BackOffice.NullableHiveIdModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
            <summary>
            Binds the model
            </summary>
            <param name="controllerContext"></param>
            <param name="bindingContext"></param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.RedirectToRebelPageResult">
            <summary>
            Redirects to an Rebel page by Id or Entity
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.RedirectToRebelPageResult.#ctor(Rebel.Framework.HiveId)">
            <summary>
            Creates a new RedirectToRebelResult
            </summary>
            <param name="pageId"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.RedirectToRebelPageResult.#ctor(Rebel.Framework.Persistence.Model.TypedEntity)">
            <summary>
            Creates a new RedirectToRebelResult
            </summary>
            <param name="pageEntity"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.RedirectToRebelPageResult.#ctor(Rebel.Framework.Persistence.Model.TypedEntity,Rebel.Cms.Web.Context.IRoutableRequestContext)">
            <summary>
            Creates a new RedirectToRebelResult
            </summary>
            <param name="pageEntity"></param>
            <param name="routableRequestContext"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.RedirectToRebelPageResult.#ctor(Rebel.Framework.HiveId,Rebel.Cms.Web.Context.IRoutableRequestContext)">
            <summary>
            Creates a new RedirectToRebelResult
            </summary>
            <param name="pageId"></param>
            <param name="routableRequestContext"></param>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.RebelPageResult">
            <summary>
            Used by posted forms to proxy the result to the page in which the current URL matches on
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ViewEngines.IFilteredViewPageActivator">
            <summary>
            Any object registered as an IFilteredViewPageActivator has the ability to declare that it should the the activator to create the view
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ViewEngines.IFilteredViewPageActivator.ShouldCreate(System.Web.Mvc.ControllerContext,System.Type)">
            <summary>
            Determines whether this instance can handle the specified request.
            </summary>
            <param name="context">The current controller context.</param>
            <param name="type">The type that the activator is to instantiate</param>
            <returns><c>true</c> if this instance can handle the specified request; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ViewEngines.IPostViewPageActivator">
            <summary>
            Any object registered as an IPostViewPageActivator can take part in the view page activation after its created
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ViewEngines.IPostViewPageActivator.OnViewCreated(System.Web.Mvc.ControllerContext,System.Type,System.Object)">
            <summary>
            Executes when the view is created allowing the modification of the view before being returned by the activator
            </summary>
            <param name="context"></param>
            <param name="type"></param>
            <param name="view"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ViewEngines.MasterViewPageActivator.RegisterActivator(Rebel.Cms.Web.Mvc.ViewEngines.IFilteredViewPageActivator)">
            <summary>
            Registers the activator.
            </summary>
            <param name="slaveActivator">The slave activator.</param>
            <remarks></remarks>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ViewEngines.PostViewPageActivatorAttribute">
            <summary>
            Allows ordering of post view page activators, if the attribute is not declared then all post view page activators
            without it will be executed as how IoC loads them.
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ViewEngines.PostViewPageActivatorExtensions.GetRoutableRequestContextFromSources(Rebel.Cms.Web.Mvc.ViewEngines.IPostViewPageActivator,System.Object,System.Web.Mvc.ControllerContext)">
            <summary>
            Checks the sources to return the current routable request context the quickest
            </summary>
            <param name="activator"></param>
            <param name="view"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Packaging.PackageInstallation.CopyPackageFiles">
            <summary>
            Verifies that all files from Package source can be copied to destination,
            and then goes on to copy the files that can be copied.
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Packaging.PackageInstallation.ImportData">
            <summary>
            Imports serialized data from a package by checking if its valid
            and already exists.
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Packaging.PackageInstallation.CheckImportableEntities(Rebel.Cms.Web.Packaging.SerializedDataImport)">
            <summary>
            Check Entities can be imported.
            Updates 'IsImportable' property on <see cref="T:Rebel.Cms.Web.Packaging.DeseriazliedDataResult"/>
            </summary>
            <param name="dataImport"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Packaging.PackageInstallation.CheckImportableRelations(Rebel.Cms.Web.Packaging.SerializedDataImport)">
            <summary>
            Check relations to verify source and destination exists
            </summary>
            <param name="dataImport"></param>
        </member>
        <member name="T:Rebel.Cms.Web.ProxyControllerExtensions">
            <summary>
            Extension methods to proxy a request to another controller's action.
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.ProxyControllerExtensions.ValidateProxyableRequest(System.Boolean)">
            <summary>
            Validates the controller to be proxied to, this requires that ProxyableResultAttribute is added to GlobalFilters.
            </summary>
            <param name="throwException">true to throw an exception if validation fails</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ProxyControllerExtensions.ProxyRequestToController``2(System.Web.Mvc.ControllerBase,System.Linq.Expressions.Expression{System.Func{``1,``0}},System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Executes the action as a ChildAction but maintains the action's result so that it can be retreived
            </summary>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TControllerType"></typeparam>
            <param name="controller"></param>
            <param name="methodSelector"></param>        
            <param name="area"></param>
            <param name="routeVals"> </param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ProxyControllerExtensions.ProxyRequestToController``2(System.Web.Mvc.ControllerBase,``1,System.Linq.Expressions.Expression{System.Func{``1,``0}},System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Executes the action as a ChildAction but maintains the action's result so that it can be retreived
            </summary>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TControllerType"></typeparam>
            <param name="controller"></param>
            <param name="proxyController"></param>
            <param name="methodSelector"></param>
            <param name="area"></param>
            <param name="routeVals"> </param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ProxyControllerExtensions.ProxyRequestToController``2(System.Web.Mvc.ControllerBase,``1,System.Linq.Expressions.Expression{System.Func{``1,``0}},Rebel.Framework.PluginMetadataComposition,System.String,System.String)">
            <summary>
            Executes to the Plugin controller's action as a ChildAction but maintains the action's result so that it can be retreived
            </summary>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TControllerType"></typeparam>
            <param name="controller"></param>
            <param name="proxyController"></param>
            <param name="methodSelector"></param>
            <param name="pluginDef"></param>
            <param name="backOfficePath"></param>
            <param name="routeIdParameterName">Plugin controllers routes are constructed with a route Id parameter such as editorId or surfaceId </param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ProxyControllerExtensions.ProxyRequestToController(System.Web.Mvc.ControllerBase,System.Web.Mvc.ControllerBase,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String)">
            <summary>
            Executes the action as a ChildAction but maintains the action's result so that it can be retreived
            </summary>
            <param name="controller"></param>
            <param name="proxyController"></param>
            <param name="childAction"></param>
            <param name="routeVals"></param>
            <param name="area"> </param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ProxyControllerExtensions.ProxyRequestToController(System.Web.Mvc.ControllerBase,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String)">
            <summary>
            Executes the action as a ChildAction but maintains the action's result so that it can be retreived
            </summary>
            <param name="controller"></param>
            <param name="proxyController"></param>
            <param name="childAction"></param>
            <param name="area"></param>
            <param name="routeVals"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ProxyControllerExtensions.ProxyRequestToController(System.Web.Mvc.ControllerBase,System.String,System.String,Rebel.Framework.PluginMetadataComposition,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Executes to the Plugin controller's action as a ChildAction but maintains the action's result so that it can be retreived
            </summary>
            <param name="controller"></param>
            <param name="proxyController"></param>
            <param name="childAction"></param>
            <param name="pluginDef"></param>
            <param name="backOfficePath"></param>
            <param name="routeIdParameterName">Plugin controllers routes are constructed with a route Id parameter such as editorId or surfaceId </param>
            <param name="routeVals"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ProxyControllerExtensions.ExecuteProxiedControllerAction``1(System.Web.Mvc.ControllerBase,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Returns a ProxyRequestResult which gets the string output response for the executed action by executing the controller on a different context and reading
            the response stream. This ensures that the entire MVC process is executed including ActionFilters.
            </summary>
            <param name="controller"></param>
            <param name="proxyControllerName"></param>
            <param name="action"></param>
            <param name="area"></param>
            <param name="routeVals"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ProxyControllerExtensions.GetHtmlHelper(System.Web.Mvc.ControllerBase,System.Web.Routing.RequestContext)">
            <summary>
            Create an HtmlHelper for the controller
            </summary>
            <param name="controller"></param>
            <param name="requestContext"></param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.ProxyRequestResult`1">
            <summary>
            The result from Proxying a request to another controller's action
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="P:Rebel.Cms.Web.ProxyRequestResult`1.RenderedOutput">
            <summary>
            The string rendered output from proxying a request to another controller's action
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.ProxyRequestResult`1.Result">
            <summary>
            The ActionResult result from proxying
            </summary>
            <remarks>
            IMPORTANT: this result should not be used to return from another Action since this has 
            already executed the full controller process including wiring up views and rendering them. If you return this ActionResult
            from another Action, it will not have it's views wired up, you would need to call the proxied controller's ControllerContext
            method EnsureViewObjectDataOnResult. This however will end up performing the same execution twice, since the controller has already
            been executed hence why this method returns a string (the already rendered result from the controller execution).
            
            This ActionResult may contain other data in the form of properties which may be useful which is why it is being returned.
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.RenderViewHiveManagerWrapper.GetAllReadProviders">
            <summary>
            Gets all the read providers registered with this manager.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Rebel.Cms.Web.RenderViewHiveManagerWrapper.GetAllReadWriteProviders">
            <summary>
            Gets all read write providers registered with this manager.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Rebel.Cms.Web.RenderViewHiveManagerWrapper.GetReader``1">
            <summary>
            Gets a <see cref="T:Rebel.Hive.ProviderGrouping.ReadonlyGroupUnitFactory`1"/> for a group of providers, by finding a matching group in the <see cref="P:Rebel.Hive.IHiveManager.ProviderGroups"/> collection where the
            provider's mapping group root Uri matches the value with which <typeparamref name="TFilter"/> has been decorated. <typeparamref name="TFilter"/> must be decorated
            with a <see cref="T:Rebel.Hive.ProviderGrouping.RepositoryTypeAttribute"/> containing the provider group root Uri.
            </summary>
            <typeparam name="TFilter">The <see cref="T:Rebel.Hive.RepositoryTypes.IProviderTypeFilter"/> used to create extension methods against this provider group.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RenderViewHiveManagerWrapper.GetWriter``1">
            <summary>
            Gets a <see cref="T:Rebel.Hive.ProviderGrouping.GroupUnitFactory`1"/> for a group of providers, by finding a matching group in the <see cref="P:Rebel.Hive.IHiveManager.ProviderGroups"/> collection where the
            provider's mapping group root Uri matches the value with which <typeparamref name="TFilter"/> has been decorated. <typeparamref name="TFilter"/> must be decorated
            with a <see cref="T:Rebel.Hive.ProviderGrouping.RepositoryTypeAttribute"/> containing the provider group root Uri.
            </summary>
            <typeparam name="TFilter">The <see cref="T:Rebel.Hive.RepositoryTypes.IProviderTypeFilter"/> used to create extension methods against this provider group.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RenderViewHiveManagerWrapper.GetReader``1(System.Uri)">
            <summary>
            Gets a <see cref="T:Rebel.Hive.ProviderGrouping.ReadonlyGroupUnitFactory`1"/> for a group of providers, by finding a matching group in the <see cref="P:Rebel.Hive.IHiveManager.ProviderGroups"/> collection where the
            provider's mapping group root Uri matches <paramref name="providerMappingRoot"/>. <typeparamref name="TFilter"/> is ignored when searching for a matching provider group,
            but can still be used to assign specific extension methods to this provider group request.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <param name="providerMappingRoot">The provider mapping root.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RenderViewHiveManagerWrapper.GetReader(System.Uri)">
            <summary>
            Gets a <see cref="T:Rebel.Hive.ProviderGrouping.ReadonlyGroupUnitFactory"/> for a group of providers, by finding a matching group in the <see cref="P:Rebel.Hive.IHiveManager.ProviderGroups"/> collection where the
            provider's mapping group root Uri matches <paramref name="providerMappingRoot"/>.
            </summary>
            <param name="providerMappingRoot">The provider mapping root.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RenderViewHiveManagerWrapper.GetWriter``1(System.Uri)">
            <summary>
            Gets a <see cref="T:Rebel.Hive.ProviderGrouping.GroupUnitFactory`1"/> for a group of providers, by finding a matching group in the <see cref="P:Rebel.Hive.IHiveManager.ProviderGroups"/> collection where the
            provider's mapping group root Uri matches <paramref name="providerMappingRoot"/>. <typeparamref name="TFilter"/> is ignored when searching for a matching provider group,
            but can still be used to assign specific extension methods to this provider group request.
            </summary>
            <typeparam name="TFilter">The type of the filter.</typeparam>
            <param name="providerMappingRoot">The provider mapping root.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RenderViewHiveManagerWrapper.GetWriter(System.Uri)">
            <summary>
            Gets a <see cref="T:Rebel.Hive.ProviderGrouping.GroupUnitFactory"/> for a group of providers, by finding a matching group in the <see cref="P:Rebel.Hive.IHiveManager.ProviderGroups"/> collection where the
            provider's mapping group root Uri matches <paramref name="providerMappingRoot"/>.
            </summary>
            <param name="providerMappingRoot">The provider mapping root.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RenderViewHiveManagerWrapper.DisposeResources">
            <summary>
            Handles the disposal of resources. Derived from abstract class <see cref="T:Rebel.Framework.DisposableObject"/> which handles common required locking logic.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.RenderViewHiveManagerWrapper.Content">
            <summary>
            Starts a query for content excluding items in the backoffice recycle bin
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.RenderViewHiveManagerWrapper.Media">
            <summary>
            Starts a query for media excluding items in the backoffice recycle bin
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.RenderViewHiveManagerWrapper.PerfCounterManager">
            <summary>
            Gets the perf counter manager.
            </summary>
            <value>The perf counter manager.</value>
        </member>
        <member name="P:Rebel.Cms.Web.RenderViewHiveManagerWrapper.ProviderGroups">
            <summary>
            Gets the provider groups managed by this <see cref="T:Rebel.Hive.IHiveManager"/>.
            </summary>
            <value>The provider groups.</value>
        </member>
        <member name="P:Rebel.Cms.Web.RenderViewHiveManagerWrapper.FrameworkContext">
            <summary>
            Gets the framework context.
            </summary>
            <value>The framework context.</value>
        </member>
        <member name="P:Rebel.Cms.Web.RenderViewHiveManagerWrapper.ManagerId">
            <summary>
            Gets the manager instance id.
            </summary>
            <value>The manager id.</value>
        </member>
        <member name="P:Rebel.Cms.Web.RenderViewHiveManagerWrapper.Context">
            <summary>
            Gets the context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="T:Rebel.Cms.Web.Routing.BackOfficeRouteConstraint">
            <summary>
            This constraint must pass to route anything to any back office controllers
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Routing.IgnorePluginRoute">
            <summary>
            A route created to ignore already routed plugin controllers from being routable in the fallback package routes.
            </summary>
            <example>
            
            An example of this is an Editor controller in a package will get a URL such as:
            /Rebel/SystemInfo/Editors/SystemInfoEditor/Backup
            
            but because we are also auto routing non-plugin controllers found in packages to:
            /Rebel/{PackageName}/{Controller/{Action}
            
            then the above editor controller would also match this:
            /Rebel/SystemInfo/SystemInfoEditor/Backup
            
            which we don't want to allow, so this route will ensure requests to previously registered plugin controllers, based on the controller name
            are ignored for default routes.
            
            </example>    
            <remarks>
            This does however mean that you cannot have a non-plugin controller in you package with the same name as a plugin controller, even if they are in a different namespace.
            </remarks>
        </member>
        <member name="T:Rebel.Cms.Web.Routing.IgnorePluginRoute.IgnoreExistingControllersConstraint">
            <summary>
            The internal constraint class to match the previously registered controller names
            </summary>
        </member>
        <member name="F:Rebel.Cms.Web.Routing.IgnorePluginRoute.IgnoreExistingControllersConstraint._alreadyProcessed">
            <summary>
            maintains a list of already ignored paths
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Routing.RouteDefinition">
            <summary>
            Represents the data required to route to a specific controller/action during an Rebel request
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Routing.RouteDefinition.Controller">
            <summary>
            The Controller instance found for routing to
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Routing.RouteDefinition.RenderModel">
            <summary>
            The current RenderModel found for the request
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Routing.PostedDataProxyInfo">
            <summary>
            Represents the data required to proxy a request to a surface controller for posted data
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:System.Web.Security.MembershipProvider" /> class.
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Processes a request to update the password for a membership user.
            </summary>
            <param name="username">The user to update the password for.</param>
            <param name="oldPassword">The current password for the specified user.</param>
            <param name="newPassword">The new password for the specified user.</param>
            <returns>
            true if the password was updated successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
            <summary>
            Processes a request to update the password question and answer for a membership user.
            </summary>
            <param name="username">The user to change the password question and answer for.</param>
            <param name="password">The password for the specified user.</param>
            <param name="newPasswordQuestion">The new password question for the specified user.</param>
            <param name="newPasswordAnswer">The new password answer for the specified user.</param>
            <returns>
            true if the password question and answer are updated successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Adds a new membership user to the data source.
            </summary>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <param name="email">The e-mail address for the new user.</param>
            <param name="passwordQuestion">The password question for the new user.</param>
            <param name="passwordAnswer">The password answer for the new user</param>
            <param name="isApproved">Whether or not the new user is approved to be validated.</param>
            <param name="providerUserKey">The unique identifier from the membership data source for the user.</param>
            <param name="status">A <see cref="T:System.Web.Security.MembershipCreateStatus"/> enumeration value indicating whether the user was created successfully.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"/> object populated with the information for the newly created user.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.DeleteUser(System.String,System.Boolean)">
            <summary>
            Removes a user from the membership data source.
            </summary>
            <param name="username">The name of the user to delete.</param>
            <param name="deleteAllRelatedData">true to delete data related to the user from the database; false to leave data related to the user in the database.</param>
            <returns>
            true if the user was successfully deleted; otherwise, false.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the e-mail address contains the specified e-mail address to match.
            </summary>
            <param name="emailToMatch">The e-mail address to search for.</param>
            <param name="pageIndex">The index of the page of results to return. <paramref name="pageIndex"/> is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"/> collection that contains a page of <paramref name="pageSize"/><see cref="T:System.Web.Security.MembershipUser"/> objects beginning at the page specified by <paramref name="pageIndex"/>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the user name contains the specified user name to match.
            </summary>
            <param name="usernameToMatch">The user name to search for.</param>
            <param name="pageIndex">The index of the page of results to return. <paramref name="pageIndex"/> is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"/> collection that contains a page of <paramref name="pageSize"/><see cref="T:System.Web.Security.MembershipUser"/> objects beginning at the page specified by <paramref name="pageIndex"/>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.GetAllUsers(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of all the users in the data source in pages of data.
            </summary>
            <param name="pageIndex">The index of the page of results to return. <paramref name="pageIndex"/> is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"/> collection that contains a page of <paramref name="pageSize"/><see cref="T:System.Web.Security.MembershipUser"/> objects beginning at the page specified by <paramref name="pageIndex"/>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.GetNumberOfUsersOnline">
            <summary>
            Gets the number of users currently accessing the application.
            </summary>
            <returns>
            The number of users currently accessing the application.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.GetPassword(System.String,System.String)">
            <summary>
              Gets the password for the specified user name from the data source.
            </summary>
            <param name = "username">The user to retrieve the password for.</param>
            <param name = "answer">The password answer for the user.</param>
            <returns>The password for the specified user name.</returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.GetUser(System.String,System.Boolean)">
            <summary>
              Gets information from the data source for a user. Provides an option to update the last-activity date/time stamp for the user.
            </summary>
            <param name = "username">The name of the user to get information for.</param>
            <param name = "userIsOnline">true to update the last-activity date/time stamp for the user; false to return user information without updating the last-activity date/time stamp for the user.</param>
            <returns>A <see cref = "T:System.Web.Security.MembershipUser" /> object populated with the specified user's information from the data source.</returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.GetUser(System.Object,System.Boolean)">
            <summary>
            Gets user information from the data source based on the unique identifier for the membership user. Provides an option to update the last-activity date/time stamp for the user.
            </summary>
            <param name="providerUserKey">The unique identifier for the membership user to get information for.</param>
            <param name="userIsOnline">true to update the last-activity date/time stamp for the user; false to return user information without updating the last-activity date/time stamp for the user.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"/> object populated with the specified user's information from the data source.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.GetUserNameByEmail(System.String)">
            <summary>
            Gets the user name associated with the specified e-mail address.
            </summary>
            <param name="email">The e-mail address to search for.</param>
            <returns>
            The user name associated with the specified e-mail address. If no match is found, return null.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.ResetPassword(System.String,System.String)">
            <summary>
            Resets a user's password to a new, automatically generated password.
            </summary>
            <param name="username">The user to reset the password for.</param>
            <param name="answer">The password answer for the specified user.</param>
            <returns>
            The new password for the specified user.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.UnlockUser(System.String)">
            <summary>
            Clears a lock so that the membership user can be validated.
            </summary>
            <param name="userName">The membership user whose lock status you want to clear.</param>
            <returns>
            true if the membership user was successfully unlocked; otherwise, false.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.UpdateUser(System.Web.Security.MembershipUser)">
            <summary>
            Updates information about a user in the data source.
            </summary>
            <param name="membershipUser">A <see cref="T:System.Web.Security.MembershipUser"/> object that represents the user to update and the updated information for the user.</param>
        </member>
        <member name="M:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.ValidateUser(System.String,System.String)">
            <summary>
            Verifies that the specified user name and password exist in the data source.
            </summary>
            <param name="username">The name of the user to validate.</param>
            <param name="password">The password for the specified user.</param>
            <returns>
            true if the specified username and password are valid; otherwise, false.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"/> on a provider after the provider has already been initialized.</exception>
        </member>
        <member name="M:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.GetConfigValue(System.String,System.String)">
            <summary>
            Helper method to get the config value or default to a set value if null or empty.
            </summary>
            <param name="configValue">The config value.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.TransformPassword(System.String,System.String@)">
            <summary>
            Transforms the password.
            </summary>
            <param name="password">The password.</param>
            <param name="salt">The salt.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.ValidateEmail(System.String,Rebel.Framework.HiveId)">
            <summary>
            Validates the email.
            </summary>
            <param name="email">The email.</param>
            <param name="excludeId">The exclude id.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.UserNameExists(System.String)">
            <summary>
            Validates the username.
            </summary>
            <param name="userName">Name of the user.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.ValidatePassword(System.String)">
            <summary>
            Validates the password.
            </summary>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.UnEncodePassword(System.String)">
            <summary>
            Uns the encode password.
            </summary>
            <param name="encodedPassword">The encoded password.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.ValidateUserInternal(Rebel.Framework.Security.Model.Entities.RebelMembershipUser,System.String)">
            <summary>
            Validates the user internal.
            </summary>
            <param name="user">The user.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.ConvertUserToMembershipUser(Rebel.Framework.Security.Model.Entities.RebelMembershipUser)">
            <summary>
            Converts the user to membership user.
            </summary>
            <param name="user">The user.</param>
            <param name="providerUserKey">The provider user key.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.ConvertUserListToMembershipCollection(System.Collections.Generic.IEnumerable{Rebel.Framework.Security.Model.Entities.RebelMembershipUser})">
            <summary>
            Converts the user list to membership collection.
            </summary>
            <param name="users">The users.</param>
            <returns></returns>
        </member>
        <member name="P:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.ApplicationName">
            <summary>
            The name of the application using the custom membership provider.
            </summary>
            <returns>The name of the application using the custom membership provider.</returns>
        </member>
        <member name="P:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.EnablePasswordReset">
            <summary>
            Indicates whether the membership provider is configured to allow users to reset their passwords.
            </summary>
            <returns>true if the membership provider supports password reset; otherwise, false. The default is true.</returns>
        </member>
        <member name="P:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.EnablePasswordRetrieval">
            <summary>
            Indicates whether the membership provider is configured to allow users to retrieve their passwords.
            </summary>
            <returns>true if the membership provider is configured to support password retrieval; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.MaxInvalidPasswordAttempts">
            <summary>
            Gets the number of invalid password or password-answer attempts allowed before the membership user is locked out.
            </summary>
            <returns>The number of invalid password or password-answer attempts allowed before the membership user is locked out.</returns>
        </member>
        <member name="P:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.MinRequiredNonAlphanumericCharacters">
            <summary>
            Gets the minimum number of special characters that must be present in a valid password.
            </summary>
            <returns>The minimum number of special characters that must be present in a valid password.</returns>
        </member>
        <member name="P:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.MinRequiredPasswordLength">
            <summary>
            Gets the minimum length required for a password.
            </summary>
            <returns>The minimum length required for a password. </returns>
        </member>
        <member name="P:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.PasswordAttemptWindow">
            <summary>
            Gets the number of minutes in which a maximum number of invalid password or password-answer attempts are allowed before the membership user is locked out.
            </summary>
            <returns>The number of minutes in which a maximum number of invalid password or password-answer attempts are allowed before the membership user is locked out.</returns>
        </member>
        <member name="P:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.PasswordFormat">
            <summary>
            Gets a value indicating the format for storing passwords in the membership data store.
            </summary>
            <returns>One of the <see cref="T:System.Web.Security.MembershipPasswordFormat"/> values indicating the format for storing passwords in the data store.</returns>
        </member>
        <member name="P:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.PasswordStrengthRegularExpression">
            <summary>
            Gets the regular expression used to evaluate a password.
            </summary>
            <returns>A regular expression used to evaluate a password.</returns>
        </member>
        <member name="P:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.RequiresQuestionAndAnswer">
            <summary>
            Gets a value indicating whether the membership provider is configured to require the user to answer a password question for password reset and retrieval.
            </summary>
            <returns>true if a password answer is required for password reset and retrieval; otherwise, false. The default is true.</returns>
        </member>
        <member name="P:Rebel.Cms.Web.Security.AbstractRebelMembershipProvider.RequiresUniqueEmail">
            <summary>
            Gets a value indicating whether the membership provider is configured to require a unique e-mail address for each user name.
            </summary>
            <returns>true if the membership provider requires a unique e-mail address; otherwise, false. The default is true.</returns>
        </member>
        <member name="T:Rebel.Cms.Web.SecuredMethodResult`1">
            <summary>
            Represents the result of a secured method execution with return value.
            </summary>
            <typeparam name="TResultType">The type of the result type.</typeparam>
        </member>
        <member name="T:Rebel.Cms.Web.SecuredMethodResult">
            <summary>
            Represents the result of a secured method execution.
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Security.AbstractRebelRoleProvider`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:AbstractRebelRoleProvider"/> class.
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Security.AbstractRebelRoleProvider`1.IsUserInRole(System.String,System.String)">
            <summary>
            Gets a value indicating whether the specified user is in the specified role for the configured applicationName.
            </summary>
            <param name="username">The user name to search for.</param>
            <param name="roleName">The role to search in.</param>
            <returns>
            true if the specified user is in the specified role for the configured applicationName; otherwise, false.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.Security.AbstractRebelRoleProvider`1.GetRolesForUser(System.String)">
            <summary>
            Gets a list of the roles that a specified user is in for the configured applicationName.
            </summary>
            <param name="username">The user to return a list of roles for.</param>
            <returns>
            A string array containing the names of all the roles that the specified user is in for the configured applicationName.
            </returns>
        </member>
        <member name="P:Rebel.Cms.Web.Security.AbstractRebelRoleProvider`1.ApplicationName">
            <summary>
            Gets or sets the name of the application to store and retrieve role information for.
            </summary>
            <returns>The name of the application to store and retrieve role information for.</returns>
        </member>
        <member name="P:Rebel.Cms.Web.Security.AbstractRebelRoleProvider`1.AppContext">
            <summary>
            Gets or sets the app context.
            </summary>
            <value>
            The app context.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Security.AbstractRebelRoleProvider`1.MembershipService">
            <summary>
            Gets or sets the membership service.
            </summary>
            <value>
            The membership service.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Security.AbstractRebelRoleProvider`1.HiveUri">
            <summary>
            Gets the hive URI.
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Security.RoleProviderAuthenticationModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpApplication"/> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application</param>
        </member>
        <member name="M:Rebel.Cms.Web.Security.RoleProviderAuthenticationModule.AuthenticateRequest(System.Object,System.EventArgs)">
            <summary>
            Authenticates the request.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rebel.Cms.Web.Security.RoleProviderAuthenticationModule.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module that implements <see cref="T:System.Web.IHttpModule"/>.
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Surface.SurfaceAttribute">
            <summary>
            Identifies a editor controller
            </summary>    
        </member>
        <member name="M:Rebel.Cms.Web.Surface.SurfaceAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>        
            <param name="id"></param>
        </member>
        <member name="T:Rebel.Cms.Web.System.CoreCmsData">
            <summary>
            A class defining the required core data that is needed for the CMS to operate
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.System.CoreCmsData.RequiredCoreSystemAttributeTypes">
            <summary>
            Returns in-built attribute type definitions with the correct render type provider and 
            pre-values setup for the CMS
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.System.CoreCmsData.RequiredCoreUserAttributeTypes">
            <summary>
            returns a list of attribute types to be installed by default that the user can use
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.System.CoreCmsData.RequiredCoreSchemas">
            <summary>
            All of the required/root schemas
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.System.CoreCmsData.RequiredCoreRootNodes">
            <summary>
            Returns all of the required entities for the CMS to operate
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.CorePluginConstants">
            <summary>
            A Constants reference for core plugin Ids and names
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Dashboards.Filters.DashboardFilter.Initialize(System.String,System.Web.Configuration.AuthorizationRuleAction)">
            <summary>
            Initialize is called after the filter is created but before running the action
            </summary>
            <param name="parameters"></param>
            <param name="action">Whether the match was allowed or denied</param>
        </member>
        <member name="T:Rebel.Cms.Web.Dashboards.Rules.DashboardMatchRule">
            <summary>
            Abstract class defining configuration match rules for dashboard views/widgets
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Dashboards.Rules.UserRoleMatchRule">
            <summary>
            Dashboard configuration match rule for matching a user's Role
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.DependencyManagement.ParameterEditorFactory">
            <summary>
            Used to resolve a ParameterEditor
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.IParameterEditorFactory">
            <summary>
            A Factory used to resolve ParameterEditors
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.FileExtensions.GetFileNameForDisplay(Rebel.Framework.Persistence.Model.IO.File)">
            <summary>
            Returns a nicely formatted file name: without extension and hyphens replaced by spaces for display
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.FileExtensions.GetFileNameWithoutExtension(Rebel.Framework.Persistence.Model.IO.File)">
            <summary>
            Returns the file name without extension
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.FileExtensions.GetFileExtension(Rebel.Framework.Persistence.Model.IO.File)">
            <summary>
            Returns the file extension
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.EntityPathCollectionExtensions.ToJson(Rebel.Framework.EntityPathCollection)">
            <summary>
            Converts an entity path collection to a JSON object
            </summary>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperRenderExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.String,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            A validation summary that lets you pass in a prefix so that the summary only displays for elements 
            containing the prefix. This allows you to have more than on validation summary on a page.
            </summary>
            <param name="htmlHelper"></param>
            <param name="prefix"></param>
            <param name="excludePropertyErrors"></param>
            <param name="message"></param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperRenderExtensions.BeginRebelForm(System.Web.Mvc.HtmlHelper,System.String,System.String)">
            <summary>
            Helper method to create a new form to execute in the Rebel request pipeline against a locally declared controller
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperRenderExtensions.BeginRebelForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
            <summary>
            Helper method to create a new form to execute in the Rebel request pipeline against a locally declared controller
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <param name="additionalRouteVals"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperRenderExtensions.BeginRebelForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Object)">
            <summary>
            Helper method to create a new form to execute in the Rebel request pipeline against a locally declared controller
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperRenderExtensions.BeginRebelForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Helper method to create a new form to execute in the Rebel request pipeline against a locally declared controller
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperRenderExtensions.BeginRebelForm(System.Web.Mvc.HtmlHelper,System.String,System.Guid)">
            <summary>
            Helper method to create a new form to execute in the Rebel request pipeline to a surface controller plugin
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="surfaceId">The surface controller to route to</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperRenderExtensions.BeginRebelForm(System.Web.Mvc.HtmlHelper,System.String,System.Guid,System.Object)">
            <summary>
            Helper method to create a new form to execute in the Rebel request pipeline to a surface controller plugin
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="surfaceId">The surface controller to route to</param>
            <param name="additionalRouteVals"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperRenderExtensions.BeginRebelForm(System.Web.Mvc.HtmlHelper,System.String,System.Guid,System.Object,System.Object)">
            <summary>
            Helper method to create a new form to execute in the Rebel request pipeline to a surface controller plugin
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="surfaceId">The surface controller to route to</param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperRenderExtensions.BeginRebelForm(System.Web.Mvc.HtmlHelper,System.String,System.Guid,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Helper method to create a new form to execute in the Rebel request pipeline to a surface controller plugin
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="surfaceId">The surface controller to route to</param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperRenderExtensions.RenderForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Mvc.FormMethod,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,System.String,System.Nullable{System.Guid},System.Object)">
            <summary>
            This renders out the form for us
            </summary>
            <param name="htmlHelper"></param>
            <param name="formAction"></param>
            <param name="method"></param>
            <param name="htmlAttributes"></param>
            <param name="surfaceController"></param>
            <param name="surfaceAction"></param>
            <param name="area"></param>
            <param name="surfaceId"></param>
            <param name="additionalRouteVals"></param>
            <returns></returns>
            <remarks>
            This code is pretty much the same as the underlying MVC code that writes out the form
            </remarks>
        </member>
        <member name="T:Rebel.Cms.Web.HtmlHelperRenderExtensions.RebelForm">
            <summary>
            Used for rendering out the Form for BeginRebelForm
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.InsertMediaPage.SetViewData(System.Web.Mvc.ViewDataDictionary)">
            <summary>
            This will set any publicly declared properties in the markup that match the name of a dynamic property in the dynamic model
            </summary>
            <param name="viewData"></param>
        </member>
        <member name="T:Rebel.Cms.Web.IO.AbstractIconFileResolver">
            <summary>
            Abstract resolver to find icons/images and return a list of Icon objects
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.IO.FileResolver`1">
            <summary>
              Abstract class to resolve object based on the file system
            </summary>
            <typeparam name = "T"></typeparam>
        </member>
        <member name="T:Rebel.Cms.Web.IResolver`1">
            <summary>
            A simple interface to resolve a list of items
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Rebel.Cms.Web.IPropertyEditorFactory">
            <summary>
            A Factory used to resolve PropertyEditors
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.LinqSupport.ViewModelStructureBinder">
            <summary>
            Provides a mechanism to assess certain types of expression and determine whether they are supported by the expression binding provider. 
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Rebel.Cms.Web.LinqSupport.ViewModelStructureBinder.CreateFieldSelector(System.Linq.Expressions.MethodCallExpression,Rebel.Framework.Linq.CriteriaGeneration.StructureMetadata.BindingSignatureSupport)">
            <summary>
            Creates a <see cref="T:Rebel.Framework.Linq.CriteriaGeneration.Expressions.FieldSelectorExpression"/> from a <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.
            </summary>
            <param name="expression">The expression.</param>
            <param name="reportedSignatureSupport">A component outlining the supported expression structure of this provider.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Rebel.Cms.Web.LinqSupport.ViewModelStructureBinder.CreateFieldSelector(System.String,System.String,Rebel.Framework.Linq.CriteriaGeneration.StructureMetadata.BindingSignatureSupport)">
            <summary>
            Creates a field selector.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="innerFieldName">Name of the inner field.</param>
            <param name="reportedSignatureSupport">The reported signature support.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.LinqSupport.ViewModelStructureBinder.IsSupportedMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            Determines whether the expression represents a supported member access call.
            </summary>
            <param name="expression">The expression.</param>
            <remarks></remarks>
        </member>
        <member name="T:Rebel.Cms.Web.Macros.MacroSerializer">
            <summary>
            A class used to serialize/deserialize a macro
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Mapping.DataTypeToAttributeType`1">
            <summary>
            Maps a DataType or DataTypeEditorModel to an AttributeType
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Mapping.DocumentTypePropertyToAttributeGroup">
            <summary>
            Maps from a DocumentTypeProperty to an AttributeGroup
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Mapping.DocumentTypeToNewContentModel`1">
            <summary>
            Used to map a *New* BasicContentEditorModel type from a DocumentTypeEditorModel
            </summary>
            <typeparam name="TTarget"></typeparam>
        </member>
        <member name="T:Rebel.Cms.Web.Mapping.UtcCreatedMapper">
            <summary>
            Returns the UtcCreated of the Timestamped model if it is not default(DateTimeOffset), otherwise returns UtcNow
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.MenuItemExtensions.GetItem``1(System.Collections.Generic.IEnumerable{System.Lazy{Rebel.Cms.Web.Model.BackOffice.Trees.MenuItem,Rebel.Cms.Web.Model.BackOffice.Trees.MenuItemMetadata}})">
            <summary>
            Returns a menu item and it's meta data based on a menu item type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="menuItems"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Model.Node.#ctor(Rebel.Framework.Data.Common.IConcurrencyToken,Rebel.Framework.HiveId)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebel.Cms.Web.Model.Node"/> class. This constructor is designed to be used for helping an instance verify whether the related
            data entity has changed between population and re-saving, if ever attempted.
            </summary>
            <param name="concurrencyToken">The concurrency token.</param>
            <param name="id">The id.</param>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.ApplicationTrayModel">
            <summary>
            Used to generate the applications icons/links
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.ApplicationTrayModel.DashboardUrl">
            <summary>
            The dashboard URL for the application
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.ApplicationTrayModel.TreeModel">
            <summary>
            A model representing the tree to load
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.BackOfficeDefaultModel">
            <summary>
            The data model supplied to the default back office application
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.BackOfficeDefaultModel.TreeModel">
            <summary>
            The default dashboard editor to render
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.BackOfficeDefaultModel.MenuItems">
            <summary>
            All available menu items to render their definitions
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.ControllerPluginMetadata">
            <summary>
            Represents a base class for controller plugin meta data classes to inherit from
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.ControllerPluginMetadata.ControllerName">
            <summary>
            The controller name of the editor (without the 'Controller' suffix)
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.AllowDocumentTypePropertyOverrideAttribute">
            <summary>
            Marks a Pre value property as overridable at the Document Type property level
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.ClientNotifications">
            <summary>
            Manages the notifications shown in the back-office to administrators
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.ClientNotifications.#ctor(System.Web.Mvc.ControllerContext)">
            <summary>
            Constructor
            </summary>
            <param name="controllerContext">The temp data provider to put data in</param>
        </member>
        <member name="F:Rebel.Cms.Web.Model.BackOffice.Editors.ClientNotifications._messages">
            <summary>
            the internal unique collection of messages
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.ClientNotifications.Add(Rebel.Cms.Web.Model.BackOffice.Editors.NotificationMessage)">
            <summary>
            Adds a notification message to the stack
            </summary>
            <param name="notificationMessage"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.ClientNotifications.Remove(System.Guid)">
            <summary>
            Removes a notification message from the stack based on it's id
            </summary>
            <param name="notificationId"></param>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.ClientNotificationsJsonConverter">
            <summary>
            Custom JSON converter for ClientNotifications
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.ContentEditorModel">
            <summary>
            The model to render the content editor
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.ContentEditorModel.DocumentLinks">
            <summary>
            A list of 'NiceUrls' to display
            </summary>
            <remarks>
            This allows for multiple URLs based on domain
            </remarks>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.ContentProperty">
            <summary>
            Represents a proeprty of a content/media model
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.ContentProperty.#ctor(Rebel.Framework.HiveId,Rebel.Cms.Web.Model.BackOffice.Editors.DocumentTypeProperty,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            constructor for creating a property that has a multi-value
            </summary>
            <param name="id"></param>
            <param name="docTypeProperty">The DocumentTypeProperty associated with this content property</param>
            <param name="propertyValue">The value of the property, used to set the values of the editor model</param>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.ContentProperty.#ctor(Rebel.Framework.HiveId,Rebel.Cms.Web.Model.BackOffice.Editors.DocumentTypeProperty,System.String)">
            <summary>
            Constructor for creating a property that has a single string value
            </summary>
            <param name="id"></param>
            <param name="docTypeProperty"></param>
            <param name="propertyValue">The string value of the property</param>
            <remarks>
            This will create a new Dictionary object to put the value in with a key of "Value"
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.ContentProperty.#ctor(Rebel.Framework.HiveId,Rebel.Cms.Web.Model.BackOffice.Editors.DocumentTypeProperty,System.Int32)">
            <summary>
            Constructor for creating a property that has a single int value
            </summary>
            <param name="id"></param>
            <param name="docTypeProperty"></param>
            <param name="propertyValue">The int value of the property</param>
            <remarks>
            This will create a new Dictionary object to put the value in with a key of "Value"
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.ContentProperty.#ctor(Rebel.Framework.HiveId,Rebel.Cms.Web.Model.BackOffice.Editors.DocumentTypeProperty,System.Boolean)">
            <summary>
            Constructor for creating a property that has a single bool value
            </summary>
            <param name="id"></param>
            <param name="docTypeProperty"></param>
            <param name="propertyValue">The value of the property</param>
            <remarks>
            This will create a new Dictionary object to put the value in with a key of "Value"
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.ContentProperty.#ctor(Rebel.Framework.HiveId,Rebel.Cms.Web.Model.BackOffice.Editors.DocumentTypeProperty,System.Decimal)">
            <summary>
            Constructor for creating a property that has a single decimal value
            </summary>
            <param name="id"></param>
            <param name="docTypeProperty"></param>
            <param name="propertyValue">The value of the property</param>
            <remarks>
            This will create a new Dictionary object to put the value in with a key of "Value"
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.ContentProperty.#ctor(Rebel.Framework.HiveId,Rebel.Cms.Web.Model.BackOffice.Editors.DocumentTypeProperty,System.Double)">
            <summary>
            Constructor for creating a property that has a single double value
            </summary>
            <param name="id"></param>
            <param name="docTypeProperty"></param>
            <param name="propertyValue">The value of the property</param>
            <remarks>
            This will create a new Dictionary object to put the value in with a key of "Value"
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.ContentProperty.OnMetadataCreated(System.Web.Mvc.ModelMetadata)">
            <summary>
            When implemented in a class, provides metadata to the model metadata creation process.
            </summary>
            <param name="metadata">The model metadata.</param>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.ContentProperty.Name">
            <summary>
            Override name to be declared readonly
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.ContentProperty.SortOrder">
            <summary>
            Gets or sets the sort order.
            </summary>
            <value>
            The sort order.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.ContentProperty.TabId">
            <summary>
            Gets or sets the tab id.
            </summary>
            <value>
            The tab id.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.ContentProperty.TabAlias">
            <summary>
            Gets or sets the tab id.
            </summary>
            <value>
            The tab id.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.ContentProperty.Alias">
            <summary>
            Gets or sets the alias.
            </summary>
            <value>
            The alias.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.ContentProperty.DocTypeProperty">
            <summary>
            Gets the doc type property.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.ContentProperty.DocTypePropertyId">
            <summary>
            Gets the doc type property id.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.ContentProperty.PropertyEditorModel">
            <summary>
            Returns the property editor model used to render the editor for this property
            </summary>
            <remarks>
            The property editor model is returned from the <see cref="T:Rebel.Cms.Web.Model.BackOffice.Editors.EditorModel"/> GetEditorModel method
            </remarks>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.CopyModel">
            <summary>
            A model representing copying a node
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.MoveModel">
            <summary>
            A model representing moving a node
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.CreateContentModel">
            <summary>
            Used to render the create content dialog
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.CreateContentModel.ParentId">
            <summary>
            The parent node to create content under
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.CreateContentModel.Name">
            <summary>
            the name of the new content item
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.CreateContentModel.SelectedDocumentTypeId">
            <summary>
            The selected document  type
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.CreateContentModel.NoticeBoard">
            <summary>
            Used to display important messages about the node
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.CreateDataTypeModel">
            <summary>
            Model representing the create new wizard view for a data type
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.CreateDocumentTypeModel">
            <summary>
            Used to render the create document type dialog
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.CreateUserModel">
            <summary>
            Model representing the create new wizard view for a user
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.DataType">
            <summary>
            Represents a data type which refrences a PropertyEditor
            </summary>
            <remarks>
            This does not represent the DataType editor model
            </remarks>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.EntityUIModel">
            <summary>
            Represents a basic Rebel UI model with tabs
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.EntityUIModel.Tabs">
            <summary>
            Tabs used to organize editing
            </summary>        
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.DataType.#ctor(Rebel.Framework.HiveId,System.String,System.String,System.Object,System.String)">
            <summary>
            Creates a data type
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="alias"></param>
            <param name="propertyEditor">The PropertyEditor associated with the DataType</param>
            <param name="preValues">The pre values stored in the repository for the DataType</param>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.DataType.#ctor(System.String,System.String,System.Object)">
            <summary>
            Creates a new data type
            </summary>
            <param name="name"></param>
            <param name="alias"></param>
            <param name="propertyEditor">The PropertyEditor associated with the DataType</param>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.DataType.GetEditorModel">
            <summary>
            Returns the PropertyEditor model used to render out the content editor
            for this data type and ensures that the prevalues stored in the repository against both the 
            data type and document type property are passed into the editor so it can be configured.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.DataType.GetPreValueModel">
            <summary>
            Represents the pre-value model used to render the pre value editor for this DataType
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.DataType.PropertyEditor">
            <summary>
            Returns the PropertyEditor associated with this DataType as a <code>dynamic</code> object
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.DataType.PropertyEditorPackage">
            <summary>
            Returns the package name that the PropertyEditor belongs to
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.DataType.Alias">
            <summary>
            Alias gets mapped from the persistence models, alias is required as a unique identifier for each DataType however
            this is a readonly property since it gets generated automatically from the Name property.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.DataType.InternalPropertyEditor">
            <summary>
            Returns the PropertyEditor associated with this DataType
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.DataType.Prevalues">
            <summary>
            The serialized pre values associated with this data type
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.DataTypeEditorModel">
            <summary>
            The model representing a data type
            </summary>
            <remarks>
            We exclude the PreValueEditorModel from being bound because we manually bind it
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.DataTypeEditorModel.HasEditableProperties">
            <summary>
            A helper methods use to check if the pre value model has editable properties
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.DataTypeEditorModel.BindModel(Rebel.Cms.Web.Model.BackOffice.IModelUpdator)">
            <summary>
            Bind the model
            </summary>
            <param name="modelUpdator"></param>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.DataTypeEditorModel.Alias">
            <summary>
            Alias gets mapped from the persistence models, alias is required as a unique identifier for each DataType however
            this is a readonly property since it gets generated automatically from the Name property.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.DataTypeEditorModel.PreValueEditorModel">
            <summary>
            The model representing the editor for the pre values
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.DataTypeEditorModel.PropertyEditorId">
            <summary>
            The Id of the selected PropertyEditor for this DataType
            </summary>          
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.DocumentTypeEditorModel">
            <summary>
            Respresents the view model used to render the document type editor
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.DocumentTypeEditorModel.#ctor(Rebel.Framework.HiveId)">
            <summary>
            initialize collections so they are never null
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.DocumentTypeEditorModel.#ctor">
            <summary>
            initialize collections so they are never null
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.DocumentTypeEditorModel.DefaultTemplateId">
            <summary>
            The default template to use for this doc type
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.DocumentTypeEditorModel.AllowedTemplateIds">
            <summary>
            List of all of the selected allowed template Ids
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.DocumentTypeEditorModel.AllowedTemplates">
            <summary>
            A list of allowed templates check box list
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.DocumentTypeInfo">
            <summary>
            Represents some basic presentation information for a document type, mostly used in drop down lists, etc...
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.DocumentTypeProperty">
            <summary>
            Defines a Document Type property
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.DocumentTypeProperty.#ctor(Rebel.Framework.HiveId,Rebel.Cms.Web.Model.BackOffice.Editors.DataType)">
            <summary>
            Constructor to setup an existing DocumentTypeProperty from a DataType
            </summary>
            <param name="id"></param>
            <param name="dataType"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.DocumentTypeProperty.#ctor(Rebel.Cms.Web.Model.BackOffice.Editors.DataType)">
            <summary>
            Constructor to setup an existing DocumentTypeProperty from a DataType
            </summary>
            <param name="dataType"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.DocumentTypeProperty.#ctor">
            <summary>
            Constructor to create a new document type property
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.DocumentTypeProperty.GetEditorModel">
            <summary>
            Returns the editor model for the content node based on this Doc Type property which may contain
            overridden Pre-Values that were specified on the Data Type
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.DocumentTypeProperty.SchemaId">
            <summary>
            Gets or sets the schema id.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.DocumentTypeProperty.SchemaName">
            <summary>
            Gets or sets the schema name.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.DocumentTypeProperty.DataType">
            <summary>
            The underlying DataType object used to create this model
            </summary>
            <remarks>
            Settings this property will re-initialize the OverriddenPreVaules, DataTypeId and the PreValueEditor
            </remarks>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.DocumentTypeProperty.Alias">
            <summary>
            The alias for the doc type property
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.DocumentTypeProperty.DataTypeId">
            <summary>
            The DataType Id for the doc type property
            </summary>
            <remarks>
            This property is marked settable for use with model binding, generally this property shouldn't be set manually otherwise,
            This property will be set by specifying a DataType.
            </remarks>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.DocumentTypeProperty.TabId">
            <summary>
            The tab id that the doc type property will exist on
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.DocumentTypeProperty.TabAlias">
            <summary>
            The tab alias that the doc type property will exist on
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.DocumentTypeProperty.Description">
            <summary>
            The description of the doc type property
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.DocumentTypeProperty.SortOrder">
            <summary>
            The order in which the properties appear
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.DocumentTypeProperty.PreValueEditor">
            <summary>
            The prevalue model associated with the Property editor used to display it's properties that are attributed with AllowDocumentTypePropertyOverrideAttribute
            </summary>
            <remarks>
            <para>
            An example of this usage is that the text box Property Editor contains 2 pre-values: a regular expression to validate the input and a boolean of whether or not the vaue is required.
            </para>
            <para>
            Since an Rebel administrator may want to use the same Data Type for different properties of a Document Type, it would be nicer to modify if this property is required or not instead of having
            to create multipe Data Types to support this.
            </para>
            </remarks>
        </member>
        <member name="T:Rebel.Cms.Web.Editors.EditorAttribute">
            <summary>
            Identifies a editor controller
            </summary>    
        </member>
        <member name="M:Rebel.Cms.Web.Editors.EditorAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>        
            <param name="id"></param>
        </member>
        <member name="P:Rebel.Cms.Web.Editors.EditorAttribute.HasChildActionDashboards">
            <summary>
            Flag to advertise that this editor controller has child actions to be used for dashboards
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Editors.EditorMetadata.IsInternalRebelEditor">
            <summary>
            Whether or not this is an built-in Rebel editor
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Editors.EditorMetadata.HasChildActionDashboards">
            <summary>
            Flag to advertise if this Editor controller exposes child action dashboards
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.FileEditorModel">
            <summary>
            Represents a model for a script editor
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.HostnameEntryModel">
            <summary>
            A view model representing one hostname
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.HostnameEntryModel.Id">
            <summary>
            The ID of the hostname entity
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.HostnamesModel">
            <summary>
            A view model representing hostnames assigned to an entity
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.HostnamesModel.Id">
            <summary>
            The ID of the content node to assign hostnames
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.HostnamesModel.VirtualDirectory">
            <summary>
            The current application path
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Macros.MacroDefinition">
            <summary>
            Represents the basic definition of a macro which defines the macro type and the macro item/file to render
            </summary>    
        </member>
        <member name="P:Rebel.Cms.Web.Macros.MacroDefinition.MacroEngineName">
            <summary>
            The MacroEngine type/name to execute the macro
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Macros.MacroDefinition.SelectedItem">
            <summary>
            Represents the selected file/item to run the macro
            </summary>     
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.MacroEditorModel">
            <summary>
            The model representing a macro
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.MacroEditorModel.AvailableMacroItems">
            <summary>
            A list of SelectLists containing all available macro items for each macro engine
            </summary>
            <remarks>
            The Tuple contains the MacroEngineName and its available renderable items
            </remarks>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.MacroEditorModel.SelectedItem">
            <summary>
            Represents the selected file/item to run the macro
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.MacroEditorModel.Id">
            <summary>
            The Id of the macro which equates to it's file name
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.MacroEditorModel.MacroParameters">
            <summary>
            The list of macro parameters
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.MacroEditorModel.Alias">
            <summary>
            The alias is determined by the name and is used as the file name
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.MacroEditorModel.ActiveTabIndex">
            <summary>
            The tab to display
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.MacroParameterDefinitionModel">
            <summary>
            The model representing a macro parameter
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.MacroParameterDefinitionModel.Show">
            <summary>
            Whether or not to show the parameter editable when inserting into Rich text editor
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.MacroParameterDefinitionModel.Alias">
            <summary>
            The alias of the parameter
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.MacroParameterDefinitionModel.Name">
            <summary>
            The name of the parameter
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.MacroParameterDefinitionModel.ParameterEditorId">
            <summary>
            The editor Id to display when inserting parameter into Rich text editor
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.MacroParameterModel.OnMetadataCreated(System.Web.Mvc.ModelMetadata)">
            <summary>
            When implemented in a class, provides metadata to the model metadata creation process.
            </summary>
            <param name="metadata">The model metadata.</param>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.MacroParameterModel.Alias">
            <summary>
            The alias of the parameter
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.MacroParameterModel.Name">
            <summary>
            The name of the parameter
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.MacroParameterModel.ParameterEditorModel">
            <summary>
            The parameter editor model of the parameter
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.NotificationMessage">
            <summary>
            Represents a notification sent to the admin in the back-office
            </summary>    
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.NotificationMessage.#ctor(System.String,System.String,Rebel.Cms.Web.Model.BackOffice.Editors.NotificationType)">
            <summary>
            Constructor with message and type
            </summary>
            <param name="msg"></param>
            <param name="title"></param>
            <param name="type"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.NotificationMessage.#ctor(System.String,System.String)">
            <summary>
            Constructor with message, notification type defaults to Info
            </summary>
            <param name="msg"></param>
            <param name="title"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.NotificationMessage.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.NotificationMessage.Equals(System.Object)">
            <summary>
            Override equals operator as messages will be the same with the same id
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Editors.NotificationMessage.GetHashCode">
            <summary>
            Override GetHashCode as messages will be the same with the same id
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.NotificationMessage.Type">
            <summary>
            The type of notification to send to the UI
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.NotificationMessage.Message">
            <summary>
            The message to display
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.NotificationMessage.Title">
            <summary>
            The title to display for the message
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.NotificationMessage.Id">
            <summary>
            The Id assigned to the notification when created
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.PublishModel">
            <summary>
            Model representing the publish dialog
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.SortItem">
            <summary>
            Model representing an item in the sort editor
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.SortModel">
            <summary>
            Model representing the content sort editor
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.Tab.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.Tab.SchemaId">
            <summary>
            Gets or sets the schema id.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.Tab.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.Tab.Alias">
            <summary>
            Gets or sets the alias.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.Tab.SortOrder">
            <summary>
            Gets or sets the sort order.
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Editors.TemplateEditorModel">
            <summary>
            Represents the editor model when creating/editing a tempalte
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Editors.RebelEditorAttribute">
            <summary>
            Identifies a default Rebel editor that is shipped with the framework
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.UserGroupEditorModel.ParentId">
            <summary>
            Parent is always the UserVirtualRoot
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.UserGroupEditorModel.Name">
            <summary>
            Override the 'Name' property to lookup/retreive from the Name dynamic property of this object
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Editors.UserGroupEditorModel.Permissions">
            <summary>
            Gets or sets the permissions.
            </summary>
            <value>
            The permissions.
            </value>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.IModelUpdator">
            <summary>
            Interface for adding the ability to update a model with new data (i.e. - from a form post)
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.IModelUpdator.BindModel(System.Object,System.String)">
            <summary>
            Updates the specified model.
            </summary>
            <param name="model">The model.</param>
            <param name="fieldPrefix">The field prefix.</param>
        </member>
        <member name="F:Rebel.Cms.Web.Model.BackOffice.LoginDisplayType.StandardPage">
            <summary>
            Displays the standard login page even if in the content frame
            </summary>
        </member>
        <member name="F:Rebel.Cms.Web.Model.BackOffice.LoginDisplayType.DisplayingOverlay">
            <summary>
            Used when showing the login overlay to ensure the successful result page clears the overlay
            </summary>
        </member>
        <member name="F:Rebel.Cms.Web.Model.BackOffice.LoginDisplayType.ShowOverlay">
            <summary>
            Used when an auth timeout occurs when selecting a tree node and the login overlay should be displayed, the 
            content frame will remain empty.
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.PackageFolder">
            <summary>
            Defines a package found in the plugins packages folder
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.PackageFolder.Name">
            <summary>
            The name of the package
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.PackageFolder.IsNugetInstalled">
            <summary>
            Returns true if the package has been installed by Nuget, this is determined if there is a nupkg file in existence there
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.PackageModel.IsPackageInstalled">
            <summary>
            true if this package id is installed, regardless of version
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.PackageModel.IsLatestVersion">
            <summary>
            If this package is the latest available version
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.PackageModel.IsVersionInstalled">
            <summary>
            true if the current version of the package is installed
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.ParameterEditors.AbstractParameterEditor.#ctor(Rebel.Cms.Web.IPropertyEditorFactory)">
            <summary>
            Constructor for a ParameterEditor
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.ParameterEditors.EditorModel.GetSerializedValue">
            <summary>
            Gets the serialized value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.ParameterEditors.EditorModel.SetModelValue(System.String)">
            <summary>
            Sets the model value.
            </summary>
            <param name="serializedVal">The serialized val.</param>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.ParameterEditors.EditorModel.PropertyEditorModelValueKey">
            <summary>
            Gets the property editor model value key.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.ParameterEditors.EditorModel.PropertyEditorModel">
            <summary>
            Gets the property editor model.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.ParameterEditors.EditorModel.ShowRebelLabel">
            <summary>
            A flag determining if the editor rendered shows the Rebel standard field label, or
            if this model's editor will occupy the area where the label generally exists such as the rich text editor.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.ParameterEditors.EditorModel.MetaData">
            <summary>
            Returns the meta data for the current editor model
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.ParameterEditors.ParameterEditorAttribute">
            <summary>
            Defines a ParameterEditor
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.ParameterEditors.ParameterEditorAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.ParameterEditors.ParameterEditorAttribute.Alias">
            <summary>
            Gets or sets the alias.
            </summary>
            <value>The alias.</value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.ParameterEditors.ParameterEditorAttribute.PropertyEditorId">
            <summary>
            Flag determining if this property editor is used to edit content
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.ParameterEditors.ParameterEditorMetadata.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.ParameterEditors.ParameterEditorMetadata.Alias">
            <summary>
            Gets or sets the alias.
            </summary>
            <value>The alias.</value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.ParameterEditors.ParameterEditorMetadata.PropertyEditorId">
            <summary>
            Gets or sets the property editor id.
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.BlankPreValueModel">
            <summary>
            A class representing a blank, null or empty pre-value editor. 
            </summary>
            <remarks>
            This class can be used for Property Editors who do not define a Pre value editor
            </remarks>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.PreValueModel">
            <summary>
            Abstract class representing a Property Editor's model to render it's Pre value editor
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.PreValueModel.GetValueDefinitions">
            <summary>
            Returns a collection of PreValueDefinition objects, each representing an individual value to be saved.
            </summary>
            <returns></returns>
            <remarks>
            This collection will be turned in to the string returned for the result of GetSerializedValue()
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.PreValueModel.GetSerializedValue">
            <summary>
            Return a serialized string of values for the pre value editor model
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.PreValueModel.SetModelPropertyValue(Rebel.Cms.Web.Model.BackOffice.PropertyEditors.PreValueDefinition,System.Action{System.Object})">
            <summary>
            Called to set each model property value from the serialized value when SetModelValues is called.
            </summary>
            <remarks>
            This allows devs to do any custom processing on the value before it is set if they are not 
            implementing their own custom serialization.
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.PreValueModel.SetModelValues(System.String)">
            <summary>
            called by the subsystem to load the values from the data store into the model
            </summary>
            <param name="serializedVal"></param>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.PreValueModel.MetaData">
            <summary>
            Returns the meta data for the current pre value model
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.ContentAwarePropertyEditor`1">
            <summary>
            Abstract property editor class to inherit from if the editor requires the currently rendering content properties if they are available
            and does not require a pre value model
            </summary>
            <typeparam name="TEditorModel"></typeparam>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.ContentAwarePropertyEditor`2">
            <summary>
            Abstract property editor class to inherit from if the editor requires the currently rendering content properties if they are available
            </summary>
            <typeparam name="TEditorModel"></typeparam>
            <typeparam name="TPreValueModel"></typeparam>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.PropertyEditor`2">
            <summary>
            Abstract class that all Property editors should inherit from
            </summary>
            <typeparam name="TEditorModel"></typeparam>
            <typeparam name="TPreValueModel"></typeparam>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.PropertyEditor">
            <summary>
            Abstract class representing a property editor
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.PropertyEditor.#ctor">
            <summary>
            Constructor for a PropertyEditor
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.PropertyEditor`2.CreateEditorModel(`1)">
            <summary>
            Returns the editor model to be used for the property editor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.PropertyEditor`2.CreatePreValueEditorModel">
            <summary>
            Returns the editor model to be used for the prevalue editor
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.IContentAwarePropertyEditor">
            <summary>
            Interface specifically used for type checking   
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.ContentAwarePropertyEditor`2.Rebel#Cms#Web#Model#BackOffice#PropertyEditors#IContentAwarePropertyEditor#SetDocumentType(Rebel.Cms.Web.Model.BackOffice.Editors.DocumentTypeEditorModel)">
            <summary>
            Sets the document type.
            </summary>
            <param name="docType">document type.</param>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.ContentAwarePropertyEditor`2.Rebel#Cms#Web#Model#BackOffice#PropertyEditors#IContentAwarePropertyEditor#SetContentProperty(Rebel.Cms.Web.Model.BackOffice.Editors.ContentProperty)">
            <summary>
            Sets the content property.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.ContentAwarePropertyEditor`2.Rebel#Cms#Web#Model#BackOffice#PropertyEditors#IContentAwarePropertyEditor#SetContentItem(Rebel.Cms.Web.Model.BackOffice.Editors.BasicContentEditorModel)">
            <summary>
            Sets the content item.
            </summary>
            <param name="contentItem">The content item.</param>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.ContentAwarePropertyEditor`2.GetDocumentTypeValue``1(System.Linq.Expressions.Expression{System.Func{Rebel.Cms.Web.Model.BackOffice.Editors.DocumentTypeEditorModel,``0}},``0)">
            <summary>
            Gets the document type value.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propSelector">The prop selector.</param>
            <param name="ifNullOrUnavailable">If null or unavailable.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.ContentAwarePropertyEditor`2.GetContentPropertyValue``1(System.Linq.Expressions.Expression{System.Func{Rebel.Cms.Web.Model.BackOffice.Editors.ContentProperty,``0}},``0)">
            <summary>
            The method to call to access the properties of the currently rendering ContentProperty
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="propSelector"></param>
            <param name="ifNullOrUnavailable"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.ContentAwarePropertyEditor`2.GetContentModelValue``1(System.Linq.Expressions.Expression{System.Func{Rebel.Cms.Web.Model.BackOffice.Editors.BasicContentEditorModel,``0}},``0)">
            <summary>
            The method to call to access the properties of the currently rendering BasicContentEditorModel
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="propSelector"></param>
            <param name="ifNullOrUnavailable">The value to return if the property value or the Content item itself is null</param>
            <returns></returns>
            <remarks>
            The content item will be null if property editor is rendering for new unsaved content
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.ContentAwarePropertyEditor`2.GetContentModelValue``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            The method to call to access the properties of the currently rendering BasicContentEditorModel
            </summary>
            <typeparam name="TContentModel">The expected content model of the currently rendering content item</typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="propSelector"></param>
            <param name="ifNullOrUnavailable">The value to return if the property value or the Content item itself is null</param>
            <returns></returns>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.ContentAwarePropertyEditor`2.IsDocumentTypeAvailable">
            <summary>
            Gets a value indicating whether this instance is rendering in the context of a Document type
            </summary>
            <value>
            	<c>true</c> if this instance has a document type available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.ContentAwarePropertyEditor`2.IsContentPropertyAvailable">
            <summary>
            Returns true if the property editor is rendering in the context of a ContentProperty
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.ContentAwarePropertyEditor`2.IsContentModelAvailable">
            <summary>
            Returns true if the property editor is rendering in the context of a BasicContentEditorModel
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.EditorModel">
            <summary>
            An abstract class representing the model to render a Property Editor's content editor
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.EditorModel.GetSerializedValue">
            <summary>
            Returns the serialized value for the PropertyEditor
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.EditorModel.ShowRebelLabel">
            <summary>
            A flag determining if the editor rendered shows the Rebel standard field label, or
            if this model's editor will occupy the area where the label generally exists such as the rich text editor.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.EditorModel.MetaData">
            <summary>
            Returns the meta data for the current editor model
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.EditorModel.UIElements">
            <summary>
            Gets a list of UI Elements for the property editor.
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.EditorModel`1">
            <summary>
            An abstract class representing the model to render a Property Editor's content editor with PreValues
            </summary>
            <typeparam name="TPreValueModel">The type of the PreValue model.</typeparam>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.EditorModel`1.#ctor(`0)">
            <summary>
            Constructor
            </summary>
            <param name="preValues">The pre value options used to construct the editor</param>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.EditorModel`1.PreValueModel">
            <summary>
            The pre value options used to configure the editor
            </summary>
            <value>The pre value model.</value>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.PropertyEditorAttribute">
            <summary>
            Defines a PropertyEditor
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.PropertyEditorAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.PropertyEditorAttribute.Alias">
            <summary>
            Gets or sets the alias.
            </summary>
            <value>The alias.</value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.PropertyEditorAttribute.IsContentPropertyEditor">
            <summary>
            Flag determining if this property editor is used to edit content
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.PropertyEditorAttribute.IsParameterEditor">
            <summary>
            Flag determining if this property editor is used to edit parameters
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.PropertyEditorMetadata.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.PropertyEditorMetadata.Alias">
            <summary>
            Gets or sets the alias.
            </summary>
            <value>The alias.</value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.PropertyEditorMetadata.IsInternalRebelEditor">
            <summary>
            Whether or not this is a built-in Rebel editor
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.PropertyEditorMetadata.IsContentPropertyEditor">
            <summary>
            Flag determining if this property editor is used to edit content
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.PropertyEditorMetadata.IsParameterEditor">
            <summary>
            Flag determining if this property editor is used to edit parameters
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.PropertyEditor`1">
            <summary>
            Abstract class that Property editors should inherit from that don't require a pre-value editor
            </summary>
            <typeparam name="TEditorModel"></typeparam>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.PropertyEditors.RebelPropertyEditorAttribute">
            <summary>
            Identifies an internal property editor that is not to be shown in the property editor drop down list
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.SearchModel.SearchText">
            <summary>
            The text to search for
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.SearchModel.TreeId">
            <summary>
            Which tree to search on
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.SearchResultItem.Id">
            <summary>
            The string representation of the ID, used for Web responses
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.SearchResultItem.Title">
            <summary>
            The name/title of the search result item
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.SearchResultItem.Rank">
            <summary>
            The rank of the search result
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.SearchResultItem.Description">
            <summary>
            Description/Synopsis of the item
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.ShowLabelAttribute">
            <summary>
            Attribute determining whether or not to hide/show the label of a property
            </summary>
            <remarks>
            This directly affects the meta data property: HideSurroundingHtml
            </remarks>
        </member>
        <member name="P:Rebel.Cms.Web.Surface.SurfaceMetadata.HasChildActionMacros">
            <summary>
            Flag to advertise if this Surface controller can part take in Surface child view macros
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.TinyMCE.InsertMacro.InsertMacroModel.IsNew">
            <summary>
            Gets or sets a value indicating whether this instance is new.
            </summary>
            <value>
              <c>true</c> if this instance is new; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.TinyMCE.InsertMacro.InsertMacroModel.ContentId">
            <summary>
            Gets or sets the content id.
            </summary>
            <value>
            The content id.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.TinyMCE.InsertMacro.InsertMacroModel.InlineMacroId">
            <summary>
            The Id that the client side generates for the inline macro inside of the RTE, this is to determine different macro entries since many entires can exist with the same alias
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.TinyMCE.InsertMacro.InsertMacroModel.MacroAlias">
            <summary>
            Gets or sets the macro alias.
            </summary>
            <value>
            The macro alias.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.TinyMCE.InsertMacro.InsertMacroModel.MacroParameters">
            <summary>
            Gets or sets the macro parameters.
            </summary>
            <value>
            The macro parameters.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.TinyMCE.InsertMacro.SelectMacroModel.IsNew">
            <summary>
            Gets or sets a value indicating whether this instance is new.
            </summary>
            <value>
              <c>true</c> if this instance is new; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.TinyMCE.InsertMacro.SelectMacroModel.ContentId">
            <summary>
            Gets or sets the content id.
            </summary>
            <value>
            The content id.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.TinyMCE.InsertMacro.SelectMacroModel.MacroAlias">
            <summary>
            Gets or sets the macro alias.
            </summary>
            <value>
            The macro alias.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.TinyMCE.InsertMacro.SelectMacroModel.AvailableMacroItems">
            <summary>
            Gets or sets the available macro items.
            </summary>
            <value>
            The available macro items.
            </value>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.TinyMCE.InsertMacro.SetParametersModel.BindModel(Rebel.Cms.Web.Model.BackOffice.IModelUpdator)">
            <summary>
            Binds the model with the IUpdator
            </summary>
            <param name="modelUpdator"></param>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.TinyMCE.InsertMacro.SetParametersModel.IsNew">
            <summary>
            Gets or sets a value indicating whether this instance is new.
            </summary>
            <value>
              <c>true</c> if this instance is new; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.TinyMCE.InsertMacro.SetParametersModel.ContentId">
            <summary>
            Gets or sets the content id.
            </summary>
            <value>
            The content id.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.TinyMCE.InsertMacro.SetParametersModel.InlineMacroId">
            <summary>
            The Id that the client side generates for the inline macro inside of the RTE, this is to determine different macro entries since many entires can exist with the same alias
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.TinyMCE.InsertMacro.SetParametersModel.MacroAlias">
            <summary>
            Gets or sets the macro alias.
            </summary>
            <value>
            The macro alias.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.TinyMCE.InsertMacro.SetParametersModel.MacroParameters">
            <summary>
            Gets or sets the macro parameters.
            </summary>
            <value>
            The macro parameters.
            </value>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.TreePickerRenderModel">
            <summary>
            A model representing a tree picker
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.TreePickerRenderModel.Id">
            <summary>
            The ID of the tree picker input field
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.TreePickerRenderModel.Name">
            <summary>
            The Name of the tree picker input field
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.TreePickerRenderModel.SelectedValue">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.TreePickerRenderModel.SelectedText">
            <summary>
            Gets or sets the label.
            </summary>
            <value>
            The label.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.TreePickerRenderModel.TreeControllerId">
            <summary>
            Gets or sets the tree controller id.
            </summary>
            <value>
            The tree controller id.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.TreePickerRenderModel.TreeVirtualRootId">
            <summary>
            Gets or sets the tree virtual root.
            </summary>
            <value>
            The tree virtual root.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.TreePickerRenderModel.StartNodeId">
            <summary>
            Gets or sets the start node id.
            </summary>
            <value>
            The start node id.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.TreePickerRenderModel.ModalTitle">
            <summary>
            The string to display in the picker header
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.TreePickerRenderModel.NodeClickHandler">
            <summary>
            The JavaScript method name to call when a node is selected
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.TreePickerRenderModel.ChooseLinkText">
            <summary>
            The text to display for the choose link
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.TreePickerRenderModel.DeleteLinkText">
            <summary>
            The text to display for the choose link
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.TreePickerRenderModel.AdditionalParameters">
            <summary>
            Allows you to pass in additional parameters to the tree which will show up as query strings in the tree controller
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.TreeRenderModel">
            <summary>
            A data model used to do the initial rendering of the tree
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.TreeRenderModel.#ctor(System.String)">
            <summary>
            Constructor sets defaults
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.TreeRenderModel.TreeUrl">
            <summary>
            The Url for the tree to retreive it's JSON data from
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.TreeRenderModel.TreeHtmlElementId">
            <summary>
            The DOM element ID to render the tree
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.TreeRenderModel.ManuallyInitialize">
            <summary>
            A flag determining if the tree's createJsTree() method willl be called automatically or not
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Trees.MenuItem">
            <summary>
            Represents a context menu item
            </summary>    
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Trees.MenuItem.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Trees.MenuItem.ValidateRequiredData(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Used to validate the additional data / meta data that is appended to a tree node as some menu items require
            certain data to operate with their JS methods.
            </summary>
            <param name="additionalData"></param>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Trees.MenuItem.Title">
            <summary>
            The text to display for the menu item
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Trees.MenuItem.SubMenuItems">
            <summary>
            A collection of sub menu items for this menu item
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Trees.MenuItem.AdditionalData">
            <summary>
            A property to allow for customized html data attributes to be rendered
            which can be useful for doing custom logic in JavaScript
            </summary>
            <remarks>
            Custom data will be rendered into the DOM with attributes named with the prefix:
            'data-custom-'
            </remarks>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Trees.MenuItem.Icon">
            <summary>
            The icon to be used for the menu item.
            This can either be a path to an image or a css class reference
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Trees.MenuItem.MenuItemId">
            <summary>
            Returns the menu item id assigned to the menu item via attributes
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Trees.MenuItem.SeparatorBefore">
            <summary>
            Show seperator before
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Trees.MenuItem.SeparatorAfter">
            <summary>
            Show seperator after
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Trees.MenuItem.OnClientClick">
            <summary>
            The JavaScript method to call when the menu item is clicked
            </summary>
            <remarks>
            The JavaScript method called will be passed the node Id that has had it's context menu initialized
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Trees.MenuItemAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>        
            <param name="id"></param>
            <param name="title"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Trees.MenuItemAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="id"></param>
            <param name="title"></param>
            <param name="onClientClick"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Trees.MenuItemAttribute.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor with seperators
            </summary>
            <param name="id"></param>
            <param name="title"></param>
            <param name="seperatorBefore"></param>
            <param name="seperatorAfter"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Trees.MenuItemAttribute.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="id"></param>
            <param name="title"></param>
            <param name="seperatorBefore"></param>
            <param name="seperatorAfter"></param>
            <param name="onClientClick"></param>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Trees.MenuItemAttribute.AdditionalData">
            <summary>
            A property to allow for customized html data attributes to be rendered
            which can be useful for doing custom logic in JavaScript
            </summary>
            <remarks>
            Custom data will be rendered into the DOM with attributes named with the prefix:
            'data-custom-'
            </remarks>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Trees.MenuItemMetadata.Icon">
            <summary>
            The icon
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Trees.MenuItemMetadata.Title">
            <summary>
            The text to display for the menu item
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Trees.MenuItemMetadata.SeperatorBefore">
            <summary>
            Show seperator before
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Trees.MenuItemMetadata.SeperatorAfter">
            <summary>
            Show seperator after
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Trees.MenuItemMetadata.OnClientClick">
            <summary>
            The JS function to call when the menu item is clicked
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Trees.NodeStyle">
            <summary>
            A class used to style a tree model
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Trees.NodeStyle.DimNode">
            <summary>
            Dims the color of the model
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Trees.NodeStyle.HighlightNode">
            <summary>
            Adds the star icon highlight overlay to a model
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Trees.NodeStyle.SecureNode">
            <summary>
            Adds the padlock icon overlay to a model
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Trees.NodeStyle.AddCustom(System.String)">
            <summary>
            Adds a custom class to the li model of the tree
            </summary>
            <param name="cssClass"></param>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Trees.TreeAttribute">
            <summary>
            Identifies a tree controller
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Trees.TreeAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>        
            <param name="id"></param>
            <param name="title"></param>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Trees.TreeMetadata">
            <summary>
            A meta data class to explain a tree controller
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Trees.TreeMetadata.TreeTitle">
            <summary>
            The title to show for the root tree node
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Trees.TreeMetadata.IsInternalRebelTree">
            <summary>
            Whether or not this is a built-in Rebel tree
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Trees.TreeNode">
            <summary>
            Represents a model in the tree
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Trees.TreeNode.AddMenuItem``1">
            <summary>
            Adds a menu item
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Trees.TreeNode.AddMenuItem``1(System.String,System.String)">
            <summary>
            Adds a menu item with a key value pair which is merged to the AdditionalData bag
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Trees.TreeNode.AddMenuItem``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds a menu item with a dictionary which is merged to the AdditionalData bag
            </summary>
            <typeparam name="T"></typeparam>
            <param name="additionalData"></param>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Trees.TreeNode.Children">
            <summary>
            Internal child array to be able to add nested levels of content
            </summary>
            <remarks>
            Currently this is ONLY supported for rendering the root node for an application
            tree when there are multiple trees for an application
            </remarks>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Trees.TreeNode.HiveId">
            <summary>
            The unique identifier for the node
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Trees.TreeNode.HasChildren">
            <summary>
            A flag to set whether or not this node has children
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Trees.TreeNode.Title">
            <summary>
            The text title of the node that is displayed in the tree
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Trees.TreeNode.NodePath">
            <summary>
            Gets or sets the node path.
            </summary>
            <value>
            The node path.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Trees.TreeNode.Icon">
            <summary>
            The icon to use for the node, this can be either a path to an image or a Css class. 
            If a '/' is found in the string then it will be considered a path to an image.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Trees.TreeNode.EditorUrl">
            <summary>
            The URL path for the editor for this model
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Trees.TreeNode.JsonUrl">
            <summary>
            The JSON url to load the nodes children
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Trees.TreeNode.Style">
            <summary>
            The UI style to give the model
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Trees.TreeNode.AdditionalData">
            <summary>
            A dictionary to support any additional meta data that should be rendered for the node which is 
            useful for custom action commands such as 'create', 'copy', etc...
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.Trees.TreeNode.MenuActions">
            <summary>
            A collection of context menu actions to apply for the model
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Trees.TreeNodeCollection">
            <summary>
            A collection of TreeNode objects
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.BackOffice.Trees.TreeNodeCollection.Serialize">
            <summary>
            Serializes the collection to JSON in a jsTree format
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.Trees.RebelTreeAttribute">
            <summary>
            Identifies a default Rebel tree that is shipped with the framework
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.UIElements.SelectListUIElement">
            <summary>
            Represents a select list UI Element
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.UIElements.SelectListUIElement.Items">
            <summary>
            The items that will make up the select list
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.UIElements.SeperatorUIElement">
            <summary>
            Represents a seperator UI Element
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.UIElements.SplitButtonUIElement">
            <summary>
            Represents a split button UI Element
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.BackOffice.UIElements.SplitButtonUIElement.Items">
            <summary>
            The items that will make up the split button menu
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.BackOffice.UIElements.StateButtonUIElement">
            <summary>
            Represents a state button UI Element
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.Media.MediaType">
            <summary>
            Gets the type of the media. This is a alternative accessor for <see cref="T:Rebel.Framework.Persistence.Model.Attribution.MetaData.EntitySchema"/>
            </summary>
            <value>The type of the media.</value>
            <remarks></remarks>
        </member>
        <member name="T:Rebel.Cms.Web.Model.IRoutableItem">
            <summary>
            The definition of a routable item
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.IRoutableItem.Id">
            <summary>
            The ID of the Rebel model
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.IRoutableItem.ContentType">
            <summary>
            Gets the type of the content.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Rebel.Cms.Web.Model.IRoutableItem.CurrentTemplate">
            <summary>
            Gets the current template.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Rebel.Cms.Web.Model.IRoutableItem.AlternativeTemplates">
            <summary>
            Gets or sets the alternative templates.
            </summary>
            <value>The alternative templates.</value>
            <remarks></remarks>
        </member>
        <member name="P:Rebel.Cms.Web.Model.Content.CurrentTemplate">
            <summary>
            Gets the current template.
            </summary>
            <value>The current template.</value>
            <remarks></remarks>
        </member>
        <member name="P:Rebel.Cms.Web.Model.Content.SortOrder">
            <summary>
            Gets the sort order relative to the content's parent.
            </summary>
            <value>The sort order.</value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.Content.ContentType">
            <summary>
            Gets the type of the content. This is a alternative accessor for <see cref="T:Rebel.Framework.Persistence.Model.Attribution.MetaData.EntitySchema"/>
            </summary>
            <value>The type of the content.</value>
            <remarks></remarks>
        </member>
        <member name="P:Rebel.Cms.Web.Model.Content.AlternativeTemplates">
            <summary>
            Gets or sets the alternative templates.
            </summary>
            <value>The alternative templates.</value>
            <remarks></remarks>
        </member>
        <member name="P:Rebel.Cms.Web.Model.NodeWithAlias.Alias">
            <summary>
            Gets or sets the alias of the object. The alias is a string to which this object
            can be referred programmatically, and is often a normalised version of the <see cref="P:Rebel.Framework.IReferenceByName.Name"/> property.
            </summary>
            <value>The alias.</value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.NodeWithAlias.Name">
            <summary>
            Gets or sets the name of the object. The name is a string intended to be human-readable, and
            is often a more descriptive version of the <see cref="!:IReferenceByName.Alias"/> property.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.Field.Alias">
            <summary>
            Gets or sets the alias of the object. The alias is a string to which this object
            can be referred programmatically, and is often a normalised version of the <see cref="P:Rebel.Framework.IReferenceByName.Name"/> property.
            </summary>
            <value>The alias.</value>
            <remarks></remarks>
        </member>
        <member name="P:Rebel.Cms.Web.Model.Field.Name">
            <summary>
            Gets or sets the name of the object. The name is a string intended to be human-readable, and
            is often a more descriptive version of the <see cref="!:IReferenceByName.Alias"/> property.
            </summary>
            <value>The name.</value>
            <remarks></remarks>
        </member>
        <member name="P:Rebel.Cms.Web.Model.Field.Definition">
            <summary>
            Gets or sets the definition for the field.
            </summary>
            <value>The definition.</value>
            <remarks></remarks>
        </member>
        <member name="P:Rebel.Cms.Web.Model.Field.Values">
            <summary>
            Gets or sets the values of this field.
            </summary>
            <value>The values.</value>
            <remarks></remarks>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ActionFilters.AbstractTempDataCookieFilter">
            <summary>
            An abstract ActionFilter used to store temporary cookie data that is only persisted for one redirect
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.AbstractTempDataCookieFilter.GetTempDataKey(System.Web.Mvc.ControllerContext)">
            <summary>
            Returns the key used to reference the cookie temp data 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.AbstractTempDataCookieFilter.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            Clears out all cookies starting with the prefix
            </summary>
            <param name="filterContext"></param>
            <remarks>
            Generally these cookies will be cleared out on the client side but just in case this will
            help ensure that we don't leave residule cookes laying around, even though we've already set 
            them to expire in a minute... better safe than sorry
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.AbstractTempDataCookieFilter.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
            <summary>
            Checks the result type, if it is a RedirectToRouteResult it calls the abstract OnRedirect method
            otherwise if its a view result calls the abstract OnView method.
            </summary>
            <param name="filterContext"></param>       
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.AbstractTempDataCookieFilter.AddQueryString(System.Web.Mvc.RedirectToRouteResult,System.Web.Mvc.ActionExecutedContext)">
            <summary>
            Adds the query string name with the temp data key to QueryStrings
            </summary>
            <param name="result"></param>
            <param name="filterContext"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.AbstractTempDataCookieFilter.AddViewData(System.Web.Mvc.ViewResult,System.Web.Mvc.ActionExecutedContext)">
            <summary>
            Adds the query string name with the temp data key to ViewData
            </summary>
            <param name="result"></param>
            <param name="filterContext"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.AbstractTempDataCookieFilter.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
            <summary>
            Writes the notifications cookie
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.AbstractTempDataCookieFilter.CreateCookie(System.Web.Mvc.ResultExecutedContext)">
            <summary>
            Creates the cookie
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.AbstractTempDataCookieFilter.GetTempDataValue(System.Web.Mvc.ControllerContext)">
            <summary>
            Returns the value to be stored in the cookie
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ActionFilters.MenuItemsPermissionFilterAttribute">
            <summary>
            Filters out the tree nodes Menu Items based on permissions
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.MenuItemsPermissionFilterAttribute.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
            <summary>
            Called by the ASP.NET MVC framework after the action method executes.
            </summary>
            <param name="filterContext">The filter context.</param>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ActionFilters.SupportsPathGeneration">
            <summary>
            A filter to generate a HiveId Json path which is stored in a cookie which is referenced by a query string Id. This path is used to sync the tree
            in the UI to the path that is generated.
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.SupportsPathGeneration.GetTempDataKey(System.Web.Mvc.ControllerContext)">
            <summary>
            Uses the IBackOfficeRequestContext request id as the temp data key
            </summary>
            <param name="filterContext"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.SupportsPathGeneration.GetTempDataValue(System.Web.Mvc.ControllerContext)">
            <summary>
            Returns the path to be stored
            </summary>
            <param name="filterContext"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.SupportsPathGeneration.GetBackOfficeRequestContext(System.Web.Mvc.IController)">
            <summary>
            Gets the IRequiresBackOfficeRequestContext type from the filter context's controller instance
            </summary>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.SupportsPathGeneration.GetPathGenerator(System.Web.Mvc.IController)">
            <summary>
            Gets the IGeneratePath type from the filter context's controller instance
            </summary>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="P:Rebel.Cms.Web.Mvc.ActionFilters.SupportsPathGeneration.CookieNamePrefix">
            <summary>
            Returns 'path_' to prefix the cookie name
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Mvc.ActionFilters.SupportsPathGeneration.QueryStringName">
            <summary>
            Returns 'path' for the query string name
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ActionInvokers.ControllerExtenderActionInvoker">
            <summary>
            An action invoker allowing Controller Extender actions to execute.
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionInvokers.ControllerExtenderActionInvoker.FindAction(System.Web.Mvc.ControllerContext,System.Web.Mvc.ControllerDescriptor,System.String)">
            <summary>
            Checks if the action to execute exists on the main controller, if not checks any extender controllers for matching/executable actions and returns them.
            </summary>
            <param name="controllerContext"></param>
            <param name="controllerDescriptor"></param>
            <param name="actionName"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionInvokers.ControllerExtenderActionInvoker.InvokeAction(System.Web.Mvc.ControllerContext,System.String)">
            <summary>
            Override the InvokeAction method to check if the actionDescriptor is an ExtenderActionDescriptor
            if it is, we will actually execute the controller for the extender action seperately
            so that everything is wired up correctly and all of the ActionFilters are executed.
            </summary>
            <param name="controllerContext"></param>
            <param name="actionName"></param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ActionInvokers.ControllerExtenderActionInvoker.ExtenderActionDescriptor">
            <summary>
            Internal class wrapping the real ActionDescriptor so that we can store the internal controller context for the 
            controller that will actually be doing the execution
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ActionFilters.RebelAuthorizeAttribute">
            <summary>
            Ensures authorization occurs for the action or controller, if not this redirects to the correct login URL for the back-office
            </summary>
            <remarks>
            If the user is authorized, this renews their authentication ticket 
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.RebelAuthorizeAttribute.AuthorizeIdentity(System.Web.HttpContextBase)">
            <summary>
            Authorizes the user identity.
            </summary>
            <param name="httpContext">The HTTP context.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.RebelAuthorizeAttribute.AuthorizePermissions(System.Web.HttpContextBase,Rebel.Framework.HiveId)">
            <summary>
            Authorizes the permissions.
            </summary>
            <param name="httpContext">The HTTP context.</param>
            <param name="entityId">The entity id.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.RebelAuthorizeAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
            <summary>
            Called when a process requests authorization.
            </summary>
            <param name="filterContext">The filter context, which encapsulates information for using <see cref="T:System.Web.Mvc.AuthorizeAttribute"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="filterContext"/> parameter is null.</exception>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.RebelAuthorizeAttribute.CacheValidateHandler(System.Web.HttpContext,System.Object,System.Web.HttpValidationStatus@)">
            <summary>
            Caches the validate handler.
            </summary>
            <param name="context">The context.</param>
            <param name="data">The data.</param>
            <param name="validationStatus">The validation status.</param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.RebelAuthorizeAttribute.IsAuthorized(System.Web.HttpContextBase,Rebel.Framework.HiveId)">
            <summary>
            Determines whether the specified HTTP context is authorized.
            </summary>
            <param name="httpContext">The HTTP context.</param>
            <param name="entityId">The entity id.</param>
            <returns>
              <c>true</c> if the specified HTTP context is authorized; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Rebel.Cms.Web.Mvc.ActionFilters.RebelAuthorizeAttribute.Permissions">
            <summary>
            Gets or sets the permissions.
            </summary>
            <value>
            The permissions.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Mvc.ActionFilters.RebelAuthorizeAttribute.IdParameterName">
            <summary>
            Gets or sets the name of the id field.
            </summary>
            <value>
            The name of the id field.
            </value>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ActionInvokers.DashboardActionInvoker">
            <summary>
            An action invoker that ensures that all of the dashboard filters are applied to the Dashboard action
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ActionInvokers.RebelBackOfficeActionInvoker">
            <summary>
            Ensures that any filters of type 
            - IRequiresRoutableRequestContext or
            - IRequiresBackOfficeRequest Context 
            have their parameters setup propery
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.Controllers.BackOffice.IGeneratePath">
            <summary>
            Represents an object that can generate an Id path for an element given it's Id
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.IGeneratePath.GetPaths">
            <summary>
            Returns a collection of Id paths for the current entity being edited by the controller instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.IGeneratePath.GeneratePathsForCurrentEntity(Rebel.Framework.EntityPathCollection)">
            <summary>
            Sets the Id path for the current entity being edited by the controller instance
            </summary>
            <param name="path"></param>
        </member>
        <member name="F:Rebel.Cms.Web.Mvc.Controllers.ControllerExtender.ParentControllerDataTokenKey">
            <summary>
            The key used in RouteValue DataTokens to store a reference to the parent controller of an extender
            </summary>
        </member>
        <member name="F:Rebel.Cms.Web.Mvc.Controllers.ControllerExtender.ExtenderParametersDataTokenKey">
            <summary>
            The key used in RouteValue DataTokens to store a reference to the ExtenderData object
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.Icon">
            <summary>
            Represents an icon
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.Icon.Url">
            <summary>
            If the icon is an image, not a sprite, this represents it's URL/Path
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.Icon.IconType">
            <summary>
            Is a physical image or a sprite contained in an image
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.Install.DatabaseInstallModel">
            <summary>
            Represents the model to install the database during installation
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Model.Install.DatabaseInstallModel.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Performs the validation based on options selected
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="P:Rebel.Cms.Web.Model.Install.DatabaseInstallModel.ConnectionString">
            <summary>
            Used when specifying a custom connection string
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.Install.DatabaseInstallModel.ProviderName">
            <summary>
            Used when specifying a custom connection string (my sql, ms sql, etc...)
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Model.IRebelRenderModel">
            <summary>
            The model supplied to the controller to render the content to the front-end.
            This model wraps the 'Content' model which is returned by the controller action to the view
            and should generally return the 'ContentNode' as Lazy loaded data.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.IRebelRenderModel.CurrentNode">
            <summary>
            Gets the current item associated with this request.
            </summary>
            <value>The current item.</value>
        </member>
        <member name="P:Rebel.Cms.Web.Model.IRebelRenderModel.IsLoaded">
            <summary>
            Gets a value indicating whether the current node has been loaded.
            </summary>
            <value>
              <c>true</c> if this instance is loaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Rebel.Cms.Web.Model.TemplateFile">
            <summary>
            Represents a template object
            </summary>
            <remarks>
            This does NOT represent a Template editor model
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Model.TemplateFile.#ctor(Rebel.Framework.HiveId)">
            <summary>
            Constructor
            </summary>
            <remarks>
            The Id is a string serialized HiveId and contains the file name of the template
            </remarks>
        </member>
        <member name="T:Rebel.Cms.Web.Model.RebelRenderModel">
            <summary>
            The model supplied to the controller to render the content to the front-end.
            This model wraps the 'Content' model which is returned by the controller action to the view
            and returns the 'ContentNode' as Lazy loaded data.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Model.RebelRenderModel.CurrentNode">
            <summary>
            Gets the current item associated with this request.
            </summary>
            <value>The current item.</value>
        </member>
        <member name="M:Rebel.Cms.Web.Packaging.DefaultPackageContext.#ctor(Rebel.Cms.Web.Configuration.RebelSettings,System.Func{System.String,System.String})">
            <summary>
            Constructor
            </summary>
            <param name="settings"></param>
            <param name="mapPath">A delegate method used to perform a Server.MapPath operation</param>
        </member>
        <member name="P:Rebel.Cms.Web.Packaging.DefaultPackageContext.LocalPathResolver">
            <summary>
            Gets the local path resolver.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Packaging.DefaultPackageContext.LocalPackageManager">
            <summary>
            Gets the local package manager.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Packaging.DefaultPackageContext.PublicPackageManager">
            <summary>
            Gets the public package manager.
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.ParameterEditorExtensions.GetParameterEditor(System.Collections.Generic.IEnumerable{System.Lazy{Rebel.Cms.Web.Model.BackOffice.ParameterEditors.AbstractParameterEditor,Rebel.Cms.Web.Model.BackOffice.ParameterEditors.ParameterEditorMetadata}},System.Guid)">
            <summary>
            Returns a parameter editor definition based on a parameter editor id
            </summary>
            <param name="parameterEditors"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.PropertyEditorExtensions.GetPropertyEditor(Rebel.Cms.Web.IPropertyEditorFactory,System.String)">
            <summary>
            Returns a property editor from the property editor factory using a string id which must parse to a Guid
            </summary>
            <param name="factory"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.PropertyEditorExtensions.GetPropertyEditor(System.Collections.Generic.IEnumerable{System.Lazy{Rebel.Cms.Web.Model.BackOffice.PropertyEditors.PropertyEditor,Rebel.Cms.Web.Model.BackOffice.PropertyEditors.PropertyEditorMetadata}},System.Guid)">
            <summary>
            Returns a property editor definition based on a property editor id
            </summary>
            <param name="propertyEditors"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.PropertyEditorExtensions.ToPropertyEditorDefinitions(System.Collections.Generic.IEnumerable{Rebel.Cms.Web.Model.BackOffice.PropertyEditors.PropertyEditor})">
            <summary>
            Converts a list of real property editors to property editor definitions
            </summary>
            <param name="props"></param>
            <returns></returns>
            <remarks>
            TODO: This is a helper class which is used for tests and demo data, this may not be required in the future except for unit tests
            </remarks>
        </member>
        <member name="T:Rebel.Cms.Web.Routing.EntityRouteResult">
            <summary>
            The result that is returned when an entity is found based on a URL
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.EntityRouteResultExtensions.IsRoutable(Rebel.Cms.Web.Routing.EntityRouteResult)">
            <summary>
            If the entity is routable (didn't return an error status)
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Routing.EntityRouteStatus">
            <summary>
            The result status when trying to find an entity based on a Url
            </summary>
        </member>
        <member name="F:Rebel.Cms.Web.Routing.EntityRouteStatus.SuccessWithoutHostname">
            <summary>
            The entity was found in the first ordinal root branch that doesn't have a host name assigned
            </summary>
        </member>
        <member name="F:Rebel.Cms.Web.Routing.EntityRouteStatus.SuccessByHostname">
            <summary>
            The entity was found with a hostname identified in the entity's branch
            </summary>
        </member>
        <member name="F:Rebel.Cms.Web.Routing.EntityRouteStatus.SuccessById">
            <summary>
            The entity was found based on an Id formatted Url
            </summary>
        </member>
        <member name="F:Rebel.Cms.Web.Routing.EntityRouteStatus.FailedRevisionStatusNotFound">
            <summary>
            Could not route to entity with the given revision status (i.e. If Published was requested but the item is not published)
            </summary>
        </member>
        <member name="F:Rebel.Cms.Web.Routing.EntityRouteStatus.FailedRequiresHostname">
            <summary>
            Could not route to entity because the entity exists in root branch with an sort ordinal greater than 0 (not the first) that doesn't have a hostname assigned
            </summary>
            <remarks>
            This only occurs if there is more than one root branch and one doesn't have a hostname assigned in it.
            </remarks>
        </member>
        <member name="F:Rebel.Cms.Web.Routing.EntityRouteStatus.FailedNotFoundByName">
            <summary>
            Could not find an entity with the specified path, one of the url names in the path didn't resolve to an entity at its particular level.
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Routing.HostnameCollection">
            <summary>
            A keyed collection of HostnameEntry's
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Routing.HostnameEntry">
            <summary>
            Represents a host name entry
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Routing.IRoutingEngine.ClearCache(System.Boolean,Rebel.Framework.HiveId[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Clears the Url and domain cache.
            </summary>
            <param name="clearDomains">Clears domain cache</param>
            <param name="clearForIds">Clears generated urls for the specified ids</param>
            <param name="clearMappedUrls">Clears cache for URLs that were routed to entities</param>
            <param name="clearGeneratedUrls">Clears all generated URLs</param>
            <param name="clearAll">Clears all routing cache</param>
        </member>
        <member name="M:Rebel.Cms.Web.Routing.IRoutingEngine.FindEntityByUrl(System.Uri,Rebel.Framework.RevisionStatusType)">
            <summary>
            Gets the entity by URL
            </summary>
            <param name="fullUrlIncludingDomain">The route.</param>
            <param name="revisionStatusType">Type of the revision status.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Routing.IRoutingEngine.GetUrlForEntity(Rebel.Framework.Persistence.Model.TypedEntity)">
            <summary>
            Resolves the url for the specified entity
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Routing.IRoutingEngine.GetAllUrlsForEntity(Rebel.Framework.Persistence.Model.TypedEntity)">
            <summary>
            Resolves the url for the specified entity with its full domain paths based on all hostnames assigned.
            </summary>
            <param name="entity"></param>
            <returns>All URLs for the entity based on all of its hostnames assigned, if no hostnames are assigned in this entities branch, then a null value is returned</returns>
        </member>
        <member name="P:Rebel.Cms.Web.Routing.IRoutingEngine.DomainList">
            <summary>
            returns the list of domains assigned to HiveIds
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.LinkSyntaxParser.Parse(System.String,System.Func{Rebel.Framework.HiveId,System.String})">
            <summary>
            Finds an internal link amongst the input content (generally html) and renders the correct url into the output.
            </summary>
            <param name="input">The input.</param>
            <param name="linkFoundCallback">The link found callback.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.MacroModelExtensions.GetSurfaceMacroChildAction(Rebel.Cms.Web.Macros.MacroDefinition,Rebel.Cms.Web.DependencyManagement.ComponentRegistrations,System.Reflection.MethodInfo@)">
            <summary>
            Gets the surface controller meta data and a reference to the MethodInfo object for the ChildAction to render based on the 
            macro definition
            </summary>
            <param name="macro"></param>
            <param name="components"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Macros.MacroRenderer">
            <summary>
            A utility class for rendering macros either as ActionResult or as string
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Macros.MacroRenderer.#ctor(Rebel.Cms.Web.DependencyManagement.ComponentRegistrations,Rebel.Cms.Web.Context.IRoutableRequestContext)">
            <summary>
            Creates a new instance of the MacroRender class that provides utility methods for compiling and rendering macros.
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Macros.MacroRenderer.GetMacroStringOutput(System.String,System.Web.Mvc.ActionResult,System.Web.Mvc.ControllerContext)">
            <summary>
            Renders/executes the provided macro ActionResult.
            </summary>
            <remarks>Macro rendering time is traced.</remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Macros.MacroRenderer.RenderMacroAsString(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Web.Mvc.ControllerContext,System.Boolean,System.Func{Rebel.Cms.Web.Model.Content})">
            <summary>
            Renders the macro as string.
            </summary>
            <param name="macroAlias">The macro alias.</param>
            <param name="macroParams">The macro params.</param>
            <param name="currentControllerContext">The current controller context.</param>
            <param name="isForRichTextEditor">if set to <c>true</c> [is for rich text editor].</param>
            <param name="resolveContent">The method to call in order to resolve the content to render.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Macros.MacroRenderer.RenderMacroAsString(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Web.Mvc.ControllerContext,System.Boolean,System.Func{Rebel.Cms.Web.Model.Content},System.Func{Rebel.Framework.Security.Model.Entities.Member})">
            <summary>
            Renders the macro output as a string
            </summary>
            <param name="macroAlias">The macro alias.</param>
            <param name="macroParams">The macro params.</param>
            <param name="currentControllerContext">The current controller context.</param>
            <param name="isForRichTextEditor">If the request is to render the contents in the back office rich text editor</param>
            <param name="resolveContent">The method to call in order to resolve the content to render.</param>
            <param name="resolveMember">The method to call in order to resolve the current member. If null, this parameter is ignored</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Macros.MacroRenderer.RenderMacro(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Web.Mvc.ControllerContext,System.Boolean,System.Func{Rebel.Cms.Web.Model.Content})">
            <summary>
            Returns an ActionResult for the specified Macro.
            </summary>
            <param name="macroAlias"></param>
            <param name="currentControllerContext"></param>
            <param name="isForRichTextEditor">If the request is to render the contents in the back office rich text editor</param>
            <param name="resolveContent">callback to get the 'Content' model</param>
        </member>
        <member name="M:Rebel.Cms.Web.Macros.MacroRenderer.GetMacroCacheKey(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Rebel.Framework.HiveId},System.Nullable{Rebel.Framework.HiveId})">
            <summary>
            Creates a cache key for the macro's parameters and cache options.
            </summary>
            <param name="macroParams">A dicitonary of the parameters</param>
            <param name="currentPageId">The current page hiveId.  If null, CacheByPage is false.</param>
            <param name="currentMemberId">The current member hiveId.  If null, CachePersonalized is false.</param>
            <returns>A repeatable string key that represents the macro settings</returns>
        </member>
        <member name="M:Rebel.Cms.Web.Macros.MacroRenderer.AppendMacroParam(System.Text.StringBuilder,System.String,System.Object)">
            <summary>
            Used by GetMacroCacheKey to consistently add a key:value pair to the param key generator.
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Macros.MacroRenderer.MacroError(System.String,System.String)">
            <summary>
            Returns the html to display an error inline
            </summary>
            <param name="error"></param>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Macros.MacroRenderer.NoRichTextRenderMode(System.String)">
            <summary>
            Returns the content to display in the Rich Text Editor when the macro is flagged to not render contents
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Macros.MacroSyntaxParser">
            <summary>
            Utility class for parsing macro syntax in string content
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Macros.MacroSyntaxParser.Parse(System.String,System.Func{System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String},System.Collections.Generic.IEnumerable{Rebel.Cms.Web.Macros.MacroParserResult}@)">
            <summary>
            Finds a macro placeholder amongst the input content (generally html) and renders the macro content into the output.
            </summary>
            <param name="input"></param>
            <param name="macroFoundCallback">Callback that is fired when a macro is found, this callback should return the macro contents based on the callback parameters</param>
            <param name="results"></param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Mapping.CmsModelMapper">
            <summary>
            Model mapper for web models for use in the CMS
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mapping.CmsModelMapper.ConfigureInternalCmsModelMappings">
            <summary>
            Creates mappings for Cms to/from Cms models
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mapping.CmsModelMapper.ConfigurePersistenceToModelMappings">
            <summary>
            Creates mappings for Persistence/Hive to/from Cms View Models
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mapping.CmsModelMapper.ConfigureModelToPersistenceMappings">
            <summary>
            Creates mappings for Cms View Models to/from Persistence/Hive models
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.ModelEventArgs.#ctor(System.Object,System.Web.Mvc.ActionExecutedContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebel.Cms.Web.Mvc.ActionFilters.ModelEventArgs"/> class.
            </summary>
            <param name="model">The model.</param>
            <param name="actionContext"> </param>
        </member>
        <member name="P:Rebel.Cms.Web.Mvc.ActionFilters.ModelEventArgs.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>
            The model.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Mvc.ActionFilters.ModelEventArgs.ActionContext">
            <summary>
            Returns the ActionExecutedContext for the current ModelEventArgs
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.Controllers.BackOffice.BackOfficeController">
            <summary>
            Has the basic properties for back-office controllers
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.Controllers.BackOffice.INotificationController">
            <summary>
            Required to use client notification engine
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Mvc.Controllers.BackOffice.INotificationController.RequestId">
            <summary>
            The Id of the current request
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.BackOfficeController.AddValidationErrorsNotification">
            <summary>
            Helper method to add the notification to the UI regarding validation errors found in model state
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Mvc.Controllers.BackOffice.BackOfficeController.RequestId">
            <summary>
            Returns the request Id from the BackOfficeRequestContext
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.ContentController.NiceUrl(Rebel.Framework.HiveId)">
            <summary>
            Gets the nices URL for .
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.Controllers.BackOffice.MacroController">
            <summary>
            Controller to render macro content
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.MacroController.Index(System.String)">
            <summary>
            Child action to render a macro
            </summary>
            <param name="macroAlias">The macro alias to render</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.MacroController.RenderMacro(System.String,System.Func{Rebel.Cms.Web.Model.Content})">
            <summary>
            Performs the action rendering
            </summary>
            <param name="macroAlias"></param>
            <param name="resolveContent">callback to get the 'Content' model</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.MacroController.MacroContents(Rebel.Framework.HiveId,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns the contents of a macro for use in the back office
            </summary>
            <param name="currentNodeId">The current node id.</param>
            <param name="macroAlias">The macro alias.</param>
            <param name="macroParams">The macro params.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.MacroController.NoMacroData">
            <summary>
            REturns the html to display when the node isn't saved yet
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.Controllers.BackOffice.MediaController">
            <summary>
            Utility controller for media
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.MediaController.Upload(System.Web.HttpPostedFileBase,System.Nullable{Rebel.Framework.HiveId},System.Nullable{Rebel.Framework.HiveId},System.String)">
            <summary>
            Uploads the specified file.
            </summary>
            <param name="file">The file.</param>
            <param name="docTypeId">The doc type id.</param>
            <param name="parentId">The parent id.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.MediaController.StoreFile(System.Web.HttpPostedFileBase)">
            <summary>
            Stores the file.
            </summary>
            <param name="file">The file.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.MediaController.CreateThumbnail(Rebel.Hive.ProviderGrouping.IGroupUnit{Rebel.Hive.RepositoryTypes.IFileStore},Rebel.Framework.Persistence.Model.IO.File,System.Drawing.Image,System.String,System.Int32)">
            <summary>
            Creates the thumbnail.
            </summary>
            <param name="uow">The uow.</param>
            <param name="original">The original.</param>
            <param name="image">The image.</param>
            <param name="mediaId">The media id.</param>
            <param name="maxWidthHeight">Height of the max width.</param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.MediaController.CreateNewContentEntity(Rebel.Framework.Persistence.Model.Attribution.MetaData.EntitySchema,System.String,Rebel.Framework.HiveId)">
            <summary>
            Creates the new content entity.
            </summary>
            <param name="docTypeData">The doc type data.</param>
            <param name="name">The name.</param>
            <param name="parentId">The parent id.</param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.Controllers.BackOffice.TreePickerController">
            <summary>
            A controller to render a tree picker's markup either by a ChildAction of via a JSON request
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.TreePickerController.GetPicker(Rebel.Cms.Web.Model.BackOffice.TreePickerRenderModel)">
            <summary>
            Method that can be called by JavaScript to render a tree picker.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.TreePickerController.Index(Rebel.Cms.Web.Model.BackOffice.TreePickerRenderModel)">
            <summary>
            Renders a tree picker
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ModelBinders.BackOffice.HiveIdModelBinder">
            <summary>
            Model binder used to bind the HiveId parameter
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ModelBinders.BackOffice.HiveIdModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
            <summary>
            Binds the model
            </summary>
            <param name="controllerContext"></param>
            <param name="bindingContext"></param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ModelBinders.JsonDictionaryModelBinder">
            <summary>
            Used to bind a json dictionary to a dictionary parameter of an Action
            </summary>
            <remarks>
            We need this because of a bug with MVC currently which you can see here:
             http://connect.microsoft.com/VisualStudio/feedback/details/636647/make-jsonvalueproviderfactory-work-with-dictionary-types-in-asp-net-mvc
            </remarks>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ViewEngines.AlternateLocationViewEngine">
            <summary>
            A ViewEngine that allows a controller's views to be shared with other 
            controllers without having to put these shared views in the 'Shared' folder.
            This is useful for when you have inherited controllers.
            This will allow of 'overriding' of views, for example if i have a controller called 'Media' that has an alternate view location of 'Content', the 'Content' folder could contain all of the
            partial views necessary, but we could have a different main view in the 'Media' folder which would be used and then all of the 'Content' partial views could be used.
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ViewEngines.AlternateLocationViewEngine.GetAlternateControllerContext(System.Web.Mvc.ControllerContext)">
            <summary>
            Returns a new controller context with the alternate controller name in the route values
            if the current controller is found to contain an AlternateViewEnginePathAttribute.
            </summary>
            <param name="currentContext"></param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ViewEngines.AlternateViewEnginePathAttribute">
            <summary>
            An attribute for a controller that specifies that the ViewEngine should look for views for this controller using a different controllers name.
            This is useful if you want to share views between specific controllers but don't want to have to put all of the views into the Shared folder.
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ViewEngines.RenderViewPageActivator">
            <summary>
            Ensures the CurrentPage property is set on the RenderViewPage
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ViewEngines.TwoLevelViewCache">
            <summary>
            A custom view cache to improve performance of view lookups. 
            Reference: 
            http://blogs.msdn.com/b/marcinon/archive/2011/08/16/optimizing-mvc-view-lookup-performance.aspx
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ViewEngines.RebelContextViewPageActivator">
            <summary>
            Checks if the controller that created it has the same context dependency and injects it
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Packaging.PackageInstallUtility.RunPrePackageUninstallActions(Rebel.Framework.Tasks.TaskExecutionContext,System.String)">
            <summary>
            Runs the actions for PrePackageUninstall and for the packagefoldername specific task
            </summary>
            <param name="taskExecContext"></param>
            <param name="packageFolderName"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Rebel.Cms.Web.Packaging.PackageInstallUtility.RunPostPackageInstallActions(Rebel.Cms.Web.Model.BackOffice.PackageInstallationState,Rebel.Framework.Tasks.TaskExecutionContext,System.String)" -->
        <member name="M:Rebel.Cms.Web.Packaging.PackageInstallUtility.GetTaskExecutionContext(NuGet.IPackage,System.String,Rebel.Cms.Web.Model.BackOffice.PackageInstallationState,System.Web.Mvc.Controller)">
            <summary>
            Creates the task execution context for use in the Package installation actions
            </summary>
            <param name="nugetPackage"></param>
            <param name="packageFolderName"></param>
            <param name="state"></param>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Macros.PartialViewMacroPage.SetViewData(System.Web.Mvc.ViewDataDictionary)">
            <summary>
            This will set any publicly declared properties in the markup that match the name of a dynamic property in the dynamic model
            </summary>
            <param name="viewData"></param>
        </member>
        <member name="P:Rebel.Cms.Web.Macros.PartialViewMacroPage.RoutableRequestContext">
            <summary>
            The current routable request context
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Macros.PartialViewMacroPage.Rebel">
            <summary>
            Gets an rebel helper
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Macros.PartialViewMacroPage.DynamicModel">
            <summary>
            Gets or sets the dynamic model.
            </summary>
            <value>The dynamic model.</value>
        </member>
        <member name="P:Rebel.Cms.Web.Macros.PartialViewMacroPage.CurrentPage">
            <summary>
            Gets or sets the current page.
            </summary>
            <value>
            The current page.
            </value>
        </member>
        <member name="P:Rebel.Cms.Web.Macros.PartialViewMacroPage.Hive">
            <summary>
            Gets the <see cref="T:Rebel.Hive.IHiveManager"/> for the application. You can use this to run queries against the data for this application.
            </summary>
            <value>The hive.</value>
        </member>
        <member name="T:Rebel.Cms.Web.RenderViewPageContext">
            <summary>
            An class containing all of the objects required for the RenderViewPage
            </summary>
            <remarks>
            Each property of the context is assigned in the Post view page activator except in the case of layouts since these are not 
            created by the post view page activators. In this case, this class will look into the HttpContext items for an existing RenderViewPageContext
            which should always exist, but if for some reason it does not, this class will try to resolve the dependencies required to create these 
            objects from the DependencyResolver.
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.RenderViewPageContext.GetService``1(System.Func{Rebel.Cms.Web.RenderViewPageContext,``0},System.Func{``0})">
            <summary>
            Uses when the property isn't explicity set, this will try to resolve the service first from the RenderViewPageContext stored
            in the HttpContext items, 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fromContext"></param>
            <param name="ifAllElseFails"> </param>
            <returns></returns>
        </member>
        <member name="P:Rebel.Cms.Web.RenderViewPageContext.RoutableRequestContext">
            <summary>
            The current routable request context
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.RenderViewPageContext.Hive">
            <summary>
            Gets the <see cref="T:Rebel.Hive.IHiveManager"/> for the application. You can use this to run queries against the data for this application.
            </summary>
            <value>The hive.</value>
        </member>
        <member name="P:Rebel.Cms.Web.RenderViewPageContext.Rebel">
            <summary>
            Gets an rebel helper
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.RenderViewPage">
            <summary>
            The View that front-end templates inherit from
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.RenderViewPage.ConfigurePage(System.Web.WebPages.WebPageBase)">
            <summary>
            This will ensure that the Model and RenderViewPageContext are set. This is generally only called for Layouts.
            </summary>
            <param name="parentPage"></param>
            <remarks>
            This method is only required for Layout pages since they are not created by the IViewPageActivator and the Model is not set on them
            directly because it is normally only set for the view returned from the controller.
            </remarks>
        </member>
        <member name="P:Rebel.Cms.Web.RenderViewPage.RenderViewPageContext">
            <summary>
            Gets/sets the RenderViewPageContext which exposes all of the dependencies needed to return the custom properties of this view
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.RenderViewPage.RoutableRequestContext">
            <summary>
            The current routable request context
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.RenderViewPage.Hive">
            <summary>
            Gets the <see cref="T:Rebel.Hive.IHiveManager"/> for the application. You can use this to run queries against the data for this application.
            </summary>
            <value>The hive.</value>
        </member>
        <member name="P:Rebel.Cms.Web.RenderViewPage.Rebel">
            <summary>
            Gets an rebel helper
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.RenderViewPage.CurrentPage">
            <summary>
            Gets the <see cref="P:Rebel.Cms.Web.RenderViewPage.CurrentPage"/>.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Rebel.Cms.Web.RouteDataExtensions.GetControllerHash(System.Web.Routing.RouteData)">
            <summary>
            Returns a string representation of the routeData for use in Dictionary keys, the string returned 
            depicts a unique route for a controller.
            </summary>
            <param name="routeData"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RouteDataExtensions.Clone(System.Web.Routing.RouteData)">
            <summary>
            Clones the RouteData to a new RouteData object
            </summary>
            <param name="routeData"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RouteDataExtensions.IsControllerExtender(System.Web.Routing.RouteData)">
            <summary>
            Returns true if the executing controller is a ControllerExtender
            </summary>
            <param name="routeData"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RouteDataExtensions.GetControllerExtenderParentContext(System.Web.Routing.RouteData)">
            <summary>
            Returns the ControllerContext for the parent Controller of a ControllerExtender
            </summary>
            <param name="routeData"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RouteDataExtensions.GetControllerExtenderParameters(System.Web.Routing.RouteData)">
            <summary>
            Returns the ExtenderData for the ControllerExtender
            </summary>
            <param name="routeData"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RouteMatchExtensions.ContainsInclusion(System.Collections.Generic.IEnumerable{Rebel.Cms.Web.Configuration.RebelSystem.RouteMatchElement},System.String)">
            <summary>
            Determines whether the collection contains a matching <see cref="T:Rebel.Cms.Web.Configuration.RebelSystem.RouteMatchElement"/>, marked as 'include', for the specified absolute path.
            </summary>
            <param name="routeMatches"></param>
            <param name="absolutePath">The absolute path.</param>
            <returns>
            	<c>true</c> if the collection contains a match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.RouteMatchExtensions.ContainsExclusion(System.Collections.Generic.IEnumerable{Rebel.Cms.Web.Configuration.RebelSystem.RouteMatchElement},System.String)">
            <summary>
            Determines whether the collection contains a matching <see cref="T:Rebel.Cms.Web.Configuration.RebelSystem.RouteMatchElement"/>, marked as 'exclude', for the specified absolute path.
            </summary>
            <param name="routeMatches"></param>
            <param name="absolutePath">The absolute path.</param>
            <returns>
            	<c>true</c> if the collection contains a match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rebel.Cms.Web.Context.DefaultBackOfficeRequestContext">
            <summary>
            Encapsulates information specific to a request handled by the Rebel back-office
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Context.RoutableRequestContext">
            <summary>
            Default implementation of <see cref="T:Rebel.Cms.Web.Context.IRoutableRequestContext"/>. Encapsulates information specific to a request handled by Rebel.
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Context.IRoutableRequestContext">
            <summary>
            Encapsulates information specific to a request handled by Rebel
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Context.IRoutableRequestContext.RequestId">
            <summary>
            Gets the request id, useful for debugging or tracing.
            </summary>
            <value>The request id.</value>
        </member>
        <member name="P:Rebel.Cms.Web.Context.IRoutableRequestContext.Application">
            <summary>
            Gets the Rebel application context which contains services which last for the lifetime of the application.
            </summary>
            <value>The application.</value>
        </member>
        <member name="P:Rebel.Cms.Web.Context.IRoutableRequestContext.RegisteredComponents">
            <summary>
            Lists all plugin components registered
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Context.IRoutableRequestContext.RoutingEngine">
            <summary>
            Gets the URL utility.
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Context.RoutableRequestContext.DisposeResources">
            <summary>
            Handles the disposal of resources. Derived from abstract class <see cref="T:Rebel.Framework.DisposableObject"/> which handles common required locking logic.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Rebel.Cms.Web.Context.RoutableRequestContext.RequestId">
            <summary>
            Gets the request id, useful for debugging or tracing.
            </summary>
            <value>The request id.</value>
        </member>
        <member name="P:Rebel.Cms.Web.Context.RoutableRequestContext.Application">
            <summary>
            Gets the Rebel application context which contains services which last for the lifetime of the application.
            </summary>
            <value>The application.</value>
        </member>
        <member name="P:Rebel.Cms.Web.Context.RoutableRequestContext.RegisteredComponents">
            <summary>
            Lists all plugin components registered
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Context.RoutableRequestContext.RoutingEngine">
            <summary>
            Gets the URL utility.
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Context.IBackOfficeRequestContext">
            <summary>
            Encapsulates information specific to a request handled by Rebel back-office
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Context.DefaultBackOfficeRequestContext.DisposeResources">
            <summary>
            Handles the disposal of resources. Derived from abstract class <see cref="T:Rebel.Framework.DisposableObject"/> which handles common required locking logic.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Context.DefaultBackOfficeRequestContext.PackageContext">
            <summary>
            Gets the package context.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Context.ConfigurationTaskContext.Task">
            <summary>
            The task used to construct the context
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Context.DefaultRenderModelFactory">
            <summary>
            The default IRenderModelFactory
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Context.DefaultRenderModelFactory.Create(System.Web.HttpContextBase,System.String)">
            <summary>
            Creates or returns an existing IRebelRenderModel based on the request data
            </summary>
            <param name="httpContext"></param>
            <param name="rawUrl"></param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.DependencyManagementExtensions">
            <summary>
            Extension methods for IContainerBuilder
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagementExtensions.RegisterModelBinders(Rebel.Framework.DependencyManagement.IContainerBuilder,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},Rebel.Framework.TypeFinder)">
            <summary>
            Register all model binders found in the specified Assemblies which are registered to types based
            on the ModelBinderForAttribute.
            </summary>
            <param name="containerBuilder"></param>
            <param name="assemblies"></param>
            <param name="typeFinder"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagementExtensions.RegisterModelBinders(Rebel.Framework.DependencyManagement.IContainerBuilder,System.Reflection.Assembly,Rebel.Framework.TypeFinder)">
            <summary>
            Register all model binders found in the specified Assembly which are registered to types based
            on the ModelBinderForAttribute.
            </summary>
            <param name="containerBuilder"></param>
            <param name="assembly"></param>
            <param name="typeFinder"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagementExtensions.RegisterControllers(Rebel.Framework.DependencyManagement.IContainerBuilder,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},Rebel.Framework.TypeFinder)">
            <summary>
            Register all controllers found in the specified assemblies
            </summary>
            <param name="containerBuilder"></param>
            <param name="assemblies"></param>
            <param name="typeFinder"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagementExtensions.RegisterControllers(Rebel.Framework.DependencyManagement.IContainerBuilder,System.Reflection.Assembly,Rebel.Framework.TypeFinder)">
            <summary>
            Register all controllers found in the specified Assembly
            </summary>
            <param name="containerBuilder"></param>
            <param name="assembly"></param>
            <param name="typeFinder"></param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.DependencyManagement.DemandBuilders.ModelMappingsDemandBuilder">
            <summary>
            registers all model mappers and resolvers into the container
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.DependencyManagement.DemandBuilders.MvcTypesDemandBuilder">
            <summary>
            registers the MVC types into the container
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.DependencyManagement.DemandBuilders.RebelContainerBuilder`1">
            <summary>
            A module that creates and build the IoC container that powers the Rebel core
            </summary>
            <typeparam name="TWebApp">The type of the web application defined in the web application's assembly</typeparam>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.DemandBuilders.RebelContainerBuilder`1.#ctor(`0)">
            <summary>
            Default constructor that uses the standard RebelComponentRegistrar as the IComponentRegistrar
            </summary>
            <param name="httpApp"></param>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.DemandBuilders.RebelContainerBuilder`1.#ctor(`0,Rebel.Cms.Web.DependencyManagement.IComponentRegistrar,Rebel.Cms.Web.Configuration.RebelSettings)">
            <summary>
            Custom constructor that can be used to assign a custom IComponentRegistrar
            </summary>
            <param name="httpApp"></param>
            <param name="componentRegistrar"></param>
            <param name="settings"></param>        
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.DemandBuilders.RebelContainerBuilder`1.Build(Rebel.Framework.DependencyManagement.IContainerBuilder,Rebel.Framework.DependencyManagement.IBuilderContext)">
            <summary>Builds the dependency demands required by this implementation. </summary>
            <param name="builder">The <see cref="T:Rebel.Framework.DependencyManagement.IContainerBuilder"/> .</param>
            <param name="builderContext"></param>
        </member>
        <member name="E:Rebel.Cms.Web.DependencyManagement.DemandBuilders.RebelContainerBuilder`1.ContainerBuilding">
            <summary>
            Event raised just before the container is built allow developers to register their own 
            objects in the container
            </summary>
        </member>
        <member name="E:Rebel.Cms.Web.DependencyManagement.DemandBuilders.RebelContainerBuilder`1.ContainerBuildingComplete">
            <summary>
            Event raised after the container is built allow developers to register their own 
            objects in the container
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.DependencyManagement.DemandBuilders.WebTypesDemandBuilder">
            <summary>
            Adds all abstracted web objects to the container per request
            </summary>
            <remarks>
            logic taken from the AutofacWebTypesModule: http://code.google.com/p/autofac/source/browse/src/Source/Autofac.Integration.Mvc/AutofacWebTypesModule.cs
            </remarks>
        </member>
        <member name="T:Rebel.Cms.Web.DependencyManagement.ComponentRegistrations">
            <summary>
            An object containing all of the meta data for all components/plugins registered
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.DependencyManagement.ComponentRegistrations.PropertyEditors">
            <summary>
            Returns all registered property editors
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.DependencyManagement.ComponentRegistrations.ParameterEditors">
            <summary>
            Returns all registered parameter editors
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.DependencyManagement.ComponentRegistrations.DashboardFilters">
            <summary>
            Gets the dashboard filters.
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.DependencyManagement.ComponentRegistrations.DashboardMatchRules">
            <summary>
            Returns all registered dashboard match rules
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.DependencyManagement.ComponentRegistrations.Tasks">
            <summary>
            Returns all the registered Tasks
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.DependencyManagement.ComponentRegistrations.SurfaceControllers">
            <summary>
            Returns all the registered Surface controllers
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.DependencyManagement.ComponentRegistrations.MenuItems">
            <summary>
            Returns all registered menu items
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.DependencyManagement.ComponentRegistrations.EditorControllers">
            <summary>
            Returns all registered editor controllers
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.DependencyManagement.ComponentRegistrations.TreeControllers">
            <summary>
            Returns all registered tree controllers
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.DependencyManagement.ComponentRegistrations.Permissions">
            <summary>
            Gets all registered permissions
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.DependencyManagement.ComponentRegistrations.MacroEngines">
            <summary>
            Gets all registered MacroEngines
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.DependencyManagement.PropertyEditorFactory">
            <summary>
            Used to resolve a PropertyEditor
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.CloneForArea``1(System.Web.Mvc.HtmlHelper{``0},System.String)">
            <summary>
            Creates a new HtmlHelper with a cloned context that points to the new area name, helpful for doing things such as
            EditorFor calls while ensuring that the view that is rendered is routed via this area.
            </summary>
            <param name="html"></param>
            <param name="areaName"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.Guid,System.Object,System.Object)">
            <summary>
            Renders a form for the specified controller id
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="editorId"></param>
            <param name="routeVals"></param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.Guid,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Renders a form for the specified controller id
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="editorId"></param>
            <param name="routeVals"></param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.EnablePartialViewValidation(System.Web.Mvc.HtmlHelper)">
            <summary>
            A call to this is required when we need unobtrusive validation in partial views when the Form element isn't being generated
            on this particular view.
            See: http://stackoverflow.com/questions/6401033/editorfor-not-rendering-data-validation-attributes-without-beginform
            </summary>
            <param name="helper"></param>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.RenderDashboard(System.Web.Mvc.HtmlHelper,Rebel.Cms.Web.Model.BackOffice.DashboardItemModel)">
            <summary>
            Renders a dashboard item
            </summary>
            <param name="html"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.EnsureRaw(System.Web.IHtmlString)">
            <summary>
            Ensures that the output of the IHtmlString is HtmlDecoded
            </summary>
            <param name="output"></param>
            <returns></returns>
            <remarks>
            Though the Raw() method normally works, this method was created because the Raw() method seems to ignore encoded attributes
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.TableHorizontal``1(System.Web.Mvc.HtmlHelper,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Web.WebPages.HelperResult},System.Object)">
            <summary>
            Creates an Html table based on the collection 
            which has a maximum numer of rows (expands horizontally)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="html"></param>
            <param name="collection"></param>
            <param name="maxRows"></param>
            <param name="template"></param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.TableVertical``1(System.Web.Mvc.HtmlHelper,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Web.WebPages.HelperResult},System.Object)">
            <summary>
            Creates an Html table based on the collection 
            which has a maximum number of cols (expands vertically)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="html"></param>
            <param name="collection"></param>
            <param name="maxCols"></param>
            <param name="template"></param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.WriteTable``1(``0[0:,0:],System.IO.TextWriter,System.Int32,System.Int32,System.Func{``0,System.Web.WebPages.HelperResult},System.Object)">
            <summary>
            Writes the table markup to the writer based on the item
            input and the pre-determined grid of items
            </summary>
            <typeparam name="T"></typeparam>
            <param name="grid"></param>
            <param name="writer"></param>
            <param name="maxRows"></param>
            <param name="maxCols"></param>
            <param name="template"></param>
            <param name="htmlAttributes"></param>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.UmbValidationSummary(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            The Rebel validation summary
            </summary>
            <param name="html"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.Join(System.Web.Mvc.HtmlHelper,System.Web.IHtmlString[])">
            <summary>
            This joins together any IHtmlString
            </summary>
            <param name="helper"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.Join(System.Web.Mvc.HtmlHelper,System.Func{System.Object,System.Web.WebPages.HelperResult}[])">
            <summary>
            This joins together any Razor template delegates
            </summary>
            <param name="helper"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.UmbCollapsePanel(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Boolean,System.Web.IHtmlString)">
            <summary>
            Creates an collapsable panel and renders a custom editor
            </summary>
            <param name="html"></param>
            <param name="collapsedTitle"></param>
            <param name="expandedTitle"></param>
            <param name="htmlId">The id to add for the div tag</param>
            <param name="showDeleteButton"></param>
            <param name="editor"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.UmbCollapsePanel(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Boolean,System.Func{System.Object,System.Web.WebPages.HelperResult})">
            <summary>
            Creates an collapsable panel and renders a custom editor
            </summary>
            <param name="html"></param>
            <param name="collapsedTitle"></param>
            <param name="expandedTitle"></param>
            <param name="htmlId"></param>
            <param name="showDeleteButton"></param>
            <param name="editor">any @Razor-Syntax</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.UmbCollapsePanel(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Boolean,System.Web.IHtmlString)">
            <summary>
            Creates an collapsable panel and renders a custom editor
            </summary>
            <param name="html"></param>
            <param name="expandedTitle"></param>
            <param name="showDeleteButton"></param>
            <param name="editor">
            Any IHtmlString
            </param>
            <param name="collapsedTitle"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.UmbCollapsePanel(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Boolean,System.Func{System.Object,System.Web.WebPages.HelperResult})">
            <summary>
            Creates an collapsable panel and renders a custom editor
            </summary>
            <param name="html"></param>
            <param name="collapsedTitle"></param>
            <param name="expandedTitle"></param>
            <param name="showDeleteButton"></param>
            <param name="editor"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.UmbDisplayId``1(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,Rebel.Framework.HiveId}},System.String,System.String)">
            <summary>
            Umbs the display id.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="html">The HTML.</param>
            <param name="expression">The expression.</param>
            <param name="description">The description.</param>
            <param name="tooltip">The tooltip.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.UmbDisplayFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String)">
            <summary>
            Creates a display for the field passed in and ensures it is styled correctly
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="html">The HTML.</param>
            <param name="expression">The expression.</param>
            <param name="description">The description.</param>
            <param name="tooltip">The tooltip.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.UmbEditor(System.Web.Mvc.HtmlHelper,System.String,System.Web.IHtmlString,System.String,System.String)">
            <summary>
            Creates a label and custom editor for an Rebel property and ensures it is styled correctly
            </summary>
            <param name="html">The HTML.</param>
            <param name="label">String expression for a label</param>
            <param name="editor">The editor.</param>
            <param name="description">The description.</param>
            <param name="tooltip">The tooltip.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.UmbEditor(System.Web.Mvc.HtmlHelper,System.String,System.Web.IHtmlString,System.Web.IHtmlString,System.String,System.String)">
            <summary>
            Creates a label, validation message and custom editor for an Rebel property and ensures it is styled correctly
            </summary>
            <param name="html">The HTML.</param>
            <param name="label">The label.</param>
            <param name="validationMessage">The validation message.</param>
            <param name="editor">The editor.</param>
            <param name="description">The description.</param>
            <param name="tooltip">The tooltip.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.UmbEditor(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String)">
            <summary>
            Creates a label, validation message and custom editor for an Rebel property and ensures it is styled correctly
            </summary>
            <param name="html">The HTML.</param>
            <param name="expression">The expression.</param>
            <param name="description">The description.</param>
            <param name="tooltip">The tooltip.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.UmbEditor(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a label, validation message and custom editor for an Rebel property and ensures it is styled correctly
            </summary>
            <param name="html">The HTML.</param>
            <param name="expression">The expression.</param>
            <param name="viewPath">The view path.</param>
            <param name="prefix">The prefix.</param>
            <param name="description">The description.</param>
            <param name="tooltip">The tooltip.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.UmbEditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Web.IHtmlString,System.String,System.String)">
            <summary>
            Creates a label and custom editor for an Rebel property and ensures it is styled correctly
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="html">The HTML.</param>
            <param name="labelFor">The label for.</param>
            <param name="editor">Any IHtmlString</param>
            <param name="description">The description.</param>
            <param name="tooltip">The tooltip.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.UmbEditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Web.IHtmlString,System.String,System.String)">
            <summary>
            Creates a label, validation message and custom editor for an Rebel property and ensures it is styled correctly
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="html">The HTML.</param>
            <param name="labelFor">The label for.</param>
            <param name="validationFor">The validation for.</param>
            <param name="editor">The editor.</param>
            <param name="description">The description.</param>
            <param name="tooltip">The tooltip.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.UmbEditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{System.Object,System.Web.WebPages.HelperResult},System.String,System.String)">
            <summary>
            Creates a label and custom editor for an Rebel property and ensures it is styled correctly
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="html">The HTML.</param>
            <param name="labelFor">The label for.</param>
            <param name="editor">Any number of razor template delegates</param>
            <param name="description">The description.</param>
            <param name="tooltip">The tooltip.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.UmbEditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{System.Object,System.Web.WebPages.HelperResult},System.String,System.String)">
            <summary>
            Creates a label, validation message and custom editor for an Rebel property and ensures it is styled correctly
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="html">The HTML.</param>
            <param name="labelFor">The label for.</param>
            <param name="validationFor">The validation for.</param>
            <param name="editor">The editor.</param>
            <param name="description">The description.</param>
            <param name="tooltip">The tooltip.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.UmbEditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String)">
            <summary>
            Creates a label and field for an Rebel property and ensures it is styled correctly
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="html">The HTML.</param>
            <param name="labelFor">the label to use for the property</param>
            <param name="editorFor">the editor to use for the property</param>
            <param name="description">The description.</param>
            <param name="tooltip">The tooltip.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.UmbEditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String)">
            <summary>
            Creates a label, validation message and field for an Rebel property and ensures it is styled correctly
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="html">The HTML.</param>
            <param name="labelFor">The label for.</param>
            <param name="validationFor">The validation for.</param>
            <param name="editorFor">The editor for.</param>
            <param name="description">The description.</param>
            <param name="tooltip">The tooltip.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.UmbEditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String,System.String,System.String,System.Boolean,System.Object)">
            <summary>
            Creates a label and field for an Rebel property and ensures it is styled correctly
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="html">The HTML.</param>
            <param name="labelFor">the label to use for the property</param>
            <param name="editorFor">the editor to use for the property</param>
            <param name="viewPath">The view path.</param>
            <param name="prefix">The prefix.</param>
            <param name="description">The description.</param>
            <param name="tooltip">The tooltip.</param>
            <param name="showRebelLabel">Whether or not the editor will render the standard Rebel field label or this editor will occupy all of the editor space</param>
            <param name="viewData">additional view data, by default this is null</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.UmbEditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String,System.String,System.String,System.Boolean,System.Object)">
            <summary>
            Creates a label, validation message and field for an Rebel property and ensures it is styled correctly
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="html">The HTML.</param>
            <param name="labelFor">The label for.</param>
            <param name="validationFor">The validation for.</param>
            <param name="editorFor">The editor for.</param>
            <param name="viewPath">The view path.</param>
            <param name="prefix">The prefix.</param>
            <param name="description">The description.</param>
            <param name="tooltip">The tooltip.</param>
            <param name="showRebelLabel">if set to <c>true</c> [show rebel label].</param>
            <param name="viewData">The view data.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.UmbEditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String)">
            <summary>
            Creates a label, validation message and field for an Rebel property and ensures it styled correctly
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="html">The HTML.</param>
            <param name="expression">The expression.</param>
            <param name="description">The description.</param>
            <param name="tooltip">The tooltip.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.UmbEditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String,System.String,System.String)">
            <summary>
            Creates a label and field for an rebel property and ensures it is styled correctly
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="html">The HTML.</param>
            <param name="expression">The expression.</param>
            <param name="viewPath">The editor template to render for the editor</param>
            <param name="prefix">The html prefix for the editor</param>
            <param name="description">The description.</param>
            <param name="tooltip">The tooltip.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.UmbEditorMarkup(System.Web.IHtmlString,System.Web.IHtmlString,System.Web.IHtmlString,System.String,System.String)">
            <summary>
            Renders the output for the rebel editor markup
            </summary>
            <param name="label">The label.</param>
            <param name="editor">The editor.</param>
            <param name="validationMessage">The validation message.</param>
            <param name="description">The description.</param>
            <param name="tooltip">The tooltip.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.UmbEditorMarkup(System.Web.IHtmlString,System.Web.IHtmlString)">
            <summary>
            Renders the output for a full width editor without the standard Rebel label
            </summary>
            <param name="editor"></param>
            <param name="validationMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.RenderPropertyEditorUIElements(System.Web.Mvc.HtmlHelper,System.Collections.Generic.IEnumerable{Rebel.Cms.Web.Model.BackOffice.Editors.ContentProperty})">
            <summary>
            Renders the property editor UI elements.
            </summary>
            <param name="html">The HTML.</param>
            <param name="customProperties">The custom properties.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.ToJsonString(System.Web.Mvc.HtmlHelper,System.Object)">
            <summary>
            Convert an object to a JSON string with camelCase formatting
            </summary>
            <param name="html"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.HtmlHelperEditorExtensions.ToJsonString(System.Web.Mvc.HtmlHelper,System.Object,Rebel.Framework.PropertyNamesCaseType)">
            <summary>
            Convert an object to a JSON string with the specified formatting
            </summary>
            <param name="html"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Mapping.EntitySchemaToSchemaEditorModel`1">
            <summary>
            Maps properties from EntitySchema to SchemaEditorModel existing objects
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Mapping.TypedEntityToContentProperties`1">
            <summary>
            This will look up all of the defined properties on the TypedEntity's EntitySchema and ensure they 
            exist in the TypedEntity's TypedAttributeCollection, then we'll map the TypedAttributeCollection to the ContentProperty collection.
            </summary>
            <remarks>
            The re-mapping of new properties is required because if new attribution schema definition properties are created, then 
            need to be reflected in the content since when we add/remove a doc type property we don't go and create a new revision for 
            every content peice that is associated with the document type.
            </remarks>
        </member>
        <member name="T:Rebel.Cms.Web.Mapping.SchemaEditorModelToEntitySchema`1">
            <summary>
            Maps properties from SchemaEditorModel to EntitySchema existing objects
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ActionFilters.InstalledFilterAttribute">
            <summary>
            Requires that the application is installed
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ActionFilters.RebelInstallAuthorizeAttribute">
            <summary>
            Ensures authorization occurs for the installer if it has already completed. If install has not yet occured
            then the authorization is successful
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.RebelInstallAuthorizeAttribute.AuthorizeCore(System.Web.HttpContextBase)">
            <summary>
            Ensures that the user must be in the Administrator or the Install role
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ActionInvokers.RebelInstallActionInvoker">
            <summary>
            Ensures that any filter of type RebelInstallAction get's an IApplicationContext set
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ControllerFactories.MasterControllerFactory">
            <summary>
            A controller factory which uses an internal list of <see cref="T:Rebel.Cms.Web.Mvc.ControllerFactories.IFilteredControllerFactory"/> in order to invoke 
            different controller factories dependent upon their implementation of <see cref="M:Rebel.Cms.Web.Mvc.ControllerFactories.IFilteredControllerFactory.CanHandle(System.Web.Routing.RequestContext)"/> for the current
            request. Allows circumvention of MVC3's singly registered IControllerFactory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ControllerFactories.MasterControllerFactory.RegisterFactory(Rebel.Cms.Web.Mvc.ControllerFactories.IFilteredControllerFactory)">
            <summary>
            Registers the factory.
            </summary>
            <param name="slaveFactory">The slave factory.</param>
            <remarks></remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ControllerFactories.MasterControllerFactory.CreateController(System.Web.Routing.RequestContext,System.String)">
            <summary>
            Creates the specified controller by using the specified request context.
            </summary>
            <param name="requestContext">The context of the HTTP request, which includes the HTTP context and route data.</param>
            <param name="controllerName">The name of the controller.</param>
            <returns>The controller.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="requestContext"/> parameter is null.</exception>
              
            <exception cref="T:System.ArgumentException">The <paramref name="controllerName"/> parameter is null or empty.</exception>
            <remarks></remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ControllerFactories.MasterControllerFactory.ReleaseController(System.Web.Mvc.IController)">
            <summary>
            Releases the specified controller.
            </summary>
            <param name="controller">The controller to release.</param>
            <remarks></remarks>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ControllerFactories.RenderControllerFactory">
            <summary>
            A controller factory for the render pipeline of Rebel 1. This controller factory tries to create a controller with the supplied
            name, and falls back to RebelController if none was found.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ControllerFactories.RenderControllerFactory.#ctor(Rebel.Cms.Web.Context.IRebelApplicationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ControllerFactories.RenderControllerFactory.CanHandle(System.Web.Routing.RequestContext)">
            <summary>
            Determines whether this instance can handle the specified request.
            </summary>
            <param name="request">The request.</param>
            <returns><c>true</c> if this instance can handle the specified request; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ControllerFactories.RenderControllerFactory.CreateController(System.Web.Routing.RequestContext,System.String)">
            <summary>
            Creates the specified controller by using the specified request context.
            </summary>
            <returns>
            The controller.
            </returns>
            <param name="requestContext">The request context.</param><param name="controllerName">The name of the controller.</param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ControllerFactories.RenderControllerFactory.GetControllerSessionBehavior(System.Web.Routing.RequestContext,System.String)">
            <summary>
            Gets the controller's session behavior.
            </summary>
            <returns>
            The controller's session behavior.
            </returns>
            <param name="requestContext">The request context.</param><param name="controllerName">The name of the controller whose session behavior you want to get.</param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ControllerFactories.RenderControllerFactory.ReleaseController(System.Web.Mvc.IController)">
            <summary>
            Releases the specified controller.
            </summary>
            <param name="controller">The controller.</param>
        </member>
        <member name="P:Rebel.Cms.Web.Mvc.ControllerFactories.RenderControllerFactory.ApplicationContext">
            <summary>
            Gets the application context.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ControllerFactories.RenderControllerFactory.OverridenDefaultControllerFactory">
            <summary>
            By default, <see cref="T:System.Web.Mvc.DefaultControllerFactory"/> only exposes <see cref="M:System.Web.Mvc.IControllerFactory.CreateController(System.Web.Routing.RequestContext,System.String)"/> which throws an exception
            if the controller is not found. Since we want to try creating a controller, and then fall back to <see cref="T:Rebel.Cms.Web.Mvc.Controllers.RebelController"/> if one isn't found,
            this nested class changes the visibility of <see cref="T:System.Web.Mvc.DefaultControllerFactory"/>'s internal methods in order to not have to rely on a try-catch.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Routing.IncludeExcludeRouteConstraint.Match(System.Web.HttpContextBase,System.Web.Routing.Route,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteDirection)">
            <summary>
            Determines whether the URL parameter contains a valid value for this constraint.
            </summary>
            <returns>
            true if the URL parameter contains a valid value; otherwise, false.
            </returns>
            <param name="httpContext">An object that encapsulates information about the HTTP request.</param><param name="route">The object that this constraint belongs to.</param><param name="parameterName">The name of the parameter that is being checked.</param><param name="values">An object that contains the parameters for the URL.</param><param name="routeDirection">An object that indicates whether the constraint check is being performed when an incoming request is being handled or when a URL is being generated.</param>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ViewEngines.RenderViewEngine">
            <summary>
            A view engine to look into the template location specified in the config for the front-end/Rendering part of the cms,
            this includes paths to render partial macros and media item templates.
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ViewEngines.RenderViewEngine.#ctor(Rebel.Cms.Web.Configuration.RebelSettings,Rebel.Cms.Web.Context.IRenderModelFactory)">
            <summary>
            Constructor
            </summary>
            <param name="settings"></param>
            <param name="renderModelFactory"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ViewEngines.RenderViewEngine.ShouldFindView(System.Web.Mvc.ControllerContext,System.Boolean)">
            <summary>
            Determines if the view should be found, this is used for view lookup performance and also to ensure 
            less overlap with other user's view engines. This will return true if the Rebel back office is rendering
            and its a partial view or if the rebel front-end is rendering but nothing else.
            </summary>
            <param name="controllerContext"></param>
            <param name="isPartial"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RenderViewModelExtensions.GetPath(Rebel.Cms.Web.Model.Content)">
            <summary>
            Gets the path of the content 
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Rebel.Cms.Web.RenderViewModelExtensions.NiceUrl(Rebel.Cms.Web.Model.Content)">
            <summary>
            Returns the url 
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RenderViewModelExtensions.AllAncestorIds(Rebel.Framework.Persistence.Model.TypedEntity)">
            <summary>
            Gets all ancestor ids of the <paramref name="entity"/> regardless of publish status.
            </summary>
            <param name="entity">The content.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RenderViewModelExtensions.AllDescendantIds(Rebel.Framework.Persistence.Model.TypedEntity)">
            <summary>
            Gets all descendant ids of the <paramref name="entity"/> regardless of publish status.
            </summary>
            <param name="entity">The content.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RenderViewModelExtensions.AllChildIds(Rebel.Framework.Persistence.Model.TypedEntity)">
            <summary>
            Gets all descendant ids of the <paramref name="entity"/> regardless of publish status.
            </summary>
            <param name="entity">The content.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RenderViewModelExtensions.AllChildIds(Rebel.Framework.Persistence.Model.TypedEntity,Rebel.Hive.IHiveManager)">
            <summary>
            Gets all descendant ids of the <paramref name="entity"/> regardless of publish status.
            </summary>
            <param name="entity">The content.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RenderViewModelExtensions.AsDynamic(Rebel.Cms.Web.Model.Content)">
            <summary>
            Returns a dynamic representation of the provided content object.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Rebel.Cms.Web.RenderViewModelExtensions.AsDynamic(System.Collections.Generic.IEnumerable{Rebel.Cms.Web.Model.Content})">
            <summary>
            Turns a list of content items into a list of dynamic content items
            </summary>
            <param name="contentItems"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RoutingEngineExtensions.GetUrl(Rebel.Cms.Web.Routing.IRoutingEngine,Rebel.Framework.HiveId)">
            <summary>
            Resolves the url for the specified id.
            </summary>
            <param name="routingEngine"></param>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Routing.ReadonlyHostnameCollection">
            <summary>
            A readonly collection of HostnameEntry's
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Routing.ReadonlyHostnameCollection.Item(Rebel.Framework.HiveId)">
            <summary>
            Returns all host name entries for the specified content id
            </summary>
            <param name="contentId"></param>
            <returns></returns>
        </member>
        <member name="P:Rebel.Cms.Web.Routing.ReadonlyHostnameCollection.Item(System.String)">
            <summary>
            Returns the host name entry for the specified domain
            </summary>
            <param name="hostname"></param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Routing.UrlResolutionResult">
            <summary>
            The result that is returned when a URL is generated for an entity
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Security.UserData">
            <summary>
            Data structure used to store information in the authentication cookie
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Tasks.ClearMacroCacheTask">
            <summary>
            Calls <see cref="M:Rebel.Cms.Web.Macros.MacroRenderer.ClearCacheByPrefix(Rebel.Framework.Context.IFrameworkContext)"/> should any new changes be made to relations or [un]published items.
            </summary>
            <remarks>Note: This is a simple version 1 as per requirements, and currently clears all caches rather than just those particular to the data that is changing. 
            For future modifications, look into using the IFrameworkContext.Caches.ExtendedLifetime cache system which can invalidate a cache granularly based on a delegate.</remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Templates.TemplateParser.Parse(Rebel.Framework.Persistence.Model.IO.File)">
            <summary>
            Parses the specified template for a Layout and any RenderSections.
            </summary>
            <param name="templateFile">The template file.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Templates.TemplateParser.Parse(System.String)">
            <summary>
            Parses the specified template for a Layout and any RenderSections.
            </summary>
            <param name="templateFile">The template file.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.TypedEntityExtensions.IsContent(Rebel.Framework.Persistence.Model.TypedEntity,Rebel.Hive.ProviderGrouping.IReadonlyGroupUnit{Rebel.Hive.RepositoryTypes.IContentStore})">
            <summary>
            Determines whether the specified entity is content.
            </summary>
            <param name="entity">The entity.</param>
            <param name="uow"></param>
            <returns>
              <c>true</c> if the specified entity is content; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.TypedEntityExtensions.IsMedia(Rebel.Framework.Persistence.Model.TypedEntity,Rebel.Hive.ProviderGrouping.IReadonlyGroupUnit{Rebel.Hive.RepositoryTypes.IContentStore})">
            <summary>
            Determines whether the specified entity is media.
            </summary>
            <param name="entity">The entity.</param>
            <param name="uow"></param>
            <returns>
              <c>true</c> if the specified entity is media; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Rebel.Cms.Web.RebelHelper">
            <summary>
            A utility class for use with front-end development containing many methods for accessing common APIs in Rebel
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.RebelHelper.GetUrl(Rebel.Framework.Persistence.Model.TypedEntity)">
            <summary>
            Gets the URL for the given entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RebelHelper.GetUrl(Rebel.Framework.HiveId)">
            <summary>
            Gets the URL for the entity with the given id.
            </summary>
            <param name="entityId">The entity id.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RebelHelper.GetUrl(System.String)">
            <summary>
            Gets the URL for the entity with the given id.
            </summary>
            <param name="entityId">The entity id.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RebelHelper.GetMediaUrl(Rebel.Framework.Persistence.Model.TypedEntity)">
            <summary>
            Gets the URL of the file in the first upload field found on the given TypedEntity
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RebelHelper.GetMediaUrl(Rebel.Framework.Persistence.Model.TypedEntity,System.String)">
            <summary>
            Gets the URL of the file in the upload field with the given property alias on the given TypedEntity
            </summary>
            <param name="entity">The entity.</param>
            <param name="propertyAlias">The property alias.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RebelHelper.GetMediaUrl(Rebel.Framework.Persistence.Model.TypedEntity,System.Int32)">
            <summary>
            Gets the URL of the file in the first upload field found on the given TypedEntity at the specific size
            </summary>
            <param name="entity">The entity.</param>
            <param name="size">The size (must be a prevalue on the upload property editor).</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RebelHelper.GetMediaUrl(Rebel.Framework.Persistence.Model.TypedEntity,System.String,System.Int32)">
            <summary>
            Gets the URL of the file in the upload field with the given property alias on the given TypedEntity at the specific size
            </summary>
            <param name="entity">The entity.</param>
            <param name="propertyAlias">The property alias.</param>
            <param name="size">The size (must be a prevalue on the upload property editor).</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RebelHelper.GetMediaUrl(Rebel.Framework.HiveId)">
            <summary>
            Gets the URL of the file in the first upload field found on the TypedEntity with the given id
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RebelHelper.GetMediaUrl(Rebel.Framework.HiveId,System.String)">
            <summary>
            Gets the URL of the file in the upload field with the given property alias on the TypedEntity with the given id
            </summary>
            <param name="id">The id.</param>
            <param name="propertyAlias">The property alias.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RebelHelper.GetMediaUrl(Rebel.Framework.HiveId,System.Int32)">
            <summary>
            Gets the URL of the file in the first upload field found on the TypedEntity with the given id, at the specified size
            </summary>
            <param name="id">The id.</param>
            <param name="size">The size (must be a prevalue on the upload property editor).</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RebelHelper.GetMediaUrl(Rebel.Framework.HiveId,System.String,System.Int32)">
            <summary>
            Gets the URL of the file in the upload field with the given property alias on the TypedEntity with the given id, at the specified size
            </summary>
            <param name="id">The id.</param>
            <param name="propertyAlias">The property alias.</param>
            <param name="size">The size (must be a prevalue on the upload property editor).</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RebelHelper.GetMediaUrl(System.String)">
            <summary>
            Gets the URL of the file in the first upload field found on the TypedEntity with the given id
            </summary>
            <param name="idOrPropertyAlias">The id or property alias.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RebelHelper.GetMediaUrl(System.String,System.String)">
            <summary>
            Gets the URL of the file in the upload field with the given property alias on the TypedEntity with the given id
            </summary>
            <param name="id">The id.</param>
            <param name="propertyAlias">The property alias.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RebelHelper.GetMediaUrl(System.String,System.Int32)">
            <summary>
            Gets the URL of the file in the first upload field found on the TypedEntity with the given id, at the specified size
            </summary>
            <param name="idOrPropertyAlias">The id or property alias.</param>
            <param name="size">The size (must be a prevalue on the upload property editor).</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RebelHelper.GetMediaUrl(System.String,System.String,System.Int32)">
            <summary>
            Gets the URL of the file in the upload field with the given property alias on the TypedEntity with the given id, at the specified size
            </summary>
            <param name="id">The id.</param>
            <param name="propertyAlias">The property alias.</param>
            <param name="size">The size (must be a prevalue on the upload property editor).</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RebelHelper.GetEntityById(Rebel.Framework.HiveId)">
            <summary>
            Gets the typed entity by the given id.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RebelHelper.GetEntityById(System.String)">
            <summary>
            Gets the typed entity by the given id.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RebelHelper.RenderMacro(System.String)">
            <summary>
            Renders the macro with the specified alias.
            </summary>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RebelHelper.RenderMacro(System.String,System.Object)">
            <summary>
            Renders the macro with the specified alias, passing in the specified parameters.
            </summary>
            <param name="alias">The alias.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RebelHelper.GetPreValueModel(Rebel.Framework.HiveId)">
            <summary>
            Gets the pre value model for the datatype with the specified id.
            </summary>
            <param name="dataTypeId">The data type id.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RebelHelper.GetPreValueModel(System.String)">
            <summary>
            Gets the pre value model for the datatype with the specified id.
            </summary>
            <param name="dataTypeId">The data type id.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RebelHelper.FieldValues(System.String)">
            <summary>
            Return all values stored for a property
            </summary>
            <param name="fieldAlias"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RebelHelper.FieldValues(Rebel.Cms.Web.Model.Content,System.String)">
            <summary>
            Return all values stored for a property
            </summary>
            <param name="currentPage"></param>
            <param name="fieldAlias"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RebelHelper.FieldKeyValues(System.String)">
            <summary>
            Return all key/values stored for a property
            </summary>
            <param name="fieldAlias"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RebelHelper.FieldKeyValues(Rebel.Cms.Web.Model.Content,System.String)">
            <summary>
            Return all key/values stored for a property
            </summary>
            <param name="currentPage"></param>
            <param name="fieldAlias"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RebelWebApplication.#ctor(System.Web.HttpApplication,Rebel.Framework.DependencyManagement.AbstractContainerBuilder,System.Func{Rebel.Framework.DependencyManagement.IDependencyResolver,System.Web.Mvc.IDependencyResolver},System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Constructor which sets up custom logic to register Areas, Global Filters and standard MVC routes
            </summary>
            <param name="httpApplication"></param>
            <param name="containerBuilder"></param>
            <param name="mvcResolverFactory"></param>
            <param name="registerAreas"></param>
            <param name="registerFilters"></param>
            <param name="registerCustomRoutes"></param>
            <param name="registerDefaultRoutes"> </param>
        </member>
        <member name="M:Rebel.Cms.Web.RebelWebApplication.#ctor(System.Web.HttpApplication,Rebel.Framework.DependencyManagement.AbstractContainerBuilder,System.Func{Rebel.Framework.DependencyManagement.IDependencyResolver,System.Web.Mvc.IDependencyResolver})">
            <summary>
            Constructor which sets up the default logic to register Areas, Global Filters and standard MVC routes
            </summary>
            <param name="httpApplication"></param>
            <param name="containerBuilder"></param>
            <param name="mvcResolverFactory"></param>
        </member>
        <member name="M:Rebel.Cms.Web.RebelWebApplication.Boot(Rebel.Cms.Web.System.Boot.BootManager)">
            <summary>
            Boots the specified boot manager. This method can be overriden if implementors wish to modify the environment prior to Rebel booting and building its dependency containers.
            </summary>
            <param name="bootManager">The boot manager.</param>
        </member>
        <member name="M:Rebel.Cms.Web.RebelWebApplication.OnContainerBuilding(System.Object,Rebel.Cms.Web.DependencyManagement.DemandBuilders.ContainerBuilderEventArgs)">
            <summary>
            Event handler allowing developers to register their own types in the container
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Rebel.Cms.Web.RebelWebApplication.CreateBootManager">
            <summary>
            Creates the boot manager.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rebel.Cms.Web.RebelWebApplication.Application">
            <summary>
            Gets the application.
            </summary>
            <value>The application.</value>
        </member>
        <member name="M:Rebel.Cms.Web.UrlResolutionResultExtensions.IsSuccess(Rebel.Cms.Web.Routing.UrlResolutionResult)">
            <summary>
            If the URL Resolution was successful (didn't return an error status)
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Routing.UrlResolutionStatus">
            <summary>
            The status returned when a URL is resolved for an entity
            </summary>
            <remarks>Developer note: if modifying or adding entries, there is code such as <see cref="M:Rebel.Cms.Web.UrlResolutionResultExtensions.IsSuccess(Rebel.Cms.Web.Routing.UrlResolutionResult)"/> which checks the integer value of these statusses</remarks>
        </member>
        <member name="F:Rebel.Cms.Web.Routing.UrlResolutionStatus.SuccessWithoutHostname">
            <summary>
            The URL was generated without a hostname
            </summary>
            <remarks>
            This occurs in 2 situations: When a call to generate the URL is made from the context of a node in the non-hostname branch, or
            when a call is made to generate a URL from the context of a node in a hostname branch for another node node in the same hostname
            umbrella and the current hostname in the HttpContext is equal to the hostname assigned.
            </remarks>
        </member>
        <member name="F:Rebel.Cms.Web.Routing.UrlResolutionStatus.SuccessWithHostname">
            <summary>
            THe URL was generated with a hostname
            </summary>
            <remarks>
            This occurs when a call is made to GetFullUrlsForEntity() or when a call is made to generate a URL for an entity that exists in a hostname branch
            but the call is made when the hostname in the HttpContext is not equal to the hostname assigned to the branch.
            </remarks>
        </member>
        <member name="F:Rebel.Cms.Web.Routing.UrlResolutionStatus.FailedRequiresHostname">
            <summary>
            Url generation failed because the URL requested was for a node that exists on a hostname branch but no hostname is assigned
            </summary>
            <remarks>
            This occurs when there are 2 root branches without hostnames and a call is made to generate a URL for an entity on the 2nd root branch which 
            requires that a hostname is assigned.
            </remarks>
        </member>
        <member name="F:Rebel.Cms.Web.Routing.UrlResolutionStatus.FailedNotRoutableFromCurrentHost">
            <summary>
            Occurs when a URL is requested from the context of a branch with an assigned hostname 
            for an entity that exists in a branch without hostnames assigned and the generated URL already 
            matches a relative URL in the current hostname branch.
            </summary>
            <example>
            Here's a tree structure, the root 'hello' node has the domain 'hello.com' assigned to it:
            - welcome				/
            -- my (id = 1)			/my
            --- name				/my/name
            ---- is					/my/name/is
            ----- shannon			/my/name/is/shannon
            - hello (hello.com)		hello.com						
            -- my (id = 22)			hello.com/my					
            --- name				hello.com/my/name
            ---- is					hello.com/my/name/is
            ----- shannon			hello.com/my/name/is/shannon
            
            When rendering the template for: http://hello.com/my we make a call to:
            NiceUrl(22)
            this is going to return = "/my"; 
            without the domain prefix because we are curring rendering in the domain: hello.com
            (another reason we cannot prefix the domain is because there may be many domains assigned to this node/branch)
            
            In the same template we make a call to:
            NiceUrl(1)
            This is going to throw a YSOD because normally in the first root branch this would generate a "/my" url but that is already a relative URL to the current hello.com domain. 
            This means that we cannot link to entity with id=1 from the branch hello.com
            </example>
        </member>
        <member name="F:Rebel.Cms.Web.Routing.UrlResolutionStatus.FailedNotPublished">
            <summary>
            Cannot generate url for non-published node
            </summary>
        </member>
        <member name="F:Rebel.Cms.Web.Routing.UrlResolutionStatus.OnlyDomainUrlsValid">
            <summary>
            A url is resolvable, but only one which has a hostname assigned
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Security.RebelBackOfficeIdentity">
            <summary>
            A custom user identity for the Rebel backoffice
            </summary>
            <remarks>
            All values are lazy loaded for performance reasons as the constructor is called for every single request
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.System.Boot.BootManager.MvcAreaRegistration(System.Action)">
            <summary>
            Assigns the method to register all MVC Areas
            </summary>
            <remarks>
            the registrationMethod will be called just before the RenderBootstrapper is executed, but after the CmsBootstrapper.
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.System.Boot.BootManager.MvcGlobalFilterRegistration(System.Action)">
            <summary>
            Registers the MVC Global filters
            </summary>
            <param name="registrationMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.System.Boot.BootManager.MvcCustomRouteRegistration(System.Action)">
            <summary>
            Creates custom MVC routes
            </summary>
            <param name="registrationMethod"></param>
            <returns></returns>
            <remarks>
            This method will be called before the Rebel catch all route is registered
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.System.Boot.BootManager.MvcDefaultRouteRegistration(System.Action)">
            <summary>
            Creates the default MVC routes
            </summary>
            <param name="registrationMethod"></param>
            <returns></returns>
            <remarks>
            the registrationMethod will be called after the Rebel catch all route is registered
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.System.Boot.BootManager.Boot">
            <summary>
             Wires everything up
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.IO.DocumentTypeIconFileResolver">
            <summary>
            Looks up the document type icons and returns a list of Icon objects
            </summary>
            <remarks>
            This will lookup all icon files and then search for any files with an associated CSS file which is named with 
            the same name as the icon. This indicates that the the image file is a sprite file and the CSS file defines the sprites.
            If this is found, we will remove the sprite icon file from the list, then parse it's sprite names from the CSS file and add their
            names to the collection.
            </remarks>
        </member>
        <member name="T:Rebel.Cms.Web.Mapping.AttributeTypeToPropertyEditorId">
            <summary>
            Resolves a Property editor Id from an AttributeType
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.ModelStateExtensions.Merge(System.Web.Mvc.ModelStateDictionary,System.Web.Mvc.ModelStateDictionary,System.String)">
            <summary>
            Merges ModelState that has names matching the prefix
            </summary>
            <param name="state"></param>
            <param name="dictionary"></param>
            <param name="prefix"></param>
        </member>
        <member name="M:Rebel.Cms.Web.ModelStateExtensions.IsValid(System.Web.Mvc.ModelStateDictionary,System.String)">
            <summary>
            Checks if there are any model errors on any fields containing the prefix
            </summary>
            <param name="state"></param>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ModelStateExtensions.AddDataValidationError(System.Web.Mvc.ModelStateDictionary,System.String)">
            <summary>
            Adds an error to the model state that has to do with data validation, this is generally used for JSON responses
            </summary>
            <param name="state"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:Rebel.Cms.Web.ModelStateExtensions.ToJsonErrors(System.Web.Mvc.ModelStateDictionary)">
            <summary>
            Serializes the ModelState to JSON for JavaScript to interrogate the errors
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.InstallController.Database">
            <summary>
            Shows the UI to input the database connection details
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.InstallController.DatabaseForm(Rebel.Cms.Web.Model.Install.DatabaseInstallModel)">
            <summary>
            Creates the configurations files based on the posted values, then redirects the action to initiate the installation
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.InstallController.DatabaseInstall">
            <summary>
            Displays a simple view that makes an ajax call to restart the app and install the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.InstallController.CreateUser">
            <summary>
            Creates the user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.InstallController.CreateUserForm(Rebel.Cms.Web.Model.Install.CreateNewUserModel)">
            <summary>
            Creates the user form.
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.InstallController.StarterKit">
            <summary>
            Displays the UI to install a starter kit
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.InstallController.StarterKitForm(System.String)">
            <summary>
            Handles the post to install a starter kit and presents a display that makes an ajax call to restart the app and install the kit
            </summary>
            <param name="starterKitId"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.InstallController.PostStarterKitInstall(System.String)">
            <summary>
            An action to recycle app domain after the starter kit is intalled
            </summary>
            <param name="id">The Hive id of the package</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.InstallController.IconProxy(System.String,System.String)">
            <summary>
            Icons the proxy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.InstallController.PerformRecycleApplication(System.Boolean)">
            <summary>
            Actually does the shutting down of the app which is called by ajax, if onlyCheck is true, this will just
            return the status
            </summary>
            <param name="onlyCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.InstallController.PerformInstall(System.Boolean)">
            <summary>
            Does the installation of Hive providers based on the db connection info
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.InstallController.RunPackageActions(System.String)">
            <summary>
            Runs the actions for a package, this is generally run after the app pool is recycled
            </summary>
            <param name="id">the nuget id of the package</param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ModelBinders.BackOffice.DocumentTypeModelBinder">
            <summary>
            Model binder for DocumentTypeEditorModel
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ModelBinders.BackOffice.DocumentTypeModelBinder.BindProperty(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Binds custom properties that the default model binder wont be able to bind
            </summary>
            <param name="controllerContext"></param>
            <param name="bindingContext"></param>
            <param name="propertyDescriptor"></param>
        </member>
        <member name="T:Rebel.Cms.Web.DependencyManagement.ModelBinderForAttribute">
            <summary>
            Specifies that the target class is capable of binding a particular model
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.ModelBinderForAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebel.Cms.Web.DependencyManagement.ModelBinderForAttribute"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
        </member>
        <member name="P:Rebel.Cms.Web.DependencyManagement.ModelBinderForAttribute.TargetType">
            <summary>
            Gets the type of the target.
            </summary>
            <value>The type of the target.</value>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ModelBinders.BackOffice.FileEditorModelBinder">
            <summary>
            Model binder for the FileEditorModel
            </summary>
            <remarks>
            The FileEditorModel doesn't have an empty constructor so this model binder simply creates it for the underlying DefaultModelBinder
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ModelBinders.BackOffice.FileEditorModelBinder.CreateModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext,System.Type)">
            <summary>
            Need to custom create the model since theres no empty constructor for the FileEditorModel
            </summary>
            <param name="controllerContext"></param>
            <param name="bindingContext"></param>
            <param name="modelType"></param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ModelBinders.SizeModelBinder">
            <summary>
            Model binder for the Size struct
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ActionFilters.PersistTabIndexOnRedirectAttribute">
            <summary>
            This checks if the result is a RedirectToRouteResult and if so appends a 'tabindex' query string 
            with the 'ActiveTabIndex' parameter in the ValueProvider (the key can be customized)
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.PersistTabIndexOnRedirectAttribute.#ctor">
            <summary>
            Constructor specifying "ActiveTabIndex" as the default key
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.PersistTabIndexOnRedirectAttribute.#ctor(System.String)">
            <summary>
            Constructor allowing you to specify the post data key to use to send as a query string to the redirect
            </summary>
            <param name="postValueKey"></param>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ActionFilters.SuccessfulOnRedirectAttribute">
            <summary>
            This checks if the result is a RedirectToRouteResult and if so either:
             - appends a 'success' query string with the parameter specified in the RouteData
             - Or, if a cookie is chosen, a new cookie will be created with the value of the parameter 
                specified in the RouteData and a 'success' query string will be appended with the cookie id that was created
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.SuccessfulOnRedirectAttribute.EnsureRouteData(System.Web.Mvc.Controller,System.String,System.Object)">
            <summary>
            Utility for ensuring that the correct key/value is in the controller context's route data
            for the ActionFilter to perform its filtering properly. Useful for injecting the key/value
            when the route data doesn't already exist in the request
            </summary>
            <param name="controller"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.SuccessfulOnRedirectAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rebel.Cms.Web.Mvc.ActionFilters.SuccessfulOnRedirectAttribute"/> class.
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.SuccessfulOnRedirectAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebel.Cms.Web.Mvc.ActionFilters.SuccessfulOnRedirectAttribute"/> class.
            </summary>
            <param name="routeDataKey">The route data key.</param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.SuccessfulOnRedirectAttribute.GetTempDataKey(System.Web.Mvc.ControllerContext)">
            <summary>
            Returns the request id as the temp data key
            </summary>
            <param name="filterContext"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.SuccessfulOnRedirectAttribute.AddQueryString(System.Web.Mvc.RedirectToRouteResult,System.Web.Mvc.ActionExecutedContext)">
            <summary>
            Checks if we are using a cookie to store data or just the query string, if using the cookie then passes logic 
            to the base class, otherwise puts the query string value in 
            </summary>
            <param name="result"></param>
            <param name="filterContext"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.SuccessfulOnRedirectAttribute.CreateCookie(System.Web.Mvc.ResultExecutedContext)">
            <summary>
            Only create the cookie if its specified
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.SuccessfulOnRedirectAttribute.GetTempDataValue(System.Web.Mvc.ControllerContext)">
            <summary>
            Returns the value to be stored in the cookie or query string
            </summary>
            <param name="filterContext"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.SuccessfulOnRedirectAttribute.GetValueFromRoute(System.Web.Mvc.ControllerContext)">
            <summary>
            Returns the value to be stored in the cookie or query string
            </summary>
            <param name="controllerContext"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.SuccessfulOnRedirectAttribute.GetController(System.Web.Mvc.IController)">
            <summary>
            Gets the BackOfficeController type from the filter context's controller instance
            </summary>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="P:Rebel.Cms.Web.Mvc.ActionFilters.SuccessfulOnRedirectAttribute.IsRequired">
            <summary>
            If the routeDataKey is required to be found in the route data, if true (default) then an exception will be thrown if the route data key is missing
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Mvc.ActionFilters.SuccessfulOnRedirectAttribute.EnableCookieMode">
            <summary>
            Will create a cookie with the value instead of appending the value in the query string
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.SupportClientNotificationsAttribute.GetTempDataKey(System.Web.Mvc.ControllerContext)">
            <summary>
            Returns the request id as the temp data key
            </summary>
            <param name="filterContext"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.SupportClientNotificationsAttribute.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
            <summary>
            Ensures that the controller is of the required type, if so lets execution continue on the base class
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.SupportClientNotificationsAttribute.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
            <summary>
            Ensures that the controller is of the required type, if so lets execution continue on the base class
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.SupportClientNotificationsAttribute.GetTempDataValue(System.Web.Mvc.ControllerContext)">
            <summary>
            Returns the notifications to be stored in the temp data
            </summary>
            <param name="filterContext"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.SupportClientNotificationsAttribute.GetController(System.Web.Mvc.IController)">
            <summary>
            Gets the BackOfficeController type from the filter context's controller instance
            </summary>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.AreaRegistrationExtensions.RouteControllerPlugin(System.Web.Mvc.AreaRegistration,System.Guid,System.String,System.Type,System.Web.Routing.RouteCollection,System.String,System.String,System.String,System.String,System.Object,System.Boolean,Rebel.Cms.Web.Context.IRebelApplicationContext,System.String)">
            <summary>
            Creates a custom individual route for the specified controller plugin. Individual routes
            are required by controller plugins to map to a unique URL based on ID.
            </summary>
            <typeparam name="T">An PluginAttribute</typeparam>
            <param name="controllerName"></param>
            <param name="controllerType"></param>
            <param name="routes">An existing route collection</param>
            <param name="routeIdParameterName">the data token name for the controller plugin</param>
            <param name="controllerSuffixName">
            The suffix name that the controller name must end in before the "Controller" string for example:
            ContentTreeController has a controllerSuffixName of "Tree"
            </param>
            <param name="baseUrlPath">
            The base name of the URL to create for example: Rebel/[PackageName]/Trees/ContentTree/1 has a baseUrlPath of "Trees"
            </param>
            <param name="defaultAction"></param>
            <param name="defaultId"></param>
            <param name="isDefaultRebelPlugin">If it's a default (built in) Rebel plugin, then make the route with the GUID</param>
            <param name="area"></param>
            <param name="controllerId"></param>
            <param name="appContext"></param>
            <param name="rebelTokenValue">The DataToken value to set for the 'rebel' key, this defaults to 'backoffice' </param>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.Areas.PackageAreaRegistration">
            <summary>
            An AreaRegistration used to register packaged plugins requiring their own custom routes such as Trees and Editors
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Areas.PackageAreaRegistration.MapRouteEditors(System.Web.Routing.RouteCollection,System.Collections.Generic.IEnumerable{Rebel.Cms.Web.Editors.EditorMetadata})">
            <summary>
            Register all editor controllers that have been found as plugins for the current package folder
            </summary>
            <param name="routes"></param>
            <param name="editorControllers"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Areas.PackageAreaRegistration.MapRouteTrees(System.Web.Routing.RouteCollection,System.Collections.Generic.IEnumerable{Rebel.Cms.Web.Model.BackOffice.Trees.TreeMetadata})">
            <summary>
            Register all tree controllers that have been found as plugins in the current package folder
            </summary>
            <param name="routes"></param>
            <param name="treeControllers"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Areas.PackageAreaRegistration.MapRouteSurface(System.Web.Routing.RouteCollection,System.Collections.Generic.IEnumerable{Rebel.Cms.Web.Surface.SurfaceMetadata})">
            <summary>
            Registers all surface controllers that have been found as plugins in the current package folder
            </summary>
            <param name="routes"></param>
            <param name="surfaceControllers"></param>
        </member>
        <member name="P:Rebel.Cms.Web.Mvc.Areas.PackageAreaRegistration.AreaName">
            <summary>
            The area name will be a sub folder of the back office path such as:
            Rebel/MyPackage
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.Controllers.BackOffice.SecuredBackOfficeController">
            <summary>
            Ensures that the user is authorized to access any actions on the controller
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.CustomJsonResult">
            <summary>
            Allows for a custom JsonSerializer to serialize the result
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.CustomJsonResult.GetJson">
            <summary>
            Returns the serialized Json
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rebel.Cms.Web.Mvc.CustomJsonResult.Data">
            <summary>
            Hide the data member so it cannot be set publicly
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.Metadata.RebelMetadataAdditionalInfo">
            <summary>
            Used as keys for adding Additional data to the meta data
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Routing.RenderRouteConstraint">
            <summary>
            The rules of this route constraint must pass in order to be able to route Rebel requests to the front end
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Surface.SurfaceController">
            <summary>
            The base controller that all Presentation Add-in controllers should inherit from
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Surface.SurfaceController.#ctor(Rebel.Cms.Web.Context.IRoutableRequestContext)">
            <summary>
            Default constructor
            </summary>
            <param name="routableRequestContext"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Surface.SurfaceController.#ctor">
            <summary>
            Empty constructor, uses DependencyResolver to resolve the IRoutableRequestContext
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Surface.SurfaceController.RedirectToRebelPage(Rebel.Framework.HiveId)">
            <summary>
            Redirects to the Rebel page with the given id
            </summary>
            <param name="pageId"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Surface.SurfaceController.RedirectToRebelPage(Rebel.Framework.Persistence.Model.TypedEntity)">
            <summary>
            Redirects to the Rebel page with the given id
            </summary>
            <param name="pageEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Surface.SurfaceController.RedirectToCurrentRebelPage">
            <summary>
            Redirects to the currently rendered Rebel page
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Surface.SurfaceController.CurrentRebelPage">
            <summary>
            Returns the currently rendered Rebel page
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rebel.Cms.Web.Surface.SurfaceController.InstanceId">
            <summary>
            Useful for debugging
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Surface.SurfaceController.CurrentPage">
            <summary>
            Gets the current page.
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.AuthenticationExtensions">
            <summary>
            Extensions to create and renew and remove authentication tickets for the Rebel back office
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.AuthenticationExtensions.RebelLogout(System.Web.HttpContextBase)">
            <summary>
            This clears the forms authentication cookie
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.AuthenticationExtensions.Logout(System.Web.HttpContextBase,System.String)">
            <summary>
            This clears the forms authentication cookie
            </summary>
            <param name="http"></param>
            <param name="cookieName"></param>
        </member>
        <member name="M:Rebel.Cms.Web.AuthenticationExtensions.RenewRebelAuthTicket(System.Web.HttpContextBase)">
            <summary>
            Renews the Rebel authentication ticket
            </summary>
            <param name="http"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.AuthenticationExtensions.CreateRebelAuthTicket(System.Web.HttpContextBase,Rebel.Cms.Web.Security.UserData)">
            <summary>
            Creates the rebel authentication ticket
            </summary>
            <param name="http"></param>
            <param name="userdata"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Rebel.Cms.Web.AuthenticationExtensions.RenewAuthTicket(System.Web.HttpContextBase,System.String,System.String,System.Int32)" -->
        <member name="M:Rebel.Cms.Web.AuthenticationExtensions.CreateAuthTicket(System.Web.HttpContextBase,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Creates a custom FormsAuthentication ticket with the data specified
            </summary>
            <param name="http">The HTTP.</param>
            <param name="username">The username.</param>
            <param name="userData">The user data.</param>
            <param name="loginTimeoutMins">The login timeout mins.</param>
            <param name="minutesPersisted">The minutes persisted.</param>
            <param name="cookiePath">The cookie path.</param>
            <param name="cookieName">Name of the cookie.</param>
            <param name="cookieDomain">The cookie domain.</param>
        </member>
        <member name="T:Rebel.Cms.Web.Security.BackOfficeAuthenticationModule">
            <summary>
            Authentication module to manage the back-office custom forms authentication
            </summary>
            <remarks>
            This also manages the temporary custom login for the Installer
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Security.BackOfficeAuthenticationModule.AuthenticateRequest(System.Object,System.EventArgs)">
            <summary>
            Authenticates the request by reading the FormsAuthentication cookie and setting the 
            context and thread principle object
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Rebel.Cms.Web.SelectListExtensions">
            <summary>
            <![CDATA[
            Extension methods for SelectList and IEnumerable<SelectListItem>
            ]]>
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.SelectListExtensions.UnSelectItems(System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})">
            <summary>
            Un-selects all items in list
            </summary>
            <param name="selectList"></param>
        </member>
        <member name="M:Rebel.Cms.Web.SelectListExtensions.SelectItems(System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Select all items that have values contained in selectedVals
            </summary>
            <param name="selectList"></param>
            <param name="selectedVals"></param>
        </member>
        <member name="T:Rebel.Cms.Web.Trees.ApplicationTreeController">
            <summary>
            A controller to render the applictaion containing sub-trees via proxy actions
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Trees.ApplicationTreeController.Index(System.String)">
            <summary>
            Render out the tree nodes for each tree in the application specified
            </summary>
            <param name="appAlias">Name of the app.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Trees.ApplicationTreeController.Search(Rebel.Cms.Web.Model.BackOffice.SearchModel)">
            <summary>
            A proxy action for ISearchableTree action for the specified tree id
            </summary>
            <param name="searchModel"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Trees.ApplicationTreeController.GetRootResultFromTreeController(Rebel.Cms.Web.Configuration.ApplicationSettings.ITree)">
            <summary>
            This will return the root model content from the controller associated with a TreeElement
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="P:Rebel.Cms.Web.Trees.ApplicationTreeController.NodeCollection">
            <summary>
            The model collection for trees to add nodes to
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.TreeHtmlHelperExtensions.TreePicker(System.Web.Mvc.HtmlHelper,Rebel.Cms.Web.Model.BackOffice.TreePickerRenderModel)">
            <summary>
            Renders a Tree Picker.
            </summary>
            <param name="html">The HTML.</param>
            <param name="treePickerRenderModel">The tree picker render model.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.TreeHtmlHelperExtensions.TreePickerFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},Rebel.Cms.Web.Model.BackOffice.TreePickerRenderModel)">
            <summary>
            Renders a Tree Picker for the given expression.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="html">The HTML.</param>
            <param name="expression">The expression.</param>
            <param name="treePickerRenderModel">The tree picker render model.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.TreeHtmlHelperExtensions.EnsureTreeDependencies(System.Web.Mvc.HtmlHelper)">
            <summary>
            Ensures all required CSS/JS dependencies to load an Rebel tree
            </summary>
            <param name="html"></param>
        </member>
        <member name="M:Rebel.Cms.Web.TreeHtmlHelperExtensions.RenderTree(System.Web.Mvc.HtmlHelper,Rebel.Cms.Web.Model.BackOffice.TreeRenderModel)">
            <summary>
            Renders a tree
            </summary>
            <param name="html"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.TreeHtmlHelperExtensions.RenderMenuDefinition(System.Web.Mvc.HtmlHelper,System.Collections.Generic.IEnumerable{Rebel.Cms.Web.Model.BackOffice.Trees.MenuItem})">
            <summary>
            Renders out the menu definition html structure and ensures that sub menu items are recursively created
            </summary>
            <param name="html"></param>
            <param name="menuItems"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ModelBinders.FrontEnd.RenderModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
            <summary>
            Binds the model to a value by using the specified controller context and binding context.
            </summary>
            <returns>
            The bound value.
            </returns>
            <param name="controllerContext">The controller context.</param><param name="bindingContext">The binding context.</param>
        </member>
        <member name="T:Rebel.Cms.Web.Trees.SupportsEditorTreeController">
            <summary>
            An abstract tree that supports menu actions with an editor
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Trees.TreeController">
            <summary>
            The base controller for all tree requests
            </summary>    
        </member>
        <member name="M:Rebel.Cms.Web.Trees.TreeController.GetControllerName(System.String)">
            <summary>
            Returns a controller name based on tree type
            </summary>
            <param name="treeType"></param>
            <returns></returns>
            <remarks>
            Tree contrllers are always suffixed with "Tree"
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Trees.TreeController.GetTreeData(Rebel.Framework.HiveId,System.Web.Mvc.FormCollection)">
            <summary>
            The method called to render the contents of the tree structure
            </summary>
            <param name="parentId"></param>
            <param name="queryStrings">
            All of the query string parameters passed from jsTree
            </param>
            <returns>JSON markup for jsTree</returns>        
            <remarks>
            We are allowing an arbitrary number of query strings to be pased in so that developers are able to persist custom data from the front-end
            to the back end to be used in the query for model data.
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Trees.TreeController.Index(Rebel.Framework.HiveId,System.Web.Mvc.FormCollection)">
            <summary>
            The action called to render the contents of the tree structure
            </summary>
            <param name="id"></param>
            <param name="querystrings">
            All of the query string parameters passed from jsTree
            </param>
            <returns>JSON markup for jsTree</returns>        
            <remarks>
            We are allowing an arbitrary number of query strings to be pased in so that developers are able to persist custom data from the front-end
            to the back end to be used in the query for model data.
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Trees.TreeController.CreateRootNode(System.Web.Mvc.FormCollection)">
            <summary>
            Helper method to create a root model for a tree
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Trees.TreeController.AddQueryStringsToAdditionalData(Rebel.Cms.Web.Model.BackOffice.Trees.TreeNode,System.Web.Mvc.FormCollection)">
            <summary>
            The AdditionalData of a node is always populated with the query string data, this method performs this
            operation and ensures that special values are not inserted or that duplicate keys are not added.
            </summary>
            <param name="node"></param>
            <param name="queryStrings"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Trees.TreeController.AddRootNodeToCollection(Rebel.Framework.HiveId,System.Web.Mvc.FormCollection)">
            <summary>
            Checks if the node Id is the root node and if so creates the root node and appends it to the 
            NodeCollection based on the standard tree parameters
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <returns></returns>
            <remarks>
            This method ensure that all of the correct meta data is set for the root node so that the Rebel application works
            as expected. Meta data such as 'treeId' and 'searchable'
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Trees.TreeController.CreateTreeNode(Rebel.Framework.HiveId,System.Web.Mvc.FormCollection,System.String,System.String)">
            <summary>
            Helper method to create tree nodes and automatically generate the json url
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <param name="title"></param>
            <param name="editorUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Trees.TreeController.CreateTreeNode(Rebel.Framework.HiveId,System.Web.Mvc.FormCollection,System.String,System.String,System.String)">
            <summary>
            Helper method to create tree nodes and automatically generate the json url
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <param name="title"></param>
            <param name="editorUrl"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Trees.TreeController.CreateTreeNode(Rebel.Framework.HiveId,System.Web.Mvc.FormCollection,System.String,System.String,System.String,System.String)">
            <summary>
            Helper method to create tree nodes and automatically generate the json url
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <param name="title"></param>
            <param name="editorUrl"></param>
            <param name="action"></param>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Trees.TreeController.CreateTreeNode(Rebel.Framework.HiveId,System.Web.Mvc.FormCollection,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Helper method to create tree nodes and automatically generate the json url
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <param name="title"></param>
            <param name="editorUrl"></param>
            <param name="action"></param>
            <param name="hasChildren"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Trees.TreeController.CreateTreeNode(Rebel.Framework.HiveId,System.Web.Mvc.FormCollection,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Helper method to create tree nodes and automatically generate the json url
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <param name="title"></param>
            <param name="editorUrl"></param>
            <param name="action"></param>
            <param name="hasChildren"></param>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Trees.TreeController.CreateTreeNode(Rebel.Framework.HiveId,System.Web.Mvc.FormCollection,System.String,System.String,System.Boolean)">
            <summary>
            Helper method to create tree nodes and automatically generate the json url
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <param name="title"></param>
            <param name="editorUrl"></param>
            <param name="hasChildren"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Trees.TreeController.CreateTreeNode(Rebel.Framework.HiveId,System.Web.Mvc.FormCollection,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Helper method to create tree nodes and automatically generate the json url
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <param name="title"></param>
            <param name="editorUrl"></param>
            <param name="hasChildren"></param>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Trees.TreeController.RebelTree">
            <summary>
            Used to return the serialized JSON for the tree
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rebel.Cms.Web.Trees.TreeController.RootNodeId">
            <summary>
            Returns the root node for the tree
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Trees.TreeController.TreeId">
            <summary>
            Returns the ID defined for the tree
            </summary>
            <remarks>
            The ID is derived from the attributed defined on the tree controller
            </remarks>
        </member>
        <member name="P:Rebel.Cms.Web.Trees.TreeController.NodeDisplayName">
            <summary>
            The name to display on the root node
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Trees.TreeController.TreeType">
            <summary>
            The tree name based on the controller type so that everything is based on naming conventions
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Trees.TreeController.NodeCollection">
            <summary>
            The model collection for trees to add nodes to
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Trees.SupportsEditorTreeController.GetEditorUrl(Rebel.Framework.HiveId,System.Web.Mvc.FormCollection)">
            <summary>
            Return the editor URL for the currrent node depending on the data found in the query strings
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <returns></returns>
            <remarks>
            This checks if the tree there is a OnNodeClick handler assigned, if so, it assigns it,
            otherwise it checks if the tree is in DialogMode, if it is then it returns an empty handler, otherwise
            it sets the Url to the editor's url. 
            </remarks>
        </member>
        <member name="P:Rebel.Cms.Web.Trees.SupportsEditorTreeController.EditorControllerId">
            <summary>
            The ID of the editor controller
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.TreeNodeExtensions.AddEditorMenuItem``1(Rebel.Cms.Web.Model.BackOffice.Trees.TreeNode,Rebel.Cms.Web.Trees.SupportsEditorTreeController,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            A helper method to add a menu action that displays an editor
            </summary>
            <typeparam name="T">The type of menu action to add</typeparam>
            <param name="controller">The SupportsEditorTreeController</param>
            <param name="node">the tree node to add the menu action to</param>
            <param name="key">The key of the item that is added to the AdditionalData for the URL of the action</param>
            <param name="controllerAction">The action URL to lookup based on the EditorControllerId/EditorControllerName</param>
            <param name="additionalData"></param>
        </member>
        <member name="T:Rebel.Cms.Web.Trees.TreeQueryStringParameters">
            <summary>
            Common query string parameters used for tree query strings
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Trees.TreeSearchJsonResult">
            <summary>
            A specialized JSON result for ISearchableTree
            </summary>
        </member>
        <member name="P:Rebel.Cms.Web.Trees.TreeSearchJsonResult.Data">
            <summary>
            Hide the data member so it cannot be set publicly
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.DependencyManagement.IComponentRegistrar">
            <summary>
            Used to register all Rebel system components which can then be queried through this class
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.IComponentRegistrar.RegisterMacroEngines(Rebel.Framework.DependencyManagement.IContainerBuilder,Rebel.Framework.TypeFinder)">
            <summary>
            Registers the macro engines.
            </summary>
            <param name="builder"></param>
            <param name="typeFinder"></param>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.IComponentRegistrar.RegisterDashboardFilters(Rebel.Framework.DependencyManagement.IContainerBuilder,Rebel.Framework.TypeFinder)">
            <summary>
            Registers the dashboard filters.
            </summary>
            <param name="builder">The builder.</param>
            <param name="typeFinder">The type finder.</param>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.IComponentRegistrar.RegisterDashboardMatchRules(Rebel.Framework.DependencyManagement.IContainerBuilder,Rebel.Framework.TypeFinder)">
            <summary>
            Registers the dashboard match rules.
            </summary>
            <param name="builder">The builder.</param>
            <param name="typeFinder">The type finder.</param>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.IComponentRegistrar.RegisterTreeControllers(Rebel.Framework.DependencyManagement.IContainerBuilder,Rebel.Framework.TypeFinder)">
            <summary>
            Register the tree controllers
            </summary>
            <param name="builder"></param>
            <param name="typeFinder"></param>
            <remarks>
            This must register all tree controllers as their native types and also register them all as the type TreeController
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.IComponentRegistrar.RegisterSurfaceControllers(Rebel.Framework.DependencyManagement.IContainerBuilder,Rebel.Framework.TypeFinder)">
            <summary>
            Registers the Surface controllers
            </summary>
            <param name="builder"></param>
            <param name="typeFinder"></param>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.IComponentRegistrar.RegisterMenuItems(Rebel.Framework.DependencyManagement.IContainerBuilder,Rebel.Framework.TypeFinder)">
            <summary>
            Registers all menu items
            </summary>
            <param name="builder"></param>
            <param name="typeFinder"></param>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.IComponentRegistrar.RegisterEditorControllers(Rebel.Framework.DependencyManagement.IContainerBuilder,Rebel.Framework.TypeFinder)">
            <summary>
            Register the editor controllers
            </summary>
            <param name="builder"></param>
            <param name="typeFinder"></param>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.IComponentRegistrar.RegisterPropertyEditors(Rebel.Framework.DependencyManagement.IContainerBuilder,Rebel.Framework.TypeFinder)">
            <summary>
            Registers all RebelPropertyEditors
            </summary>
            <param name="builder"></param>
            <param name="typeFinder"></param>
            <remarks>
            All Property Editors should be registered as the type PropertyEditor
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.IComponentRegistrar.RegisterParameterEditors(Rebel.Framework.DependencyManagement.IContainerBuilder,Rebel.Framework.TypeFinder)">
            <summary>
            Registers all RebelParameterEditors
            </summary>
            <param name="builder"></param>
            <param name="typeFinder"></param>
            <remarks>
            All Parameter Editors should be registered as the type ParameterEditor
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.IComponentRegistrar.RegisterTasks(Rebel.Framework.DependencyManagement.IContainerBuilder,Rebel.Framework.TypeFinder)">
            <summary>
            Registers all tasks.
            </summary>
            <param name="builder">The builder.</param>
            <param name="typeFinder">The type finder.</param>
            <remarks></remarks>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.IComponentRegistrar.RegisterPermissions(Rebel.Framework.DependencyManagement.IContainerBuilder,Rebel.Framework.TypeFinder)">
            <summary>
            Registers the permissions.
            </summary>
            <param name="builder">The builder.</param>
            <param name="typeFinder">The type finder.</param>
        </member>
        <member name="T:Rebel.Cms.Web.DependencyManagement.RebelComponentRegistrar">
            <summary>
            Registers all Rebel system components/plugins
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.RebelComponentRegistrar.BuildComponentDependencies(Rebel.Framework.DependencyManagement.IContainerBuilder,System.Type)">
            <summary>
            For each plugin found, this method is called for it's type to check if the plugin has an DemandsDependenciesAttribute
            and if so, builds its dependencies.
            </summary>
            <param name="builder"></param>
            <param name="t"></param>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.RebelComponentRegistrar.FindTypesInRequiredAssemblies``1(Rebel.Framework.TypeFinder)">
            <summary>
            Searches filtered local assemblies and plugin assemblies for the Plugin type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="typeFinder"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Rebel.Cms.Web.DependencyManagement.RebelComponentRegistrar.RegisterSurfaceControllers(Rebel.Framework.DependencyManagement.IContainerBuilder,Rebel.Framework.TypeFinder)" -->
        <member name="M:Rebel.Cms.Web.DependencyManagement.RebelComponentRegistrar.RegisterEditorControllers(Rebel.Framework.DependencyManagement.IContainerBuilder,Rebel.Framework.TypeFinder)">
            <summary>
            Register the editor controllers
            </summary>
            <param name="builder"></param>
            <param name="typeFinder"></param>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.RebelComponentRegistrar.RegisterMenuItems(Rebel.Framework.DependencyManagement.IContainerBuilder,Rebel.Framework.TypeFinder)">
            <summary>
            Registers all menu items
            </summary>
            <param name="builder"></param>
            <param name="typeFinder"></param>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.RebelComponentRegistrar.RegisterTreeControllers(Rebel.Framework.DependencyManagement.IContainerBuilder,Rebel.Framework.TypeFinder)">
            <summary>
            Register the tree controllers
            </summary>
            <param name="builder"></param>
            <param name="typeFinder"></param>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.RebelComponentRegistrar.RegisterPropertyEditors(Rebel.Framework.DependencyManagement.IContainerBuilder,Rebel.Framework.TypeFinder)">
            <summary>
            Registers all RebelPropertyEditors
            </summary>
            <param name="builder"></param>
            <param name="typeFinder"></param>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.RebelComponentRegistrar.RegisterParameterEditors(Rebel.Framework.DependencyManagement.IContainerBuilder,Rebel.Framework.TypeFinder)">
            <summary>
            Registers all RebelParameterEditors
            </summary>
            <param name="builder"></param>
            <param name="typeFinder"></param>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.RebelComponentRegistrar.RegisterTasks(Rebel.Framework.DependencyManagement.IContainerBuilder,Rebel.Framework.TypeFinder)">
            <summary>
            Registers all tasks.
            </summary>
            <param name="builder">The builder.</param>
            <param name="typeFinder">The type finder.</param>
            <remarks></remarks>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.RebelComponentRegistrar.RegisterPermissions(Rebel.Framework.DependencyManagement.IContainerBuilder,Rebel.Framework.TypeFinder)">
            <summary>
            Registers the permissions.
            </summary>
            <param name="builder">The builder.</param>
            <param name="typeFinder">The type finder.</param>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.RebelComponentRegistrar.RegisterComponent``3(System.Type,Rebel.Framework.DependencyManagement.IContainerBuilder,System.Boolean,System.Action{Rebel.Framework.PluginDefinition,``1,Rebel.Framework.DependencyManagement.IDependencyRegistrar{System.Object}})">
            <summary>
            Registers a component in the container with the specified base class and with it's associated metadata
            </summary>
            <typeparam name="TBaseType">The base type to register the component as in the container</typeparam>
            <typeparam name="TAttribute">The component attribute type</typeparam>
            <typeparam name="TMetadata">The metadata type</typeparam>
            <param name="componentType">The type of the component</param>
            <param name="builder"></param>
            <param name="requiresMandatoryAttribute">true if an exception should be thrown if the plugin requires to be attributed</param>
            <param name="registerMetadata">A callback method to register more meta data for the component</param>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.RebelComponentRegistrar.PerformComponentRegistration``3(System.Type,Rebel.Framework.DependencyManagement.IContainerBuilder,System.Action{Rebel.Framework.PluginDefinition,``1,Rebel.Framework.DependencyManagement.IDependencyRegistrar{System.Object}},``1)">
            <summary>
            Registers a component in the container with the specified base class and with it's associated metadata
            </summary>
            <typeparam name="TBaseType"></typeparam>
            <typeparam name="TAttribute"></typeparam>
            <typeparam name="TMetadata"></typeparam>
            <param name="componentType"></param>
            <param name="builder"></param>
            <param name="registerMetadata"></param>
            <param name="attr"></param>
        </member>
        <member name="M:Rebel.Cms.Web.DependencyManagement.RebelComponentRegistrar.RegisterComponent``2(System.Type,Rebel.Framework.DependencyManagement.IContainerBuilder,System.Action{Rebel.Framework.PluginDefinition,Rebel.Framework.DependencyManagement.IDependencyRegistrar{System.Object}})">
            <summary>
            Registers a simple component in the container with the specified base class and with it's associated metadata.
            </summary>
            <typeparam name="TBaseType"></typeparam>
            <typeparam name="TMetadata"></typeparam>
            <param name="componentType"></param>
            <param name="builder"></param>
            <param name="registerMetadata"></param>
        </member>
        <member name="T:Rebel.Cms.Web.Editors.AbstractEditorController">
            <summary>
            Represents the base class for all editor controllers
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Editors.AbstractEditorController.GetPaths">
            <summary>
            Returns an Id path for the current entity being edited by the controller instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Editors.AbstractEditorController.GeneratePathsForCurrentEntity(Rebel.Framework.EntityPathCollection)">
            <summary>
            Sets the Id path for the current entity being edited by the controller instance
            </summary>
            <param name="path"></param>
        </member>
        <member name="P:Rebel.Cms.Web.Editors.AbstractEditorController.EditorId">
            <summary>
            Returns the editor id assigned to the controller via attributes
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Editors.DashboardEditorController.Dashboard(System.String)">
            <summary>
            The Action to render the dashboard
            </summary>
            <returns></returns>
            <param name="appAlias">The current application name, optional</param>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ActionFilters.RequiredFieldAttribute">
            <summary>
            Makes an action method only respond if particular form field(s) is included in the request
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.RequiredFieldAttribute.#ctor(System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="fieldNames"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.RequiredFieldAttribute.#ctor(Rebel.Cms.Web.Mvc.ActionFilters.FieldMatchCount,System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="fieldNames"></param>
            <param name="matchCount"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.RequiredFieldAttribute.#ctor(Rebel.Cms.Web.Mvc.ActionFilters.FieldMatchCount,Rebel.Cms.Web.Mvc.ActionFilters.FieldMatchType,System.String[])">
            <summary>
            Contructor
            </summary>
            <param name="fieldNames"></param>
            <param name="matchCount"></param>
            <param name="matchType"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.RequiredFieldAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
            <summary>
            Ensure that field names specified are found in the request depending on the field match type.
            </summary>
            <param name="controllerContext"></param>
            <param name="methodInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ActionFilters.SaveAttribute">
            <summary>
            Specific action to support the Save operation
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.SaveAttribute.#ctor">
            <summary>
            Default constructor, always expect submit.Save value in the Request
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.SaveAttribute.#ctor(System.String[])">
            <summary>
            Alternate constructor allowing you to specify the id/name of the different save button 
            ids that could exist in the request, at least one must match.
            </summary>
            <param name="saveButtons"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionFilters.SaveAttribute.#ctor(Rebel.Cms.Web.Mvc.ActionFilters.FieldMatchType,System.String[])">
            <summary>
            Alternate constructor allowing you to specify the id/name of the different save button 
            ids that could exist in the request, at least one must match and they are matched using the FieldMatchType specified
            </summary>
            <param name="saveButtons"></param>
            <param name="matchType"></param>
        </member>
        <member name="T:Rebel.Cms.Web.AssemblyContainsPluginsAttribute">
            <summary>
            Informs the system that the assembly tagged with this attribute contains plugins and the system should scan and load them
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.ModelBindingContextExtensions.GetValue``1(System.Web.Mvc.ModelBindingContext,System.String)">
            <summary>
            Returns a value from the value provider given the specified key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bindingContext"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Rebel.Cms.Web.Mvc.ViewEngines.PluginViewEngine" -->
        <member name="M:Rebel.Cms.Web.Mvc.ViewEngines.PluginViewEngine.#ctor(Rebel.Cms.Web.Configuration.RebelSettings,Rebel.Cms.Web.Packaging.IPackageContext)">
            <summary>
            Constructor
            </summary>
            <param name="settings"></param>
            <param name="packageContext"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ViewEngines.PluginViewEngine.FindPartialView(System.Web.Mvc.ControllerContext,System.String,System.Boolean)">
            <summary>
            If we're not rendering in an rebel context this will exit
            </summary>
            <param name="controllerContext"></param>
            <param name="partialViewName"></param>
            <param name="useCache"></param>
            <returns></returns>
            <remarks>
            NOTE: If someone has a lot of packages installed, the number of folders being searched will be fairly insane
             it would be good if VirtualPathProviderViewEngine exposed its members for path finding but they are all marked as 
             private, so we could either copy all of its code in here or find another nice way to avoid having to lookup so many folders.
             We could aid in this performance by injecting different data tokens for different types of views (i.e. Dashboards, etc...)
             then we can actually have a differerent ViewEngines for those specific ones by checking for the correct token.
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ViewEngines.PluginViewEngine.FindView(System.Web.Mvc.ControllerContext,System.String,System.String,System.Boolean)">
            <summary>
            If we're not rendering in an rebel context, this will exit, otherwise will find the view based
            on the base class implementation.
            </summary>
            <param name="controllerContext"></param>
            <param name="viewName"></param>
            <param name="masterName"></param>
            <param name="useCache"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ViewEngines.PluginViewEngine.ShouldFindView(System.Web.Mvc.ControllerContext,System.Boolean)">
            <summary>
            Determines if a view should be found, this is to improve performance of view lookups but also to 
            decrease the amount of overlap with other view engines.
            </summary>
            <param name="controllerContext"></param>
            <param name="isPartial"></param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Editors.StandardEditorController">
            <summary>
            The base controller that all editor controllers should inherit from which supports Updating
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Editors.StandardEditorController.Edit(System.Nullable{Rebel.Framework.HiveId})">
            <summary>
            The Action to render the editor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Editors.StandardEditorController.BindModel(System.Object,System.String)">
            <summary>
            The IUpdator method to update the posted model
            </summary>
            <param name="model"></param>
            <param name="fieldPrefix"></param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.System.PluginManager">
            <summary>
            Sets the application up for the plugin referencing
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.System.PluginManager.CleanupDotDeletePluginFiles(System.IO.FileInfo)">
            <summary>
            When given a .delete file this will attempt to delete the base file that the .delete was created from
            and then the .delete file itself. if both are removed then it will return true.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.System.PluginManager.GetNewDotDeleteName(System.IO.FileInfo)">
            <summary>
            Returns the .delete file name for a particular file. If just the file name + .delete already exists and is locked,
            then this returns a Guid + .delete format.
            </summary>
            <param name="pluginFile"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.System.PluginManager.CleanupPlugin(System.IO.FileInfo)">
            <summary>
            Tries to delete the file, if it doesn't go nicely, we'll force rename it to .delete, if that already exists and we cannot
            remove the .delete file then we rename to Guid + .delete
            </summary>
            <param name="f"></param>
            <returns>If it deletes nicely return true, otherwise false</returns>
        </member>
        <member name="M:Rebel.Cms.Web.System.PluginManager.DetectAndCleanStalePlugins(System.Collections.Generic.IEnumerable{System.IO.FileInfo},System.IO.DirectoryInfo)">
            <summary>
            This checks if any of our plugins have changed, if so it will go 
            </summary>
            <returns>
            Returns true if there were changes to plugins and a cleanup was required, otherwise if all plugins are the same then false is returned.
            </returns>
        </member>
        <member name="M:Rebel.Cms.Web.System.PluginManager.GetPluginsHash(System.Collections.Generic.IEnumerable{System.IO.FileInfo},System.Boolean)">
            <summary>
            Returns the hash string for all found plugins/folders
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.System.PluginManager.GetCachePluginsHash">
            <summary>
            Returns the hash code of the plugins last loaded
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.System.PluginManager.GetCachePluginsList(System.IO.DirectoryInfo)">
            <summary>
            Returns a list of all previously copied plugins
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.System.PluginManager.ConvertPluginsHash(System.String)">
            <summary>
            Converts the hash value of current plugins to long from string
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.System.PluginManager.WriteCachePluginsHash(System.Collections.Generic.IEnumerable{System.IO.FileInfo})">
            <summary>
            Persists a file containing a hash of all current plugins
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.System.PluginManager.WriteCachePluginsList(System.Collections.Generic.IEnumerable{System.IO.FileInfo})">
            <summary>
            Writes a list of all plugins files that are being copied
            </summary>
            <param name="plugins"></param>
        </member>
        <member name="M:Rebel.Cms.Web.System.PluginManager.InitializeFullTrust(System.IO.FileInfo,System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Used to initialize plugins when running in Full Trust
            </summary>
            <param name="plug"></param>
            <param name="shadowCopyPlugFolder"></param>
            <param name="performShadowCopy"> </param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.System.PluginManager.InitializeMediumTrust(System.IO.FileInfo,System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Used to initialize plugins when running in Medium Trust
            </summary>
            <param name="plug"></param>
            <param name="shadowCopyPlugFolder"></param>
            <param name="performShadowCopy"> </param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.System.PluginManager.GetPackageFolderFromPluginDll(System.IO.FileInfo)">
            <summary>
            Returns the package folder for the plugin DLL passed in
            </summary>
            <param name="pluginDll"></param>
            <returns>An empty string if the plugin was not found in a pckage folder</returns>
        </member>
        <member name="M:Rebel.Cms.Web.System.PluginManager.IsPackagePluginFolder(System.IO.DirectoryInfo)">
            <summary>
            Determines if the folder is a bin plugin folder for a package
            </summary>
            <param name="folder"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.System.PluginManager.IsPackageLibFolder(System.IO.DirectoryInfo)">
            <summary>
            Determines if the folder is a bin plugin folder for a package or for the core package
            </summary>
            <param name="folder"></param>
            <returns></returns>
        </member>
        <member name="P:Rebel.Cms.Web.System.PluginManager.ReferencedPlugins">
            <summary>
            Returns a collection of all referenced plugin assemblies that have been shadow copied
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.RebelApplicationContextExtensions.AllProvidersInstalled(Rebel.Cms.Web.Context.IRebelApplicationContext)">
            <summary>
              Returns true if all providers have a Completed installation status
            </summary>
            <param name="appContext"> </param>
            <returns> </returns>
        </member>
        <member name="T:Rebel.Cms.Web.UrlHelperExtensions">
            <summary>
            UrlHelper extension methods
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetCurrentDashboardUrl(System.Web.Mvc.UrlHelper)">
            <summary>
            Returns the dashboard url for the currently active application
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetCurrentDashboardUrl(System.Web.Mvc.UrlHelper,System.Type)">
            <summary>
            Returns the dashboard url for the currently active application
            </summary>
            <param name="url"></param>
            <param name="controllerType"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetDashboardUrl(System.Web.Mvc.UrlHelper,System.String)">
            <summary>
            Returns the default dashboard url
            </summary>
            <param name="url"></param>
            <param name="appAlias">The application (i.e. content) to render the dashboard for</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetDashboardUrl(System.Web.Mvc.UrlHelper,System.Type,System.String)">
            <summary>
            Returns the dashboard Url for a specified controller
            </summary>
            <param name="url"></param>
            <param name="controllerType"></param>
            <param name="appAlias">The application (i.e. content) to render the dashboard for</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetSurfaceUrl(System.Web.Mvc.UrlHelper,System.String,System.String,System.Guid)">
            <summary>
            Returns the controller/action URL for the given Surface
            </summary>
            <param name="url"></param>
            <param name="action"></param>
            <param name="id"></param>
            <param name="surfaceId"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetEditorUrl(System.Web.Mvc.UrlHelper,Rebel.Framework.HiveId,System.Guid,Rebel.Cms.Web.DependencyManagement.ComponentRegistrations,Rebel.Cms.Web.Configuration.RebelSettings)">
            <summary>
            Returns the editor url using the default action
            </summary>
            <param name="url">The URL.</param>
            <param name="id">The id.</param>
            <param name="editorId">The editor id.</param>
            <param name="preResolvedComponentRegistrations">The pre resolved component registrations.</param>
            <param name="preResovledSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetEditorUrl(System.Web.Mvc.UrlHelper,System.String,System.Nullable{Rebel.Framework.HiveId},System.Guid,Rebel.Cms.Web.DependencyManagement.ComponentRegistrations,Rebel.Cms.Web.Configuration.RebelSettings)">
            <summary>
            Returns the full unique url for an Editor
            </summary>
            <param name="url">The URL.</param>
            <param name="action">The action.</param>
            <param name="id">A HiveId object or null if no id is required</param>
            <param name="editorId">The editor id.</param>
            <param name="preResolvedComponentRegistrations">The pre resolved component registrations.</param>
            <param name="preResovledSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetEditorUrl(System.Web.Mvc.UrlHelper,System.Type,System.Nullable{Rebel.Framework.HiveId})">
            <summary>
            Return the editor url using the default action
            </summary>
            <param name="url"></param>
            <param name="controllerType"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetEditorUrl(System.Web.Mvc.UrlHelper,System.String,System.Type,System.Nullable{Rebel.Framework.HiveId})">
            <summary>
            Returns the full unique url for an Editor based on it's type
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.CreateTreeParams(System.Web.Mvc.UrlHelper,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Helper method to create tree parameters for the GetTreeUrl method
            </summary>
            <param name="url"></param>
            <param name="isDialog"></param>
            <param name="onNodeClick"></param>
            <param name="otherParams"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetTreeSearchUrl(System.Web.Mvc.UrlHelper)">
            <summary>
            Returns the url for searching using JSON
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetTreeUrl(System.Web.Mvc.UrlHelper,System.String)">
            <summary>
            Return the tree url for a specified application
            </summary>
            <param name="url"></param>
            <param name="applicationAlias"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetTreeUrl(System.Web.Mvc.UrlHelper,Rebel.Framework.HiveId,System.Guid,System.Object)">
            <summary>
            Return the tree url for the default action 
            </summary>
            <param name="url"></param>
            <param name="id"></param>
            <param name="treeId"></param>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetTreeUrl(System.Web.Mvc.UrlHelper,Rebel.Framework.HiveId,System.Guid,System.Web.Mvc.FormCollection)">
            <summary>
            Return the tree url with using the default action
            </summary>
            <param name="url"></param>
            <param name="id"></param>
            <param name="treeId"></param>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetTreeUrl(System.Web.Mvc.UrlHelper,System.String,Rebel.Framework.HiveId,System.Guid,System.Web.Mvc.FormCollection)">
            <summary>
            Returns the full unique url for a Tree
            </summary>
            <param name="url"></param>
            <param name="action"></param>
            <param name="id"></param>
            <param name="treeId"></param>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetTreeUrl(System.Web.Mvc.UrlHelper,System.Type,Rebel.Framework.HiveId,System.Web.Mvc.FormCollection)">
            <summary>
            Get the tree url using the default action
            </summary>
            <param name="url"></param>
            <param name="treeType"></param>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetTreeUrl(System.Web.Mvc.UrlHelper,System.String,System.Type,Rebel.Framework.HiveId,System.Web.Mvc.FormCollection)">
            <summary>
            Returns the full unique url for a Tree based on it's type
            </summary>
            <param name="url"></param>
            <param name="action"></param>
            <param name="treeType"></param>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetMediaUrl(System.Web.Mvc.UrlHelper,Rebel.Framework.Persistence.Model.TypedEntity)">
            <summary>
            Gets the URL of the file in the first upload field found on the given TypedEntity
            </summary>
            <param name="url">The URL.</param>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetMediaUrl(System.Web.Mvc.UrlHelper,Rebel.Framework.Persistence.Model.TypedEntity,System.Int32)">
            <summary>
            Gets the URL of the file in the first upload field found on the given TypedEntity at the specific size
            </summary>
            <param name="url">The URL.</param>
            <param name="entity">The entity.</param>
            <param name="size">The size (must be a prevalue on the upload property editor).</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetMediaUrl(System.Web.Mvc.UrlHelper,Rebel.Framework.Persistence.Model.TypedEntity,System.String)">
            <summary>
            Gets the URL of the file in the upload field with the given property alias on the given TypedEntity
            </summary>
            <param name="url">The URL.</param>
            <param name="entity">The entity.</param>
            <param name="propertyAlias">The property alias.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetMediaUrl(System.Web.Mvc.UrlHelper,Rebel.Framework.Persistence.Model.TypedEntity,System.String,System.Int32)">
            <summary>
            Gets the URL of the file in the upload field with the given property alias on the given TypedEntity at the specific size
            </summary>
            <param name="url">The URL.</param>
            <param name="entity">The entity.</param>
            <param name="propertyAlias">The property alias.</param>
            <param name="size">The size (must be a prevalue on the upload property editor).</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetMediaUrl(System.Web.Mvc.UrlHelper,Rebel.Framework.HiveId)">
            <summary>
            Gets the URL of the file in the first upload field found on the TypedEntity with the given id
            </summary>
            <param name="url">The URL.</param>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetMediaUrl(System.Web.Mvc.UrlHelper,Rebel.Framework.HiveId,System.Int32)">
            <summary>
            Gets the URL of the file in the first upload field found on the TypedEntity with the given id, at the specified size
            </summary>
            <param name="url">The URL.</param>
            <param name="id">The id.</param>
            <param name="size">The size (must be a prevalue on the upload property editor).</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetMediaUrl(System.Web.Mvc.UrlHelper,Rebel.Framework.HiveId,System.String)">
            <summary>
            Gets the URL of the file in the upload field with the given property alias on the TypedEntity with the given id
            </summary>
            <param name="url">The URL.</param>
            <param name="id">The id.</param>
            <param name="propertyAlias">The property alias.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetMediaUrl(System.Web.Mvc.UrlHelper,Rebel.Framework.HiveId,System.String,System.Int32)">
            <summary>
            Gets the URL of the file in the upload field with the given property alias on the TypedEntity with the given id, at the specified size
            </summary>
            <param name="url">The URL.</param>
            <param name="id">The id.</param>
            <param name="propertyAlias">The property alias.</param>
            <param name="size">The size (must be a prevalue on the upload property editor).</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetMediaUrl(System.Web.Mvc.UrlHelper,System.String)">
            <summary>
            Gets the URL of the file in the first upload field found on the TypedEntity with the given id
            </summary>
            <param name="url">The URL.</param>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetMediaUrl(System.Web.Mvc.UrlHelper,System.String,System.Int32)">
            <summary>
            Gets the URL of the file in the first upload field found on the TypedEntity with the given id, at the specified size
            </summary>
            <param name="url">The URL.</param>
            <param name="id">The id.</param>
            <param name="size">The size (must be a prevalue on the upload property editor).</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetMediaUrl(System.Web.Mvc.UrlHelper,System.String,System.String)">
            <summary>
            Gets the URL of the file in the upload field with the given property alias on the TypedEntity with the given id
            </summary>
            <param name="url">The URL.</param>
            <param name="id">The id.</param>
            <param name="propertyAlias">The property alias.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetMediaUrl(System.Web.Mvc.UrlHelper,System.String,System.String,System.Int32)">
            <summary>
            Gets the URL of the file in the upload field with the given property alias on the TypedEntity with the given id, at the specified size
            </summary>
            <param name="url">The URL.</param>
            <param name="id">The id.</param>
            <param name="propertyAlias">The property alias.</param>
            <param name="size">The size (must be a prevalue on the upload property editor).</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetWebResourceUrl(System.Web.Mvc.UrlHelper,System.Type,System.String)">
            <summary>
            Returns the path of an embedded web resource
            </summary>
            <param name="url"></param>
            <param name="resourceType"></param>
            <param name="resourcePath"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetStylesPath(System.Web.Mvc.UrlHelper)">
            <summary>
            Return the ClientDependency styles path
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetScriptsPath(System.Web.Mvc.UrlHelper)">
            <summary>
            Return the ClientDependency scripts path
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetModulesPath(System.Web.Mvc.UrlHelper)">
            <summary>
            Return the ClientDependency scripts path
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetRebelSettings(System.Web.Mvc.UrlHelper)">
            <summary>
            Gets the rebel settings.
            </summary>
            <param name="url">The URL.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetBackOfficeArea(System.Web.Mvc.UrlHelper)">
            <summary>
            Gets the back office area.
            </summary>
            <param name="url">The URL.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetBackOfficeFolder(System.Web.Mvc.UrlHelper)">
            <summary>
            Gets the back office folder.
            </summary>
            <param name="url">The URL.</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetAppIconsFolder(System.Web.Mvc.UrlHelper)">
            <summary>
            Gets the application icons folder
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.UrlHelperExtensions.GetPluginsFolder(System.Web.Mvc.UrlHelper)">
            <summary>
            Gets the plugins folder
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ActionFilters.QueryStringFilterAttribute">
            <summary>
            Allows an Action to execute with an arbitrary number of QueryStrings
            </summary>
            <remarks>
            Just like you can POST an arbitrary number of parameters to an Action, you can't GET an arbitrary number
            but this will allow you to do it
            
            http://stackoverflow.com/questions/488061/passing-multiple-parameters-to-controller-in-asp-net-mvc-also-generating-on-the
            </remarks>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.ActionInvokers.RebelActionInvoker">
            <summary>
            Ensures that if an action for the Template name is not explicitly defined by a user, that the 'Index' action will execute
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.ActionInvokers.RebelActionInvoker.FindAction(System.Web.Mvc.ControllerContext,System.Web.Mvc.ControllerDescriptor,System.String)">
            <summary>
            Ensures that if an action for the Template name is not explicitly defined by a user, that the 'Index' action will execute
            </summary>
            <param name="controllerContext"></param>
            <param name="controllerDescriptor"></param>
            <param name="actionName"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RouteCollectionExtensions.RegisterArea``1(System.Web.Routing.RouteCollection)">
            <summary>
            Extension method to manually regsiter an area
            </summary>
            <typeparam name="T"></typeparam>
            <param name="routes"></param>
        </member>
        <member name="M:Rebel.Cms.Web.RouteCollectionExtensions.RegisterArea``1(System.Web.Routing.RouteCollection,Rebel.Framework.DependencyManagement.IDependencyResolver)">
            <summary>
            Extension method to manually regsiter an area from the container
            </summary>
            <typeparam name="T"></typeparam>
            <param name="routes"></param>
            <param name="container"></param>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.Areas.RebelAreaRegistration">
            <summary>
            Responsible for registering the Rebel Area and all of it's affiliated routes
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Areas.RebelAreaRegistration.#ctor(Rebel.Cms.Web.Context.IRebelApplicationContext,Rebel.Cms.Web.DependencyManagement.ComponentRegistrations)">
            <summary>
            Constructor using a specific RebelSettings object
            </summary>
            <param name="applicationContext"></param>
            <param name="componentRegistrar"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Areas.RebelAreaRegistration.RegisterArea(System.Web.Mvc.AreaRegistrationContext)">
            <summary>
            Creates the routes for the back office area
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Areas.RebelAreaRegistration.MapRouteSurfaceControllers(System.Web.Routing.RouteCollection,System.Collections.Generic.IEnumerable{Rebel.Cms.Web.Surface.SurfaceMetadata})">
            <summary>
            This maps locally declared (non-package) surface controllers so that they are routing through the Rebel back office path
            /Rebel (or what is defined in config)
            </summary>
            <param name="routes"></param>
            <param name="surfaceControllers"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Areas.RebelAreaRegistration.MapRouteEditors(System.Web.Routing.RouteCollection,System.Collections.Generic.IEnumerable{Rebel.Cms.Web.Editors.EditorMetadata})">
            <summary>
            Creates the routing rules for the editors
            </summary>
            <param name="routes"></param>
            <param name="editorControllers"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Areas.RebelAreaRegistration.MapRouteTrees(System.Web.Routing.RouteCollection,System.Collections.Generic.IEnumerable{Rebel.Cms.Web.Model.BackOffice.Trees.TreeMetadata})">
            <summary>
            Create the routes to handle tree requests
            </summary>
            <param name="routes"></param>
            <param name="treeControllers"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Areas.RebelAreaRegistration.MapRouteBackOffice(System.Web.Routing.RouteCollection)">
            <summary>
            The standard routes for the back office main pages
            </summary>
            <param name="routes"></param>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.Controllers.BackOffice.DefaultController">
            <summary>
            The controller used to render the back office application
            </summary>
            <remarks>
            We need to ensure that each action has the explicit RebelAuthorize attribute applied (except for Login) because this does
            not inherit from SecuredBackOfficeController
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.DefaultController.#ctor(Rebel.Cms.Web.Context.IBackOfficeRequestContext)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.DefaultController.Login(Rebel.Cms.Web.Model.BackOffice.LoginDisplayType)">
            <summary>
            Renders the login view
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.DefaultController.Search(System.String,System.Guid)">
            <summary>
            Renders the generic Search list template
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.DefaultController.App(System.String)">
            <summary>
            Renders the default back-office View
            </summary>
            <param name="appAlias">The application to render</param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.BackOffice.DefaultController.InsufficientPermissions(System.String)">
            <summary>
            Insufficient the permissions.
            </summary>
            <param name="url">The URL.</param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.Controllers.RebelController">
            <summary>
            The default controller for Rebel front-end request
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.RebelController.#ctor">
            <summary>
            Constructor initializes custom action invoker
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.RebelController.#ctor(Rebel.Cms.Web.Context.IRoutableRequestContext)">
            <summary>
            Constructor initializes custom action invoker
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.RebelController.GetControllerId``1(System.Type)">
            <summary>
            Return the ID of an controller plugin
            </summary>
            <typeparam name="T"></typeparam>
            <param name="editorControllerType"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.RebelController.GetControllerName(System.Type)">
            <summary>
            Return the controller name from the controller type
            </summary>
            <param name="controllerType"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.RebelController.GetControllerName``1">
            <summary>
            Return the controller name from the controller type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.RebelController.Index(Rebel.Cms.Web.Model.IRebelRenderModel)">
            <summary>
            The default action to render the template/view
            </summary>
            <returns></returns>
            <remarks>
            This will check if the view for the template for the IRoutableItem exists, if it doesn't will render the default 'Index' view.
            </remarks>        
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.RebelController.CurrentRebelPage">
            <summary>
            Returns the currently rendered Rebel page
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.RebelController.RedirectToRebelPage(Rebel.Framework.HiveId)">
            <summary>
            Redirects to the Rebel page with the given id
            </summary>
            <param name="pageId"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.RebelController.RedirectToRebelPage(Rebel.Framework.Persistence.Model.TypedEntity)">
            <summary>
            Redirects to the Rebel page with the given id
            </summary>
            <param name="pageEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Controllers.RebelController.RedirectToCurrentRebelPage">
            <summary>
            Redirects to the currently rendered Rebel page
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Mvc.Metadata.RebelModelMetadataProvider">
            <summary>
            Rebel meta data provider
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Metadata.RebelModelMetadataProvider.CreateMetadata(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Func{System.Object},System.Type,System.String)">
            <summary>
            Performs some custom meta data binding based on custom attributes, etc...
            </summary>
            <param name="attributes"></param>
            <param name="containerType"></param>
            <param name="modelAccessor"></param>
            <param name="modelType"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Mvc.Metadata.RebelModelMetadataProvider.IsEmbeddedView(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.String@)">
            <summary>
            Checks for the EmbeddedViewAttribute
            </summary>
            <param name="attributes"></param>
            <param name="modelType"></param>
            <param name="viewPath">Returns the hash code for the view path</param>
            <returns></returns>
            <remarks>
            Because view paths can be quite long and we are limited to 260 characters based on the .Net framework, we need to 
            hash the URL, and store a reference to it. Then we can look up the hash again later. This will also improve performance
            when determining if a virtual URL is in fact a virtual URL.
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.RouteValueDictionaryExtensions.ToFormCollection(System.Web.Routing.RouteValueDictionary)">
            <summary>
            Converts a route value dictionary to a form collection
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.RouteValueDictionaryExtensions.GetRequiredObject(System.Web.Routing.RouteValueDictionary,System.String)">
            <summary>
            Returns the value of a mandatory item in the route items
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.TreeControllerExtensions.GetRootNodeId(Rebel.Cms.Web.Trees.TreeController)">
            <summary>
            Returns the application root node for a tree
            </summary>
            <param name="treeController"></param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Trees.RebelTreeResult">
            <summary>
            Returns a result for an rebel tree
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Trees.RebelTreeResult.#ctor(Rebel.Cms.Web.Model.BackOffice.Trees.TreeNodeCollection,System.Web.Mvc.ControllerContext)">
            <summary>
            Constructs the tree result with the pre compiled TreeNodeCollection, also checks for any JavaScript files that 
            need to be added via ClientDependency that have been specified on menu items.
            </summary>
            <param name="nodeCollection"></param>
            <param name="controller">The current ControllerContext</param>
        </member>
        <member name="P:Rebel.Cms.Web.Trees.RebelTreeResult.NodeCollection">
            <summary>
            Returns a non-mutable collection of nodes
            </summary>
        </member>
        <member name="T:Rebel.Cms.Web.Routing.RenderRouteHandler">
            <summary>
            Custom route handler to assign the correct controller based on the Rebel request
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Routing.RenderRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)">
            <summary>
            Assigns the correct controller based on the Rebel request and returns a standard MvcHandler to prcess the response,
            this also stores the render model into the data tokens for the current RouteData.
            </summary>
            <param name="requestContext"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Routing.RenderRouteHandler.GetPostedFormInfo(System.Web.Routing.RequestContext)">
            <summary>
            Checks the request and query strings to see if it matches the definition of having a Surface controller
            posted value, if so, then we return a PostedDataProxyInfo object with the correct information.
            </summary>
            <param name="requestContext"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Routing.RenderRouteHandler.HandlePostedValues(System.Web.Routing.RequestContext,Rebel.Cms.Web.Routing.PostedDataProxyInfo,Rebel.Cms.Web.Model.IRebelRenderModel,Rebel.Cms.Web.Routing.RouteDefinition)">
            <summary>
            Handles a posted form to an Rebel Url and ensures the correct controller is routed to and that
            the right DataTokens are set.
            </summary>
            <param name="requestContext"></param>
            <param name="postedInfo"></param>
            <param name="renderModel"></param>
            <param name="routeDefinition">The original route definition that would normally be used to route if it were not a POST</param>
        </member>
        <member name="M:Rebel.Cms.Web.Routing.RenderRouteHandler.GetRebelRouteDefinition(System.Web.Routing.RequestContext,Rebel.Cms.Web.Model.IRebelRenderModel)">
            <summary>
            Returns a RouteDefinition object based on the current renderModel
            </summary>
            <param name="requestContext"></param>
            <param name="renderModel"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Routing.RenderRouteHandler.GetHandlerForRoute(System.Web.Routing.RequestContext,Rebel.Cms.Web.Model.IRebelRenderModel)">
            <summary>
            this will determine the controller and set the values in the route data
            </summary>
            <param name="requestContext"></param>
            <param name="renderModel"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Rebel.Cms.Web.FormCollectionExtensions.ToQueryString(System.Web.Mvc.FormCollection)" -->
        <member name="M:Rebel.Cms.Web.FormCollectionExtensions.ToDictionary(System.Web.Mvc.FormCollection)">
            <summary>
            Converts the FormCollection to a dictionary
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.FormCollectionExtensions.HasKey(System.Web.Mvc.FormCollection,System.String)">
            <summary>
            Checks if the collection contains the key
            </summary>
            <param name="items"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.FormCollectionExtensions.GetValue``1(System.Web.Mvc.FormCollection,System.String)">
            <summary>
            Returns the object based in the collection based on it's key. This does this with a conversion so if it doesn't convert a null object is returned.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.FormCollectionExtensions.GetRequiredString(System.Web.Mvc.FormCollection,System.String)">
            <summary>
            Returns the value of a mandatory item in the FormCollection
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="T:Rebel.Cms.Web.Routing.DefaultRoutingEngine">
            <summary>
            A utility for resolving urls and looking up entities by URL
            </summary>
        </member>
        <member name="M:Rebel.Cms.Web.Routing.DefaultRoutingEngine.#ctor(Rebel.Cms.Web.Context.IRebelApplicationContext,System.Web.HttpContextBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Rebel.Cms.Web.Routing.DefaultRoutingEngine"/> class.
            </summary>
            <param name="appContext">The routable request context.</param>
            <param name="httpContext"></param>
        </member>
        <member name="M:Rebel.Cms.Web.Routing.DefaultRoutingEngine.ClearCache(System.Boolean,Rebel.Framework.HiveId[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Clears the cache, removes domain cache items and content-url items
            </summary>
            <param name="clearDomains">true to clear all domain cache</param>
            <param name="clearForIds">will clear the URL</param>
            <param name="clearMappedUrls">will clear the cache for all URLs mapped to entities</param>
            <param name="clearGeneratedUrls">clears cache for all generated urls</param>
            <param name="clearAll">Clears all cache</param>
        </member>
        <member name="M:Rebel.Cms.Web.Routing.DefaultRoutingEngine.FindEntityByUrl(System.Uri,Rebel.Framework.RevisionStatusType)">
            <summary>
            Finds a TypedEntity based on the Uri
            </summary>
            <param name="fullUrlIncludingDomain"></param>
            <param name="revisionStatusType"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Routing.DefaultRoutingEngine.GetUrlForEntity(Rebel.Framework.Persistence.Model.TypedEntity)">
            <summary>
            Gets the URL.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
            <remarks>
            This takes into account the current host name in the request. If the current host name matches a host name
            defined in the domain list for the entity being looked up, then the hostname of the current request will 
            be used, otherwise the primary (first ordinal) domain will be used for the url.
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Routing.DefaultRoutingEngine.GetAllUrlsForEntity(Rebel.Framework.Persistence.Model.TypedEntity)">
            <summary>
            Resolves the url for the specified entity with its full domain paths based on all hostnames assigned.
            </summary>
            <param name="entity"></param>
            <returns>All URLs for the entity based on all of its hostnames assigned, if no hostnames are assigned in this entities branch, then a null value is returned</returns>
        </member>
        <member name="M:Rebel.Cms.Web.Routing.DefaultRoutingEngine.GetDomainUrls(System.Collections.Generic.IEnumerable{Rebel.Framework.Persistence.Model.TypedEntity})">
            <summary>
            Returns a list of URLs with the domains assigned based on the list of ancestorsOrSelf. If no domain is assigned to the branch that the entity exists in a null value is returned.
            </summary>
            <param name="ancestorsOrSelf">The ancestorsOrSelf list to create the URL for</param>
            <returns></returns>        
        </member>
        <member name="M:Rebel.Cms.Web.Routing.DefaultRoutingEngine.GetNonDomainUrl(System.Collections.Generic.IEnumerable{Rebel.Framework.Persistence.Model.TypedEntity})">
            <summary>
            Returns the non-domain URL for the 'self' node in ancestorsOrSelf or null if this node cannot
            exist in a non-domain branch.
            </summary>
            <param name="ancestorsOrSelf"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.Routing.DefaultRoutingEngine.GetContentUrl(Rebel.Framework.Persistence.Model.TypedEntity)">
            <summary>
            Gets the content URL.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
            <remarks>
            This takes into account the current host name in the request. If the current host name matches a host name
            defined in the domain list for the entity being looked up, then the hostname of the current request will 
            be used, otherwise the primary (first ordinal) domain will be used for the url.
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.Routing.DefaultRoutingEngine.GetMediaUrl(Rebel.Framework.Persistence.Model.TypedEntity)">
            <summary>
            Gets the media URL.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="P:Rebel.Cms.Web.Routing.DefaultRoutingEngine.DomainList">
            <summary>
            Returns the list of domains and their asigned hive ids
            </summary>
            <remarks>
            The domain list is stored in application cache
            </remarks>
        </member>
        <member name="M:Rebel.Cms.Web.ValueProviderExtensions.ToValueProvider(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Converts a dictionary to an IValueProvider
            </summary>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ViewContextExtensions.CopyWithModel(System.Web.Mvc.ViewContext,System.Object)">
            <summary>
            Creates a new ViewContext from an existing one but specifies a new Model for the ViewData
            </summary>
            <param name="vc"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ViewDataContainerExtensions.FilterContainer(System.Web.Mvc.IViewDataContainer,System.String)">
            <summary>
            Creates a new IViewDataContainer but with a filtered ModelState
            </summary>
            <param name="container"></param>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:Rebel.Cms.Web.ViewDataContainerExtensions.CopyWithModel(System.Web.Mvc.IViewDataContainer,System.Object)">
            <summary>
            Returns a new IViewContainer based on the current one but supplies a different model to the ViewData
            </summary>
            <param name="container"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
    </members>
</doc>
