<?xml version="1.0"?>
<framework>
  <cachePolicies default="Standard">
    <add name="Standard" durationSeconds="3600" />
    <!-- Example custom rule: <add name="MyCustomRule" durationSeconds="999999999" />-->
  </cachePolicies>
  <cacheProviders>
    <extendedLifetime provider="Rebel.Lucene.Caching.CacheProvider, Rebel.Lucene">
      <!--
          Advanced / optional:
          
          You can specify expressions that the caching system uses for choosing a cache policy.
          Cache policies are listed above in this file.
          
          The expression needs to run against the cache key type, and follows the same structure as 
          string expressions in Rebel templates.
          Here's an example that says we should use a policy called "MyCustomRule" when
          the relation name for a query cache key is "DefaultRelationType".
          
          <rules>
            <rule forKeyType="Rebel.Hive.Caching.HiveRelationCacheKey, Rebel.Hive" check="RelationType.RelationName == @0" usePolicy="MyCustomRule">
              <param type="System.String" value="DefaultRelationType" />
            </rule>
          </rules>-->
    </extendedLifetime>
    <limitedLifetime provider="Rebel.Framework.Caching.PerHttpRequestCacheProvider, Rebel.Framework" />
  </cacheProviders>
</framework>
   